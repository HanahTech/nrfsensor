
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	20002500 	.word	0x20002500
   4:	00004381 	.word	0x00004381
   8:	0000a481 	.word	0x0000a481
   c:	0000436d 	.word	0x0000436d
  10:	0000436d 	.word	0x0000436d
  14:	0000436d 	.word	0x0000436d
  18:	0000436d 	.word	0x0000436d
	...
  2c:	000041b9 	.word	0x000041b9
  30:	0000436d 	.word	0x0000436d
  34:	00000000 	.word	0x00000000
  38:	00004161 	.word	0x00004161
  3c:	0000436d 	.word	0x0000436d

00000040 <_irq_vector_table>:
  40:	00004119 00004119 00004119 00004119     .A...A...A...A..
  50:	00004119 00004119 00004119 00004119     .A...A...A...A..
  60:	00004119 00004119 00004119 00004119     .A...A...A...A..
  70:	00004119 00004119 00004119 00004119     .A...A...A...A..
  80:	00004119 00004119 00004119 00004119     .A...A...A...A..
  90:	00004119 00004119 00004119 00004119     .A...A...A...A..
  a0:	00004119 00004119 00004119 00004119     .A...A...A...A..
  b0:	00004119 00004119 00004119 00004119     .A...A...A...A..
  c0:	00004119 00004119 00004119 00004119     .A...A...A...A..
  d0:	00004119 00004119 00004119 00004119     .A...A...A...A..
  e0:	00004119 00004119 00004119 00004119     .A...A...A...A..
  f0:	00004119 00004119 00004119 00004119     .A...A...A...A..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_SHELL_HISTORY_BUFFER+0xfa>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_SHELL_HISTORY_BUFFER+0xe6>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_SHELL_CMD_BUFF_SIZE+0x1e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_SHELL_CMD_BUFF_SIZE+0x3c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_SHELL_CMD_BUFF_SIZE+0x52>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_SHELL_HISTORY_BUFFER+0x30>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_SHELL_HISTORY_BUFFER+0x18>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <__data_size+0x3c>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_SHELL_HISTORY_BUFFER+0x18>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_SHELL_HISTORY_BUFFER+0x7a>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_SHELL_HISTORY_BUFFER+0x76>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_SHELL_HISTORY_BUFFER+0x90>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_SHELL_HISTORY_BUFFER+0xde>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_SHELL_HISTORY_BUFFER+0xc6>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <__data_size+0x4a>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <__data_size+0xe>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <__data_size+0x2c>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_SHELL_HISTORY_BUFFER+0x44>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_SHELL_HISTORY_BUFFER+0x44>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_SHELL_HISTORY_BUFFER+0x44>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_SHELL_CMD_BUFF_SIZE+0x52>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_SHELL_CMD_BUFF_SIZE+0x52>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16c>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c8>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x152>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x136>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x156>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x196>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b2>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     89a:	e712      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>

0000089c <__aeabi_ldivmod>:
     89c:	b97b      	cbnz	r3, 8be <__aeabi_ldivmod+0x22>
     89e:	b972      	cbnz	r2, 8be <__aeabi_ldivmod+0x22>
     8a0:	2900      	cmp	r1, #0
     8a2:	bfbe      	ittt	lt
     8a4:	2000      	movlt	r0, #0
     8a6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     8aa:	e006      	blt.n	8ba <__aeabi_ldivmod+0x1e>
     8ac:	bf08      	it	eq
     8ae:	2800      	cmpeq	r0, #0
     8b0:	bf1c      	itt	ne
     8b2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     8b6:	f04f 30ff 	movne.w	r0, #4294967295
     8ba:	f000 b9b7 	b.w	c2c <__aeabi_idiv0>
     8be:	f1ad 0c08 	sub.w	ip, sp, #8
     8c2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     8c6:	2900      	cmp	r1, #0
     8c8:	db09      	blt.n	8de <__aeabi_ldivmod+0x42>
     8ca:	2b00      	cmp	r3, #0
     8cc:	db1a      	blt.n	904 <__aeabi_ldivmod+0x68>
     8ce:	f000 f84d 	bl	96c <__udivmoddi4>
     8d2:	f8dd e004 	ldr.w	lr, [sp, #4]
     8d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     8da:	b004      	add	sp, #16
     8dc:	4770      	bx	lr
     8de:	4240      	negs	r0, r0
     8e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     8e4:	2b00      	cmp	r3, #0
     8e6:	db1b      	blt.n	920 <__aeabi_ldivmod+0x84>
     8e8:	f000 f840 	bl	96c <__udivmoddi4>
     8ec:	f8dd e004 	ldr.w	lr, [sp, #4]
     8f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     8f4:	b004      	add	sp, #16
     8f6:	4240      	negs	r0, r0
     8f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     8fc:	4252      	negs	r2, r2
     8fe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     902:	4770      	bx	lr
     904:	4252      	negs	r2, r2
     906:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     90a:	f000 f82f 	bl	96c <__udivmoddi4>
     90e:	f8dd e004 	ldr.w	lr, [sp, #4]
     912:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     916:	b004      	add	sp, #16
     918:	4240      	negs	r0, r0
     91a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     91e:	4770      	bx	lr
     920:	4252      	negs	r2, r2
     922:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     926:	f000 f821 	bl	96c <__udivmoddi4>
     92a:	f8dd e004 	ldr.w	lr, [sp, #4]
     92e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     932:	b004      	add	sp, #16
     934:	4252      	negs	r2, r2
     936:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     93a:	4770      	bx	lr

0000093c <__aeabi_uldivmod>:
     93c:	b953      	cbnz	r3, 954 <__aeabi_uldivmod+0x18>
     93e:	b94a      	cbnz	r2, 954 <__aeabi_uldivmod+0x18>
     940:	2900      	cmp	r1, #0
     942:	bf08      	it	eq
     944:	2800      	cmpeq	r0, #0
     946:	bf1c      	itt	ne
     948:	f04f 31ff 	movne.w	r1, #4294967295
     94c:	f04f 30ff 	movne.w	r0, #4294967295
     950:	f000 b96c 	b.w	c2c <__aeabi_idiv0>
     954:	f1ad 0c08 	sub.w	ip, sp, #8
     958:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     95c:	f000 f806 	bl	96c <__udivmoddi4>
     960:	f8dd e004 	ldr.w	lr, [sp, #4]
     964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     968:	b004      	add	sp, #16
     96a:	4770      	bx	lr

0000096c <__udivmoddi4>:
     96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     970:	9e08      	ldr	r6, [sp, #32]
     972:	460d      	mov	r5, r1
     974:	4604      	mov	r4, r0
     976:	468e      	mov	lr, r1
     978:	2b00      	cmp	r3, #0
     97a:	f040 8082 	bne.w	a82 <__udivmoddi4+0x116>
     97e:	428a      	cmp	r2, r1
     980:	4617      	mov	r7, r2
     982:	d946      	bls.n	a12 <__udivmoddi4+0xa6>
     984:	fab2 f282 	clz	r2, r2
     988:	b14a      	cbz	r2, 99e <__udivmoddi4+0x32>
     98a:	f1c2 0120 	rsb	r1, r2, #32
     98e:	fa05 f302 	lsl.w	r3, r5, r2
     992:	fa20 f101 	lsr.w	r1, r0, r1
     996:	4097      	lsls	r7, r2
     998:	ea41 0e03 	orr.w	lr, r1, r3
     99c:	4094      	lsls	r4, r2
     99e:	ea4f 4817 	mov.w	r8, r7, lsr #16
     9a2:	0c23      	lsrs	r3, r4, #16
     9a4:	fbbe fcf8 	udiv	ip, lr, r8
     9a8:	b2b9      	uxth	r1, r7
     9aa:	fb08 ee1c 	mls	lr, r8, ip, lr
     9ae:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     9b2:	fb0c f001 	mul.w	r0, ip, r1
     9b6:	4298      	cmp	r0, r3
     9b8:	d90a      	bls.n	9d0 <__udivmoddi4+0x64>
     9ba:	18fb      	adds	r3, r7, r3
     9bc:	f10c 35ff 	add.w	r5, ip, #4294967295
     9c0:	f080 8116 	bcs.w	bf0 <__udivmoddi4+0x284>
     9c4:	4298      	cmp	r0, r3
     9c6:	f240 8113 	bls.w	bf0 <__udivmoddi4+0x284>
     9ca:	f1ac 0c02 	sub.w	ip, ip, #2
     9ce:	443b      	add	r3, r7
     9d0:	1a1b      	subs	r3, r3, r0
     9d2:	b2a4      	uxth	r4, r4
     9d4:	fbb3 f0f8 	udiv	r0, r3, r8
     9d8:	fb08 3310 	mls	r3, r8, r0, r3
     9dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     9e0:	fb00 f101 	mul.w	r1, r0, r1
     9e4:	42a1      	cmp	r1, r4
     9e6:	d909      	bls.n	9fc <__udivmoddi4+0x90>
     9e8:	193c      	adds	r4, r7, r4
     9ea:	f100 33ff 	add.w	r3, r0, #4294967295
     9ee:	f080 8101 	bcs.w	bf4 <__udivmoddi4+0x288>
     9f2:	42a1      	cmp	r1, r4
     9f4:	f240 80fe 	bls.w	bf4 <__udivmoddi4+0x288>
     9f8:	3802      	subs	r0, #2
     9fa:	443c      	add	r4, r7
     9fc:	1a64      	subs	r4, r4, r1
     9fe:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     a02:	2100      	movs	r1, #0
     a04:	b11e      	cbz	r6, a0e <__udivmoddi4+0xa2>
     a06:	40d4      	lsrs	r4, r2
     a08:	2300      	movs	r3, #0
     a0a:	e9c6 4300 	strd	r4, r3, [r6]
     a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     a12:	b902      	cbnz	r2, a16 <__udivmoddi4+0xaa>
     a14:	deff      	udf	#255	; 0xff
     a16:	fab2 f282 	clz	r2, r2
     a1a:	2a00      	cmp	r2, #0
     a1c:	d14f      	bne.n	abe <__udivmoddi4+0x152>
     a1e:	1bcb      	subs	r3, r1, r7
     a20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     a24:	fa1f f887 	uxth.w	r8, r7
     a28:	2101      	movs	r1, #1
     a2a:	fbb3 fcfe 	udiv	ip, r3, lr
     a2e:	0c25      	lsrs	r5, r4, #16
     a30:	fb0e 331c 	mls	r3, lr, ip, r3
     a34:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     a38:	fb08 f30c 	mul.w	r3, r8, ip
     a3c:	42ab      	cmp	r3, r5
     a3e:	d907      	bls.n	a50 <__udivmoddi4+0xe4>
     a40:	197d      	adds	r5, r7, r5
     a42:	f10c 30ff 	add.w	r0, ip, #4294967295
     a46:	d202      	bcs.n	a4e <__udivmoddi4+0xe2>
     a48:	42ab      	cmp	r3, r5
     a4a:	f200 80e7 	bhi.w	c1c <__udivmoddi4+0x2b0>
     a4e:	4684      	mov	ip, r0
     a50:	1aed      	subs	r5, r5, r3
     a52:	b2a3      	uxth	r3, r4
     a54:	fbb5 f0fe 	udiv	r0, r5, lr
     a58:	fb0e 5510 	mls	r5, lr, r0, r5
     a5c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     a60:	fb08 f800 	mul.w	r8, r8, r0
     a64:	45a0      	cmp	r8, r4
     a66:	d907      	bls.n	a78 <__udivmoddi4+0x10c>
     a68:	193c      	adds	r4, r7, r4
     a6a:	f100 33ff 	add.w	r3, r0, #4294967295
     a6e:	d202      	bcs.n	a76 <__udivmoddi4+0x10a>
     a70:	45a0      	cmp	r8, r4
     a72:	f200 80d7 	bhi.w	c24 <__udivmoddi4+0x2b8>
     a76:	4618      	mov	r0, r3
     a78:	eba4 0408 	sub.w	r4, r4, r8
     a7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     a80:	e7c0      	b.n	a04 <__udivmoddi4+0x98>
     a82:	428b      	cmp	r3, r1
     a84:	d908      	bls.n	a98 <__udivmoddi4+0x12c>
     a86:	2e00      	cmp	r6, #0
     a88:	f000 80af 	beq.w	bea <__udivmoddi4+0x27e>
     a8c:	2100      	movs	r1, #0
     a8e:	e9c6 0500 	strd	r0, r5, [r6]
     a92:	4608      	mov	r0, r1
     a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     a98:	fab3 f183 	clz	r1, r3
     a9c:	2900      	cmp	r1, #0
     a9e:	d14b      	bne.n	b38 <__udivmoddi4+0x1cc>
     aa0:	42ab      	cmp	r3, r5
     aa2:	d302      	bcc.n	aaa <__udivmoddi4+0x13e>
     aa4:	4282      	cmp	r2, r0
     aa6:	f200 80b7 	bhi.w	c18 <__udivmoddi4+0x2ac>
     aaa:	1a84      	subs	r4, r0, r2
     aac:	eb65 0303 	sbc.w	r3, r5, r3
     ab0:	2001      	movs	r0, #1
     ab2:	469e      	mov	lr, r3
     ab4:	2e00      	cmp	r6, #0
     ab6:	d0aa      	beq.n	a0e <__udivmoddi4+0xa2>
     ab8:	e9c6 4e00 	strd	r4, lr, [r6]
     abc:	e7a7      	b.n	a0e <__udivmoddi4+0xa2>
     abe:	f1c2 0c20 	rsb	ip, r2, #32
     ac2:	fa01 f302 	lsl.w	r3, r1, r2
     ac6:	4097      	lsls	r7, r2
     ac8:	fa20 f00c 	lsr.w	r0, r0, ip
     acc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     ad0:	fa21 fc0c 	lsr.w	ip, r1, ip
     ad4:	4318      	orrs	r0, r3
     ad6:	fbbc f1fe 	udiv	r1, ip, lr
     ada:	0c05      	lsrs	r5, r0, #16
     adc:	fb0e cc11 	mls	ip, lr, r1, ip
     ae0:	fa1f f887 	uxth.w	r8, r7
     ae4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     ae8:	fb01 f308 	mul.w	r3, r1, r8
     aec:	42ab      	cmp	r3, r5
     aee:	fa04 f402 	lsl.w	r4, r4, r2
     af2:	d909      	bls.n	b08 <__udivmoddi4+0x19c>
     af4:	197d      	adds	r5, r7, r5
     af6:	f101 3cff 	add.w	ip, r1, #4294967295
     afa:	f080 808b 	bcs.w	c14 <__udivmoddi4+0x2a8>
     afe:	42ab      	cmp	r3, r5
     b00:	f240 8088 	bls.w	c14 <__udivmoddi4+0x2a8>
     b04:	3902      	subs	r1, #2
     b06:	443d      	add	r5, r7
     b08:	1aeb      	subs	r3, r5, r3
     b0a:	b285      	uxth	r5, r0
     b0c:	fbb3 f0fe 	udiv	r0, r3, lr
     b10:	fb0e 3310 	mls	r3, lr, r0, r3
     b14:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     b18:	fb00 f308 	mul.w	r3, r0, r8
     b1c:	42ab      	cmp	r3, r5
     b1e:	d907      	bls.n	b30 <__udivmoddi4+0x1c4>
     b20:	197d      	adds	r5, r7, r5
     b22:	f100 3cff 	add.w	ip, r0, #4294967295
     b26:	d271      	bcs.n	c0c <__udivmoddi4+0x2a0>
     b28:	42ab      	cmp	r3, r5
     b2a:	d96f      	bls.n	c0c <__udivmoddi4+0x2a0>
     b2c:	3802      	subs	r0, #2
     b2e:	443d      	add	r5, r7
     b30:	1aeb      	subs	r3, r5, r3
     b32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     b36:	e778      	b.n	a2a <__udivmoddi4+0xbe>
     b38:	f1c1 0c20 	rsb	ip, r1, #32
     b3c:	408b      	lsls	r3, r1
     b3e:	fa22 f70c 	lsr.w	r7, r2, ip
     b42:	431f      	orrs	r7, r3
     b44:	fa20 f40c 	lsr.w	r4, r0, ip
     b48:	fa05 f301 	lsl.w	r3, r5, r1
     b4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     b50:	fa25 f50c 	lsr.w	r5, r5, ip
     b54:	431c      	orrs	r4, r3
     b56:	0c23      	lsrs	r3, r4, #16
     b58:	fbb5 f9fe 	udiv	r9, r5, lr
     b5c:	fa1f f887 	uxth.w	r8, r7
     b60:	fb0e 5519 	mls	r5, lr, r9, r5
     b64:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     b68:	fb09 fa08 	mul.w	sl, r9, r8
     b6c:	45aa      	cmp	sl, r5
     b6e:	fa02 f201 	lsl.w	r2, r2, r1
     b72:	fa00 f301 	lsl.w	r3, r0, r1
     b76:	d908      	bls.n	b8a <__udivmoddi4+0x21e>
     b78:	197d      	adds	r5, r7, r5
     b7a:	f109 30ff 	add.w	r0, r9, #4294967295
     b7e:	d247      	bcs.n	c10 <__udivmoddi4+0x2a4>
     b80:	45aa      	cmp	sl, r5
     b82:	d945      	bls.n	c10 <__udivmoddi4+0x2a4>
     b84:	f1a9 0902 	sub.w	r9, r9, #2
     b88:	443d      	add	r5, r7
     b8a:	eba5 050a 	sub.w	r5, r5, sl
     b8e:	b2a4      	uxth	r4, r4
     b90:	fbb5 f0fe 	udiv	r0, r5, lr
     b94:	fb0e 5510 	mls	r5, lr, r0, r5
     b98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     b9c:	fb00 f808 	mul.w	r8, r0, r8
     ba0:	45a0      	cmp	r8, r4
     ba2:	d907      	bls.n	bb4 <__udivmoddi4+0x248>
     ba4:	193c      	adds	r4, r7, r4
     ba6:	f100 35ff 	add.w	r5, r0, #4294967295
     baa:	d22d      	bcs.n	c08 <__udivmoddi4+0x29c>
     bac:	45a0      	cmp	r8, r4
     bae:	d92b      	bls.n	c08 <__udivmoddi4+0x29c>
     bb0:	3802      	subs	r0, #2
     bb2:	443c      	add	r4, r7
     bb4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     bb8:	eba4 0408 	sub.w	r4, r4, r8
     bbc:	fba0 8902 	umull	r8, r9, r0, r2
     bc0:	454c      	cmp	r4, r9
     bc2:	46c6      	mov	lr, r8
     bc4:	464d      	mov	r5, r9
     bc6:	d319      	bcc.n	bfc <__udivmoddi4+0x290>
     bc8:	d016      	beq.n	bf8 <__udivmoddi4+0x28c>
     bca:	b15e      	cbz	r6, be4 <__udivmoddi4+0x278>
     bcc:	ebb3 020e 	subs.w	r2, r3, lr
     bd0:	eb64 0405 	sbc.w	r4, r4, r5
     bd4:	fa04 fc0c 	lsl.w	ip, r4, ip
     bd8:	40ca      	lsrs	r2, r1
     bda:	ea4c 0202 	orr.w	r2, ip, r2
     bde:	40cc      	lsrs	r4, r1
     be0:	e9c6 2400 	strd	r2, r4, [r6]
     be4:	2100      	movs	r1, #0
     be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     bea:	4631      	mov	r1, r6
     bec:	4630      	mov	r0, r6
     bee:	e70e      	b.n	a0e <__udivmoddi4+0xa2>
     bf0:	46ac      	mov	ip, r5
     bf2:	e6ed      	b.n	9d0 <__udivmoddi4+0x64>
     bf4:	4618      	mov	r0, r3
     bf6:	e701      	b.n	9fc <__udivmoddi4+0x90>
     bf8:	4543      	cmp	r3, r8
     bfa:	d2e6      	bcs.n	bca <__udivmoddi4+0x25e>
     bfc:	ebb8 0e02 	subs.w	lr, r8, r2
     c00:	eb69 0507 	sbc.w	r5, r9, r7
     c04:	3801      	subs	r0, #1
     c06:	e7e0      	b.n	bca <__udivmoddi4+0x25e>
     c08:	4628      	mov	r0, r5
     c0a:	e7d3      	b.n	bb4 <__udivmoddi4+0x248>
     c0c:	4660      	mov	r0, ip
     c0e:	e78f      	b.n	b30 <__udivmoddi4+0x1c4>
     c10:	4681      	mov	r9, r0
     c12:	e7ba      	b.n	b8a <__udivmoddi4+0x21e>
     c14:	4661      	mov	r1, ip
     c16:	e777      	b.n	b08 <__udivmoddi4+0x19c>
     c18:	4608      	mov	r0, r1
     c1a:	e74b      	b.n	ab4 <__udivmoddi4+0x148>
     c1c:	f1ac 0c02 	sub.w	ip, ip, #2
     c20:	443d      	add	r5, r7
     c22:	e715      	b.n	a50 <__udivmoddi4+0xe4>
     c24:	3802      	subs	r0, #2
     c26:	443c      	add	r4, r7
     c28:	e726      	b.n	a78 <__udivmoddi4+0x10c>
     c2a:	bf00      	nop

00000c2c <__aeabi_idiv0>:
     c2c:	4770      	bx	lr
     c2e:	bf00      	nop

00000c30 <handle_channel_by_name>:
};

static int handle_channel_by_name(const struct shell *shell,
					const struct device *dev,
					const char *channel_name)
{
     c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c34:	4616      	mov	r6, r2
     c36:	b090      	sub	sp, #64	; 0x40
     c38:	4605      	mov	r5, r0
     c3a:	460f      	mov	r7, r1
	char *endptr;
	int err;
	int i;

	/* Attempt to parse channel name as a number first */
	i = strtoul(channel_name, &endptr, 0);
     c3c:	2200      	movs	r2, #0
     c3e:	a909      	add	r1, sp, #36	; 0x24
     c40:	4630      	mov	r0, r6
     c42:	f009 fd81 	bl	a748 <strtoul>

	if (*endptr != '\0') {
     c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
     c48:	781b      	ldrb	r3, [r3, #0]
	i = strtoul(channel_name, &endptr, 0);
     c4a:	4604      	mov	r4, r0
	if (*endptr != '\0') {
     c4c:	b1a3      	cbz	r3, c78 <handle_channel_by_name+0x48>
     c4e:	f8df 8120 	ldr.w	r8, [pc, #288]	; d70 <handle_channel_by_name+0x140>
		/* Channel name is not a number, look it up */
		for (i = 0; i < ARRAY_SIZE(sensor_channel_name); i++) {
     c52:	2400      	movs	r4, #0
			if (strcmp(channel_name, sensor_channel_name[i]) == 0) {
     c54:	f858 1b04 	ldr.w	r1, [r8], #4
     c58:	4630      	mov	r0, r6
     c5a:	f009 fc89 	bl	a570 <strcmp>
     c5e:	b158      	cbz	r0, c78 <handle_channel_by_name+0x48>
		for (i = 0; i < ARRAY_SIZE(sensor_channel_name); i++) {
     c60:	3401      	adds	r4, #1
     c62:	2c39      	cmp	r4, #57	; 0x39
     c64:	d1f6      	bne.n	c54 <handle_channel_by_name+0x24>
				break;
			}
		}

		if (i == ARRAY_SIZE(sensor_channel_name)) {
			shell_error(shell, "Channel not supported (%s)",
     c66:	4628      	mov	r0, r5
     c68:	4a3f      	ldr	r2, [pc, #252]	; (d68 <handle_channel_by_name+0x138>)
     c6a:	4633      	mov	r3, r6
     c6c:	2101      	movs	r1, #1
     c6e:	f008 fd88 	bl	9782 <shell_fprintf>
				    channel_name);
			return -ENOTSUP;
     c72:	f06f 0085 	mvn.w	r0, #133	; 0x85
     c76:	e027      	b.n	cc8 <handle_channel_by_name+0x98>
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
     c78:	68bb      	ldr	r3, [r7, #8]
     c7a:	aa0a      	add	r2, sp, #40	; 0x28
     c7c:	691b      	ldr	r3, [r3, #16]
     c7e:	b2a1      	uxth	r1, r4
     c80:	4638      	mov	r0, r7
     c82:	4798      	blx	r3
		}
	}

	err = sensor_channel_get(dev, i, value);
	if (err < 0) {
     c84:	2800      	cmp	r0, #0
     c86:	db1f      	blt.n	cc8 <handle_channel_by_name+0x98>
		return err;
	}

	if (i >= ARRAY_SIZE(sensor_channel_name)) {
     c88:	980b      	ldr	r0, [sp, #44]	; 0x2c
     c8a:	f7ff fb8b 	bl	3a4 <__aeabi_i2d>
     c8e:	a334      	add	r3, pc, #208	; (adr r3, d60 <handle_channel_by_name+0x130>)
     c90:	e9d3 2300 	ldrd	r2, r3, [r3]
     c94:	f7ff fd1a 	bl	6cc <__aeabi_ddiv>
     c98:	4606      	mov	r6, r0
     c9a:	980a      	ldr	r0, [sp, #40]	; 0x28
     c9c:	460f      	mov	r7, r1
     c9e:	f7ff fb81 	bl	3a4 <__aeabi_i2d>
     ca2:	4602      	mov	r2, r0
     ca4:	460b      	mov	r3, r1
     ca6:	4630      	mov	r0, r6
     ca8:	4639      	mov	r1, r7
     caa:	f7ff fa2f 	bl	10c <__adddf3>
     cae:	2c38      	cmp	r4, #56	; 0x38
     cb0:	4606      	mov	r6, r0
     cb2:	460f      	mov	r7, r1
     cb4:	dd0b      	ble.n	cce <handle_channel_by_name+0x9e>
		shell_print(shell, "channel idx=%d value = %10.6f", i,
     cb6:	e9cd 6700 	strd	r6, r7, [sp]
     cba:	4a2c      	ldr	r2, [pc, #176]	; (d6c <handle_channel_by_name+0x13c>)
     cbc:	4623      	mov	r3, r4
     cbe:	2108      	movs	r1, #8
     cc0:	4628      	mov	r0, r5
     cc2:	f008 fd5e 	bl	9782 <shell_fprintf>
			sensor_value_to_double(&value[0]),
			sensor_value_to_double(&value[1]),
			sensor_value_to_double(&value[2]));
	}

	return 0;
     cc6:	2000      	movs	r0, #0
}
     cc8:	b010      	add	sp, #64	; 0x40
     cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (i != SENSOR_CHAN_ACCEL_XYZ &&
     cce:	4b28      	ldr	r3, [pc, #160]	; (d70 <handle_channel_by_name+0x140>)
     cd0:	f853 a024 	ldr.w	sl, [r3, r4, lsl #2]
     cd4:	f024 0304 	bic.w	r3, r4, #4
     cd8:	2b03      	cmp	r3, #3
     cda:	d00c      	beq.n	cf6 <handle_channel_by_name+0xc6>
		i != SENSOR_CHAN_GYRO_XYZ &&
     cdc:	2c0b      	cmp	r4, #11
     cde:	d00a      	beq.n	cf6 <handle_channel_by_name+0xc6>
		shell_print(shell,
     ce0:	e9cd 6702 	strd	r6, r7, [sp, #8]
     ce4:	4a23      	ldr	r2, [pc, #140]	; (d74 <handle_channel_by_name+0x144>)
     ce6:	f8cd a000 	str.w	sl, [sp]
     cea:	4623      	mov	r3, r4
     cec:	2108      	movs	r1, #8
     cee:	4628      	mov	r0, r5
     cf0:	f008 fd47 	bl	9782 <shell_fprintf>
     cf4:	e7e7      	b.n	cc6 <handle_channel_by_name+0x96>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(const struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
     cf6:	980f      	ldr	r0, [sp, #60]	; 0x3c
     cf8:	f7ff fb54 	bl	3a4 <__aeabi_i2d>
     cfc:	a318      	add	r3, pc, #96	; (adr r3, d60 <handle_channel_by_name+0x130>)
     cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
     d02:	f7ff fce3 	bl	6cc <__aeabi_ddiv>
     d06:	4680      	mov	r8, r0
     d08:	980e      	ldr	r0, [sp, #56]	; 0x38
     d0a:	4689      	mov	r9, r1
     d0c:	f7ff fb4a 	bl	3a4 <__aeabi_i2d>
     d10:	4602      	mov	r2, r0
     d12:	460b      	mov	r3, r1
     d14:	4640      	mov	r0, r8
     d16:	4649      	mov	r1, r9
     d18:	f7ff f9f8 	bl	10c <__adddf3>
		shell_print(shell,
     d1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
     d20:	980d      	ldr	r0, [sp, #52]	; 0x34
     d22:	f7ff fb3f 	bl	3a4 <__aeabi_i2d>
     d26:	a30e      	add	r3, pc, #56	; (adr r3, d60 <handle_channel_by_name+0x130>)
     d28:	e9d3 2300 	ldrd	r2, r3, [r3]
     d2c:	f7ff fcce 	bl	6cc <__aeabi_ddiv>
     d30:	4680      	mov	r8, r0
     d32:	980c      	ldr	r0, [sp, #48]	; 0x30
     d34:	4689      	mov	r9, r1
     d36:	f7ff fb35 	bl	3a4 <__aeabi_i2d>
     d3a:	4602      	mov	r2, r0
     d3c:	460b      	mov	r3, r1
     d3e:	4640      	mov	r0, r8
     d40:	4649      	mov	r1, r9
     d42:	f7ff f9e3 	bl	10c <__adddf3>
     d46:	e9cd 6702 	strd	r6, r7, [sp, #8]
     d4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
     d4e:	4a0a      	ldr	r2, [pc, #40]	; (d78 <handle_channel_by_name+0x148>)
     d50:	f8cd a000 	str.w	sl, [sp]
     d54:	4623      	mov	r3, r4
     d56:	2108      	movs	r1, #8
     d58:	4628      	mov	r0, r5
     d5a:	f008 fd12 	bl	9782 <shell_fprintf>
     d5e:	e7b2      	b.n	cc6 <handle_channel_by_name+0x96>
     d60:	00000000 	.word	0x00000000
     d64:	412e8480 	.word	0x412e8480
     d68:	0000d930 	.word	0x0000d930
     d6c:	0000d8c1 	.word	0x0000d8c1
     d70:	200000e0 	.word	0x200000e0
     d74:	0000d8e0 	.word	0x0000d8e0
     d78:	0000d8fc 	.word	0x0000d8fc

00000d7c <button_pressed>:
static struct gpio_dt_spec led = GPIO_DT_SPEC_GET_OR(DT_ALIAS(led0), gpios,
						     {0});

void button_pressed(const struct device *dev, struct gpio_callback *cb,
		    uint32_t pins)
{
     d7c:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
     d7e:	f00a fa73 	bl	b268 <sys_clock_cycle_get_32>
	printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
}
     d82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     d86:	4601      	mov	r1, r0
	printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
     d88:	4801      	ldr	r0, [pc, #4]	; (d90 <button_pressed+0x14>)
     d8a:	f008 bb46 	b.w	941a <printk>
     d8e:	bf00      	nop
     d90:	0000c668 	.word	0x0000c668

00000d94 <main>:




void main(void)
{
     d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
     d96:	4c4b      	ldr	r4, [pc, #300]	; (ec4 <main+0x130>)
     d98:	4620      	mov	r0, r4
     d9a:	f00a fb21 	bl	b3e0 <z_device_ready>
     d9e:	4625      	mov	r5, r4
     da0:	b168      	cbz	r0, dbe <main+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
     da2:	210b      	movs	r1, #11
     da4:	f240 1211 	movw	r2, #273	; 0x111
     da8:	4620      	mov	r0, r4
     daa:	f008 f84f 	bl	8e4c <z_impl_gpio_pin_configure>
		       button.port->name);
		return;
	}

	ret = gpio_pin_configure_dt(&button, GPIO_INPUT);
	if (ret != 0) {
     dae:	4601      	mov	r1, r0
     db0:	b158      	cbz	r0, dca <main+0x36>
		printk("Error %d: failed to configure %s pin %d\n",
     db2:	6822      	ldr	r2, [r4, #0]
     db4:	4844      	ldr	r0, [pc, #272]	; (ec8 <main+0x134>)
     db6:	230b      	movs	r3, #11
	}

	ret = gpio_pin_interrupt_configure_dt(&button,
					      GPIO_INT_EDGE_TO_ACTIVE);
	if (ret != 0) {
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
     db8:	f008 fb2f 	bl	941a <printk>
			ret, button.port->name, button.pin);
		return;
     dbc:	e003      	b.n	dc6 <main+0x32>
		printk("Error: button device %s is not ready\n",
     dbe:	6821      	ldr	r1, [r4, #0]
     dc0:	4842      	ldr	r0, [pc, #264]	; (ecc <main+0x138>)
     dc2:	f008 fb2a 	bl	941a <printk>
				gpio_pin_set_dt(&led, val);
			}
			k_msleep(SLEEP_TIME_MS);
		}
	}
}
     dc6:	b003      	add	sp, #12
     dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
     dca:	6923      	ldr	r3, [r4, #16]
	const struct gpio_driver_api *api =
     dcc:	68a6      	ldr	r6, [r4, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
     dce:	681b      	ldr	r3, [r3, #0]
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
     dd0:	69b7      	ldr	r7, [r6, #24]
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
     dd2:	f413 6f00 	tst.w	r3, #2048	; 0x800
	return api->pin_interrupt_configure(port, pin, mode, trig);
     dd6:	f04f 010b 	mov.w	r1, #11
     dda:	4620      	mov	r0, r4
     ddc:	bf14      	ite	ne
     dde:	f44f 3300 	movne.w	r3, #131072	; 0x20000
     de2:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
     de6:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
     dea:	47b8      	blx	r7
	if (ret != 0) {
     dec:	6824      	ldr	r4, [r4, #0]
     dee:	4601      	mov	r1, r0
     df0:	b118      	cbz	r0, dfa <main+0x66>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
     df2:	4837      	ldr	r0, [pc, #220]	; (ed0 <main+0x13c>)
     df4:	230b      	movs	r3, #11
     df6:	4622      	mov	r2, r4
     df8:	e7de      	b.n	db8 <main+0x24>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     dfa:	4936      	ldr	r1, [pc, #216]	; (ed4 <main+0x140>)
     dfc:	4b36      	ldr	r3, [pc, #216]	; (ed8 <main+0x144>)
     dfe:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
     e00:	f44f 6300 	mov.w	r3, #2048	; 0x800
     e04:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
     e06:	69f3      	ldr	r3, [r6, #28]
     e08:	b113      	cbz	r3, e10 <main+0x7c>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
     e0a:	2201      	movs	r2, #1
     e0c:	4628      	mov	r0, r5
     e0e:	4798      	blx	r3
	printk("Set up button at %s pin %d\n", button.port->name, button.pin);
     e10:	4621      	mov	r1, r4
	if (led.port && !device_is_ready(led.port)) {
     e12:	4c32      	ldr	r4, [pc, #200]	; (edc <main+0x148>)
	printk("Set up button at %s pin %d\n", button.port->name, button.pin);
     e14:	4832      	ldr	r0, [pc, #200]	; (ee0 <main+0x14c>)
     e16:	220b      	movs	r2, #11
     e18:	f008 faff 	bl	941a <printk>
	if (led.port && !device_is_ready(led.port)) {
     e1c:	6820      	ldr	r0, [r4, #0]
     e1e:	b150      	cbz	r0, e36 <main+0xa2>
     e20:	f00a fade 	bl	b3e0 <z_device_ready>
     e24:	4606      	mov	r6, r0
     e26:	b930      	cbnz	r0, e36 <main+0xa2>
		printk("Error %d: LED device %s is not ready; ignoring it\n",
     e28:	6823      	ldr	r3, [r4, #0]
     e2a:	4601      	mov	r1, r0
     e2c:	681a      	ldr	r2, [r3, #0]
     e2e:	482d      	ldr	r0, [pc, #180]	; (ee4 <main+0x150>)
     e30:	f008 faf3 	bl	941a <printk>
		led.port = NULL;
     e34:	6026      	str	r6, [r4, #0]
	if (led.port) {
     e36:	6820      	ldr	r0, [r4, #0]
     e38:	b180      	cbz	r0, e5c <main+0xc8>
				  spec->dt_flags | extra_flags);
     e3a:	7962      	ldrb	r2, [r4, #5]
	return gpio_pin_configure(spec->port,
     e3c:	7921      	ldrb	r1, [r4, #4]
     e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
     e42:	f008 f803 	bl	8e4c <z_impl_gpio_pin_configure>
		if (ret != 0) {
     e46:	7923      	ldrb	r3, [r4, #4]
     e48:	4601      	mov	r1, r0
     e4a:	2800      	cmp	r0, #0
     e4c:	d02e      	beq.n	eac <main+0x118>
			printk("Error %d: failed to configure LED device %s pin %d\n",
     e4e:	6822      	ldr	r2, [r4, #0]
     e50:	4825      	ldr	r0, [pc, #148]	; (ee8 <main+0x154>)
     e52:	6812      	ldr	r2, [r2, #0]
     e54:	f008 fae1 	bl	941a <printk>
			led.port = NULL;
     e58:	2300      	movs	r3, #0
     e5a:	6023      	str	r3, [r4, #0]
	printk("Press the button\n");
     e5c:	4823      	ldr	r0, [pc, #140]	; (eec <main+0x158>)
     e5e:	f008 fadc 	bl	941a <printk>
	if (led.port) {
     e62:	6823      	ldr	r3, [r4, #0]
     e64:	2b00      	cmp	r3, #0
     e66:	d0ae      	beq.n	dc6 <main+0x32>
	const struct gpio_driver_data *const data =
     e68:	692e      	ldr	r6, [r5, #16]
	return api->port_get_raw(port, value);
     e6a:	4f16      	ldr	r7, [pc, #88]	; (ec4 <main+0x130>)
     e6c:	68ab      	ldr	r3, [r5, #8]
     e6e:	a901      	add	r1, sp, #4
     e70:	685b      	ldr	r3, [r3, #4]
     e72:	4638      	mov	r0, r7
     e74:	4798      	blx	r3
	if (ret == 0) {
     e76:	1e03      	subs	r3, r0, #0
     e78:	d122      	bne.n	ec0 <main+0x12c>
		*value ^= data->invert;
     e7a:	6830      	ldr	r0, [r6, #0]
     e7c:	9b01      	ldr	r3, [sp, #4]
     e7e:	4043      	eors	r3, r0
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
     e80:	f3c3 23c0 	ubfx	r3, r3, #11, #1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     e84:	7922      	ldrb	r2, [r4, #4]
	return gpio_pin_set(spec->port, spec->pin, value);
     e86:	6820      	ldr	r0, [r4, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     e88:	2101      	movs	r1, #1
     e8a:	4091      	lsls	r1, r2
     e8c:	6902      	ldr	r2, [r0, #16]
     e8e:	6812      	ldr	r2, [r2, #0]
     e90:	4211      	tst	r1, r2
		value = (value != 0) ? 0 : 1;
     e92:	bf1c      	itt	ne
     e94:	fab3 f383 	clzne	r3, r3
     e98:	095b      	lsrne	r3, r3, #5
	if (value != 0)	{
     e9a:	b173      	cbz	r3, eba <main+0x126>
	return api->port_set_bits_raw(port, pins);
     e9c:	6883      	ldr	r3, [r0, #8]
     e9e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
     ea0:	4798      	blx	r3
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     ea2:	2100      	movs	r1, #0
     ea4:	2021      	movs	r0, #33	; 0x21
     ea6:	f007 f8cd 	bl	8044 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     eaa:	e7df      	b.n	e6c <main+0xd8>
			printk("Set up LED at %s pin %d\n", led.port->name, led.pin);
     eac:	6821      	ldr	r1, [r4, #0]
     eae:	4810      	ldr	r0, [pc, #64]	; (ef0 <main+0x15c>)
     eb0:	6809      	ldr	r1, [r1, #0]
     eb2:	461a      	mov	r2, r3
     eb4:	f008 fab1 	bl	941a <printk>
     eb8:	e7d0      	b.n	e5c <main+0xc8>
     eba:	6883      	ldr	r3, [r0, #8]
     ebc:	691b      	ldr	r3, [r3, #16]
     ebe:	e7ef      	b.n	ea0 <main+0x10c>
			if (val >= 0) {
     ec0:	dbef      	blt.n	ea2 <main+0x10e>
     ec2:	e7df      	b.n	e84 <main+0xf0>
     ec4:	0000bb38 	.word	0x0000bb38
     ec8:	0000c6a4 	.word	0x0000c6a4
     ecc:	0000c67e 	.word	0x0000c67e
     ed0:	0000c6cd 	.word	0x0000c6cd
     ed4:	200006b8 	.word	0x200006b8
     ed8:	00000d7d 	.word	0x00000d7d
     edc:	20000000 	.word	0x20000000
     ee0:	0000c703 	.word	0x0000c703
     ee4:	0000c71f 	.word	0x0000c71f
     ee8:	0000c752 	.word	0x0000c752
     eec:	0000c79f 	.word	0x0000c79f
     ef0:	0000c786 	.word	0x0000c786

00000ef4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ef8:	b0a5      	sub	sp, #148	; 0x94
     efa:	4688      	mov	r8, r1
     efc:	9003      	str	r0, [sp, #12]
     efe:	4691      	mov	r9, r2
     f00:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     f02:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     f04:	f899 0000 	ldrb.w	r0, [r9]
     f08:	b910      	cbnz	r0, f10 <cbvprintf+0x1c>
			OUTC(' ');
			--width;
		}
	}

	return count;
     f0a:	4628      	mov	r0, r5
     f0c:	f000 be15 	b.w	1b3a <CONFIG_FPROTECT_BLOCK_SIZE+0xb3a>
		if (*fp != '%') {
     f10:	f109 0301 	add.w	r3, r9, #1
     f14:	2825      	cmp	r0, #37	; 0x25
     f16:	9309      	str	r3, [sp, #36]	; 0x24
     f18:	d007      	beq.n	f2a <cbvprintf+0x36>
			OUTC(*fp++);
     f1a:	4641      	mov	r1, r8
			OUTC('%');
     f1c:	9b03      	ldr	r3, [sp, #12]
     f1e:	4798      	blx	r3
     f20:	2800      	cmp	r0, #0
     f22:	f2c0 860a 	blt.w	1b3a <CONFIG_FPROTECT_BLOCK_SIZE+0xb3a>
     f26:	3501      	adds	r5, #1
		if (bps == NULL) {
     f28:	e245      	b.n	13b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b6>
		} state = {
     f2a:	2218      	movs	r2, #24
     f2c:	2100      	movs	r1, #0
     f2e:	a816      	add	r0, sp, #88	; 0x58
     f30:	f009 fb6b 	bl	a60a <memset>
	if (*sp == '%') {
     f34:	f899 3001 	ldrb.w	r3, [r9, #1]
     f38:	2b25      	cmp	r3, #37	; 0x25
     f3a:	d079      	beq.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
     f3c:	2200      	movs	r2, #0
     f3e:	9809      	ldr	r0, [sp, #36]	; 0x24
     f40:	4616      	mov	r6, r2
     f42:	4696      	mov	lr, r2
     f44:	4617      	mov	r7, r2
     f46:	4694      	mov	ip, r2
     f48:	4601      	mov	r1, r0
		switch (*sp) {
     f4a:	f810 3b01 	ldrb.w	r3, [r0], #1
     f4e:	2b2b      	cmp	r3, #43	; 0x2b
     f50:	f000 809e 	beq.w	1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>
     f54:	f200 8095 	bhi.w	1082 <CONFIG_FPROTECT_BLOCK_SIZE+0x82>
     f58:	2b20      	cmp	r3, #32
     f5a:	f000 809b 	beq.w	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
     f5e:	2b23      	cmp	r3, #35	; 0x23
     f60:	f000 809b 	beq.w	109a <CONFIG_FPROTECT_BLOCK_SIZE+0x9a>
     f64:	f1bc 0f00 	cmp.w	ip, #0
     f68:	d005      	beq.n	f76 <cbvprintf+0x82>
     f6a:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
     f6e:	f040 0004 	orr.w	r0, r0, #4
     f72:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
     f76:	b12f      	cbz	r7, f84 <cbvprintf+0x90>
     f78:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
     f7c:	f040 0008 	orr.w	r0, r0, #8
     f80:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
     f84:	f1be 0f00 	cmp.w	lr, #0
     f88:	d005      	beq.n	f96 <cbvprintf+0xa2>
     f8a:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
     f8e:	f040 0010 	orr.w	r0, r0, #16
     f92:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
     f96:	b12e      	cbz	r6, fa4 <cbvprintf+0xb0>
     f98:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
     f9c:	f040 0020 	orr.w	r0, r0, #32
     fa0:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
     fa4:	b12a      	cbz	r2, fb2 <cbvprintf+0xbe>
     fa6:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
     faa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     fae:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	if (conv->flag_zero && conv->flag_dash) {
     fb2:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
     fb6:	f002 0044 	and.w	r0, r2, #68	; 0x44
     fba:	2844      	cmp	r0, #68	; 0x44
     fbc:	d103      	bne.n	fc6 <cbvprintf+0xd2>
		conv->flag_zero = false;
     fbe:	f36f 1286 	bfc	r2, #6, #1
     fc2:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	conv->width_present = true;
     fc6:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
	if (*sp == '*') {
     fca:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     fcc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     fd0:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	if (*sp == '*') {
     fd4:	d17c      	bne.n	10d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>
		conv->width_star = true;
     fd6:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
     fda:	f042 0201 	orr.w	r2, r2, #1
     fde:	1c4b      	adds	r3, r1, #1
     fe0:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
	conv->prec_present = (*sp == '.');
     fe4:	781a      	ldrb	r2, [r3, #0]
     fe6:	2a2e      	cmp	r2, #46	; 0x2e
     fe8:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
     fec:	bf0c      	ite	eq
     fee:	2101      	moveq	r1, #1
     ff0:	2100      	movne	r1, #0
     ff2:	f361 0241 	bfi	r2, r1, #1, #1
     ff6:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
	if (!conv->prec_present) {
     ffa:	d175      	bne.n	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
	if (*sp == '*') {
     ffc:	785a      	ldrb	r2, [r3, #1]
     ffe:	2a2a      	cmp	r2, #42	; 0x2a
    1000:	d06b      	beq.n	10da <CONFIG_FPROTECT_BLOCK_SIZE+0xda>
    1002:	3301      	adds	r3, #1
	size_t val = 0;
    1004:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    1006:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1008:	4618      	mov	r0, r3
    100a:	f810 2b01 	ldrb.w	r2, [r0], #1
    100e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1012:	2f09      	cmp	r7, #9
    1014:	f240 80aa 	bls.w	116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>
	conv->unsupported |= ((conv->prec_value < 0)
    1018:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
	conv->prec_value = prec;
    101c:	911a      	str	r1, [sp, #104]	; 0x68
	conv->unsupported |= ((conv->prec_value < 0)
    101e:	f3c2 0040 	ubfx	r0, r2, #1, #1
    1022:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    1026:	f361 0241 	bfi	r2, r1, #1, #1
    102a:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	return sp;
    102e:	e05b      	b.n	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
		conv->specifier = *sp++;
    1030:	f109 0202 	add.w	r2, r9, #2
    1034:	9209      	str	r2, [sp, #36]	; 0x24
    1036:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
		if (conv->width_star) {
    103a:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    103e:	07de      	lsls	r6, r3, #31
    1040:	f140 816f 	bpl.w	1322 <CONFIG_FPROTECT_BLOCK_SIZE+0x322>
			width = va_arg(ap, int);
    1044:	f854 2b04 	ldr.w	r2, [r4], #4
    1048:	9208      	str	r2, [sp, #32]
			if (width < 0) {
    104a:	2a00      	cmp	r2, #0
    104c:	da08      	bge.n	1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>
				conv->flag_dash = true;
    104e:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    1052:	f042 0204 	orr.w	r2, r2, #4
    1056:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
				width = -width;
    105a:	9a08      	ldr	r2, [sp, #32]
    105c:	4252      	negs	r2, r2
		int width = -1;
    105e:	9208      	str	r2, [sp, #32]
		if (conv->prec_star) {
    1060:	0758      	lsls	r0, r3, #29
    1062:	f140 8166 	bpl.w	1332 <CONFIG_FPROTECT_BLOCK_SIZE+0x332>
			int arg = va_arg(ap, int);
    1066:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    106a:	2f00      	cmp	r7, #0
    106c:	f280 8165 	bge.w	133a <CONFIG_FPROTECT_BLOCK_SIZE+0x33a>
				conv->prec_present = false;
    1070:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    1074:	f36f 0341 	bfc	r3, #1, #1
    1078:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
		int precision = -1;
    107c:	f04f 37ff 	mov.w	r7, #4294967295
    1080:	e15b      	b.n	133a <CONFIG_FPROTECT_BLOCK_SIZE+0x33a>
		switch (*sp) {
    1082:	2b2d      	cmp	r3, #45	; 0x2d
    1084:	d00b      	beq.n	109e <CONFIG_FPROTECT_BLOCK_SIZE+0x9e>
    1086:	2b30      	cmp	r3, #48	; 0x30
    1088:	f47f af6c 	bne.w	f64 <cbvprintf+0x70>
			conv->flag_zero = true;
    108c:	2201      	movs	r2, #1
	} while (loop);
    108e:	e75b      	b.n	f48 <cbvprintf+0x54>
			conv->flag_plus = true;
    1090:	2701      	movs	r7, #1
    1092:	e759      	b.n	f48 <cbvprintf+0x54>
			conv->flag_space = true;
    1094:	f04f 0e01 	mov.w	lr, #1
    1098:	e756      	b.n	f48 <cbvprintf+0x54>
			conv->flag_hash = true;
    109a:	2601      	movs	r6, #1
    109c:	e754      	b.n	f48 <cbvprintf+0x54>
		switch (*sp) {
    109e:	f04f 0c01 	mov.w	ip, #1
    10a2:	e751      	b.n	f48 <cbvprintf+0x54>
		val = 10U * val + *sp++ - '0';
    10a4:	fb0c 0202 	mla	r2, ip, r2, r0
    10a8:	3a30      	subs	r2, #48	; 0x30
    10aa:	4633      	mov	r3, r6
    10ac:	461e      	mov	r6, r3
    10ae:	f816 0b01 	ldrb.w	r0, [r6], #1
    10b2:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    10b6:	2f09      	cmp	r7, #9
    10b8:	d9f4      	bls.n	10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
	if (sp != wp) {
    10ba:	4299      	cmp	r1, r3
    10bc:	d092      	beq.n	fe4 <cbvprintf+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
    10be:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
		conv->width_value = width;
    10c2:	9219      	str	r2, [sp, #100]	; 0x64
				      || (width != (size_t)conv->width_value));
    10c4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    10c6:	f362 0141 	bfi	r1, r2, #1, #1
    10ca:	f88d 1060 	strb.w	r1, [sp, #96]	; 0x60
    10ce:	e789      	b.n	fe4 <cbvprintf+0xf0>
    10d0:	460b      	mov	r3, r1
	size_t val = 0;
    10d2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    10d4:	f04f 0c0a 	mov.w	ip, #10
    10d8:	e7e8      	b.n	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
		conv->prec_star = true;
    10da:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
    10de:	f042 0204 	orr.w	r2, r2, #4
    10e2:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
		return ++sp;
    10e6:	3302      	adds	r3, #2
	switch (*sp) {
    10e8:	4619      	mov	r1, r3
    10ea:	f811 2b01 	ldrb.w	r2, [r1], #1
    10ee:	2a6c      	cmp	r2, #108	; 0x6c
    10f0:	d05c      	beq.n	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    10f2:	d840      	bhi.n	1176 <CONFIG_FPROTECT_BLOCK_SIZE+0x176>
    10f4:	2a68      	cmp	r2, #104	; 0x68
    10f6:	d046      	beq.n	1186 <CONFIG_FPROTECT_BLOCK_SIZE+0x186>
    10f8:	2a6a      	cmp	r2, #106	; 0x6a
    10fa:	d061      	beq.n	11c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c0>
    10fc:	2a4c      	cmp	r2, #76	; 0x4c
    10fe:	d067      	beq.n	11d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d0>
    1100:	4619      	mov	r1, r3
	conv->specifier = *sp++;
    1102:	460b      	mov	r3, r1
    1104:	f813 2b01 	ldrb.w	r2, [r3], #1
    1108:	9309      	str	r3, [sp, #36]	; 0x24
	switch (conv->specifier) {
    110a:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    110c:	f88d 2063 	strb.w	r2, [sp, #99]	; 0x63
	switch (conv->specifier) {
    1110:	f200 80df 	bhi.w	12d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d2>
    1114:	2a57      	cmp	r2, #87	; 0x57
    1116:	d868      	bhi.n	11ea <CONFIG_FPROTECT_BLOCK_SIZE+0x1ea>
    1118:	2a41      	cmp	r2, #65	; 0x41
    111a:	d004      	beq.n	1126 <CONFIG_FPROTECT_BLOCK_SIZE+0x126>
    111c:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    1120:	2b02      	cmp	r3, #2
    1122:	f200 80d6 	bhi.w	12d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d2>
		conv->specifier_cat = SPECIFIER_FP;
    1126:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
			|| (conv->specifier == 'A');
    112a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    112e:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    1130:	f1a2 0a41 	sub.w	sl, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    1134:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    1138:	f1da 0200 	rsbs	r2, sl, #0
		conv->specifier_a = (conv->specifier == 'a')
    113c:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
		conv->specifier_cat = SPECIFIER_FP;
    1140:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
			|| (conv->specifier == 'A');
    1144:	eb42 020a 	adc.w	r2, r2, sl
		conv->specifier_a = (conv->specifier == 'a')
    1148:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    114c:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    114e:	f88d 1061 	strb.w	r1, [sp, #97]	; 0x61
		if (conv->specifier_a
    1152:	b2cb      	uxtb	r3, r1
    1154:	f100 80e3 	bmi.w	131e <CONFIG_FPROTECT_BLOCK_SIZE+0x31e>
		if (conv->length_mod == LENGTH_L) {
    1158:	f003 0278 	and.w	r2, r3, #120	; 0x78
    115c:	2a18      	cmp	r2, #24
    115e:	f040 80b5 	bne.w	12cc <CONFIG_FPROTECT_BLOCK_SIZE+0x2cc>
			conv->length_mod = LENGTH_NONE;
    1162:	f36f 03c6 	bfc	r3, #3, #4
    1166:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
    116a:	e09c      	b.n	12a6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a6>
		val = 10U * val + *sp++ - '0';
    116c:	fb06 2101 	mla	r1, r6, r1, r2
    1170:	3930      	subs	r1, #48	; 0x30
    1172:	4603      	mov	r3, r0
    1174:	e748      	b.n	1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
	switch (*sp) {
    1176:	2a74      	cmp	r2, #116	; 0x74
    1178:	d026      	beq.n	11c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>
    117a:	2a7a      	cmp	r2, #122	; 0x7a
    117c:	d1c0      	bne.n	1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>
		conv->length_mod = LENGTH_Z;
    117e:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    1182:	2206      	movs	r2, #6
    1184:	e00d      	b.n	11a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a2>
		if (*++sp == 'h') {
    1186:	785a      	ldrb	r2, [r3, #1]
    1188:	2a68      	cmp	r2, #104	; 0x68
    118a:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
    118e:	d106      	bne.n	119e <CONFIG_FPROTECT_BLOCK_SIZE+0x19e>
			conv->length_mod = LENGTH_HH;
    1190:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1192:	f361 02c6 	bfi	r2, r1, #3, #4
    1196:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
			++sp;
    119a:	1c99      	adds	r1, r3, #2
    119c:	e7b1      	b.n	1102 <CONFIG_FPROTECT_BLOCK_SIZE+0x102>
			conv->length_mod = LENGTH_H;
    119e:	4613      	mov	r3, r2
    11a0:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    11a2:	f362 03c6 	bfi	r3, r2, #3, #4
    11a6:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
		break;
    11aa:	e7aa      	b.n	1102 <CONFIG_FPROTECT_BLOCK_SIZE+0x102>
		if (*++sp == 'l') {
    11ac:	785a      	ldrb	r2, [r3, #1]
    11ae:	2a6c      	cmp	r2, #108	; 0x6c
    11b0:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
    11b4:	d101      	bne.n	11ba <CONFIG_FPROTECT_BLOCK_SIZE+0x1ba>
			conv->length_mod = LENGTH_LL;
    11b6:	2104      	movs	r1, #4
    11b8:	e7eb      	b.n	1192 <CONFIG_FPROTECT_BLOCK_SIZE+0x192>
			conv->length_mod = LENGTH_L;
    11ba:	4613      	mov	r3, r2
    11bc:	2203      	movs	r2, #3
    11be:	e7f0      	b.n	11a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a2>
		conv->length_mod = LENGTH_J;
    11c0:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    11c4:	2205      	movs	r2, #5
    11c6:	e7ec      	b.n	11a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a2>
		conv->length_mod = LENGTH_T;
    11c8:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    11cc:	2207      	movs	r2, #7
    11ce:	e7e8      	b.n	11a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a2>
		conv->unsupported = true;
    11d0:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    11d4:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    11d8:	f023 0302 	bic.w	r3, r3, #2
    11dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    11e0:	f043 0302 	orr.w	r3, r3, #2
    11e4:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
		break;
    11e8:	e78b      	b.n	1102 <CONFIG_FPROTECT_BLOCK_SIZE+0x102>
    11ea:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    11ee:	2b20      	cmp	r3, #32
    11f0:	d86f      	bhi.n	12d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d2>
    11f2:	a101      	add	r1, pc, #4	; (adr r1, 11f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f8>)
    11f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    11f8:	000012ab 	.word	0x000012ab
    11fc:	000012d3 	.word	0x000012d3
    1200:	000012d3 	.word	0x000012d3
    1204:	000012d3 	.word	0x000012d3
    1208:	000012d3 	.word	0x000012d3
    120c:	000012d3 	.word	0x000012d3
    1210:	000012d3 	.word	0x000012d3
    1214:	000012d3 	.word	0x000012d3
    1218:	000012d3 	.word	0x000012d3
    121c:	00001127 	.word	0x00001127
    1220:	000012d3 	.word	0x000012d3
    1224:	000012ab 	.word	0x000012ab
    1228:	0000127d 	.word	0x0000127d
    122c:	00001127 	.word	0x00001127
    1230:	00001127 	.word	0x00001127
    1234:	00001127 	.word	0x00001127
    1238:	000012d3 	.word	0x000012d3
    123c:	0000127d 	.word	0x0000127d
    1240:	000012d3 	.word	0x000012d3
    1244:	000012d3 	.word	0x000012d3
    1248:	000012d3 	.word	0x000012d3
    124c:	000012d3 	.word	0x000012d3
    1250:	000012e1 	.word	0x000012e1
    1254:	000012ab 	.word	0x000012ab
    1258:	00001301 	.word	0x00001301
    125c:	000012d3 	.word	0x000012d3
    1260:	000012d3 	.word	0x000012d3
    1264:	00001301 	.word	0x00001301
    1268:	000012d3 	.word	0x000012d3
    126c:	000012ab 	.word	0x000012ab
    1270:	000012d3 	.word	0x000012d3
    1274:	000012d3 	.word	0x000012d3
    1278:	000012ab 	.word	0x000012ab
		conv->specifier_cat = SPECIFIER_SINT;
    127c:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
    1280:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    1282:	f361 0302 	bfi	r3, r1, #0, #3
    1286:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		if (conv->length_mod == LENGTH_UPPER_L) {
    128a:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    128e:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1292:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    1294:	bf02      	ittt	eq
    1296:	f89d 1060 	ldrbeq.w	r1, [sp, #96]	; 0x60
    129a:	f041 0101 	orreq.w	r1, r1, #1
    129e:	f88d 1060 	strbeq.w	r1, [sp, #96]	; 0x60
		if (conv->specifier == 'c') {
    12a2:	2a63      	cmp	r2, #99	; 0x63
    12a4:	d005      	beq.n	12b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b2>
	bool unsupported = false;
    12a6:	2300      	movs	r3, #0
    12a8:	e006      	b.n	12b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b8>
		conv->specifier_cat = SPECIFIER_UINT;
    12aa:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
    12ae:	2102      	movs	r1, #2
    12b0:	e7e7      	b.n	1282 <CONFIG_FPROTECT_BLOCK_SIZE+0x282>
			unsupported = (conv->length_mod != LENGTH_NONE);
    12b2:	3b00      	subs	r3, #0
    12b4:	bf18      	it	ne
    12b6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    12b8:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    12bc:	f3c2 0140 	ubfx	r1, r2, #1, #1
    12c0:	430b      	orrs	r3, r1
    12c2:	f363 0241 	bfi	r2, r3, #1, #1
    12c6:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	return sp;
    12ca:	e6b6      	b.n	103a <CONFIG_FPROTECT_BLOCK_SIZE+0x3a>
		} else if ((conv->length_mod != LENGTH_NONE)
    12cc:	f013 0f38 	tst.w	r3, #56	; 0x38
    12d0:	d0e9      	beq.n	12a6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a6>
			conv->invalid = true;
    12d2:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    12d6:	f043 0301 	orr.w	r3, r3, #1
    12da:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    12de:	e7e2      	b.n	12a6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a6>
		conv->specifier_cat = SPECIFIER_PTR;
    12e0:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
    12e4:	2203      	movs	r2, #3
    12e6:	f362 0302 	bfi	r3, r2, #0, #3
    12ea:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		if (conv->length_mod == LENGTH_UPPER_L) {
    12ee:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    12f2:	f003 0378 	and.w	r3, r3, #120	; 0x78
    12f6:	f1a3 0740 	sub.w	r7, r3, #64	; 0x40
    12fa:	427b      	negs	r3, r7
    12fc:	417b      	adcs	r3, r7
    12fe:	e7db      	b.n	12b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b8>
		conv->specifier_cat = SPECIFIER_PTR;
    1300:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
    1304:	2203      	movs	r2, #3
    1306:	f362 0302 	bfi	r3, r2, #0, #3
    130a:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		if (conv->length_mod != LENGTH_NONE) {
    130e:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    1312:	f013 0f78 	tst.w	r3, #120	; 0x78
    1316:	bf14      	ite	ne
    1318:	2301      	movne	r3, #1
    131a:	2300      	moveq	r3, #0
    131c:	e7cc      	b.n	12b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b8>
			unsupported = true;
    131e:	2301      	movs	r3, #1
    1320:	e7ca      	b.n	12b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b8>
		} else if (conv->width_present) {
    1322:	f99d 2060 	ldrsb.w	r2, [sp, #96]	; 0x60
    1326:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1328:	bfb4      	ite	lt
    132a:	9a19      	ldrlt	r2, [sp, #100]	; 0x64
		int width = -1;
    132c:	f04f 32ff 	movge.w	r2, #4294967295
    1330:	e695      	b.n	105e <CONFIG_FPROTECT_BLOCK_SIZE+0x5e>
		} else if (conv->prec_present) {
    1332:	0799      	lsls	r1, r3, #30
    1334:	f57f aea2 	bpl.w	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
			precision = conv->prec_value;
    1338:	9f1a      	ldr	r7, [sp, #104]	; 0x68
		conv->pad0_value = 0;
    133a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    133c:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
		    && (conv->specifier_cat == SPECIFIER_FP)
    1340:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    1344:	f003 0307 	and.w	r3, r3, #7
    1348:	2b04      	cmp	r3, #4
    134a:	d109      	bne.n	1360 <CONFIG_FPROTECT_BLOCK_SIZE+0x360>
		    && !conv->prec_present) {
    134c:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    1350:	079a      	lsls	r2, r3, #30
    1352:	d405      	bmi.n	1360 <CONFIG_FPROTECT_BLOCK_SIZE+0x360>
			if (conv->specifier_a) {
    1354:	f99d 3061 	ldrsb.w	r3, [sp, #97]	; 0x61
				precision = 6;
    1358:	2b00      	cmp	r3, #0
    135a:	bfb4      	ite	lt
    135c:	270d      	movlt	r7, #13
    135e:	2706      	movge	r7, #6
			= (enum specifier_cat_enum)conv->specifier_cat;
    1360:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
			= (enum length_mod_enum)conv->length_mod;
    1364:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
		enum specifier_cat_enum specifier_cat
    1368:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    136c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    136e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1372:	d136      	bne.n	13e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3e2>
			switch (length_mod) {
    1374:	1ecb      	subs	r3, r1, #3
    1376:	2b04      	cmp	r3, #4
    1378:	d820      	bhi.n	13bc <CONFIG_FPROTECT_BLOCK_SIZE+0x3bc>
    137a:	e8df f003 	tbb	[pc, r3]
    137e:	0703      	.short	0x0703
    1380:	1f07      	.short	0x1f07
    1382:	1f          	.byte	0x1f
    1383:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    1384:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
    1388:	17d3      	asrs	r3, r2, #31
    138a:	e004      	b.n	1396 <CONFIG_FPROTECT_BLOCK_SIZE+0x396>
					(sint_value_type)va_arg(ap, intmax_t);
    138c:	3407      	adds	r4, #7
    138e:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    1392:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
    1396:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		if (conv->invalid || conv->unsupported) {
    139a:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
    139e:	07b3      	lsls	r3, r6, #30
    13a0:	d055      	beq.n	144e <CONFIG_FPROTECT_BLOCK_SIZE+0x44e>
			OUTS(sp, fp);
    13a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    13a4:	9803      	ldr	r0, [sp, #12]
    13a6:	464a      	mov	r2, r9
    13a8:	4641      	mov	r1, r8
    13aa:	f007 fdeb 	bl	8f84 <outs>
    13ae:	2800      	cmp	r0, #0
    13b0:	f2c0 83c3 	blt.w	1b3a <CONFIG_FPROTECT_BLOCK_SIZE+0xb3a>
    13b4:	4405      	add	r5, r0
			while (pad_len-- > 0) {
    13b6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    13ba:	e5a3      	b.n	f04 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    13bc:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
    13c0:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    13c2:	ea4f 73e2 	mov.w	r3, r2, asr #31
    13c6:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
			if (length_mod == LENGTH_HH) {
    13ca:	d105      	bne.n	13d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d8>
				value->uint = (unsigned char)value->uint;
    13cc:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
				value->uint = (unsigned short)value->uint;
    13d0:	9316      	str	r3, [sp, #88]	; 0x58
    13d2:	2300      	movs	r3, #0
    13d4:	9317      	str	r3, [sp, #92]	; 0x5c
    13d6:	e7e0      	b.n	139a <CONFIG_FPROTECT_BLOCK_SIZE+0x39a>
			} else if (length_mod == LENGTH_H) {
    13d8:	2902      	cmp	r1, #2
    13da:	d1de      	bne.n	139a <CONFIG_FPROTECT_BLOCK_SIZE+0x39a>
				value->sint = (short)value->sint;
    13dc:	f9bd 2058 	ldrsh.w	r2, [sp, #88]	; 0x58
    13e0:	e7d2      	b.n	1388 <CONFIG_FPROTECT_BLOCK_SIZE+0x388>
		} else if (specifier_cat == SPECIFIER_UINT) {
    13e2:	2b02      	cmp	r3, #2
    13e4:	d123      	bne.n	142e <CONFIG_FPROTECT_BLOCK_SIZE+0x42e>
			switch (length_mod) {
    13e6:	1ecb      	subs	r3, r1, #3
    13e8:	2b04      	cmp	r3, #4
    13ea:	d813      	bhi.n	1414 <CONFIG_FPROTECT_BLOCK_SIZE+0x414>
    13ec:	e8df f003 	tbb	[pc, r3]
    13f0:	120a0a03 	.word	0x120a0a03
    13f4:	12          	.byte	0x12
    13f5:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    13f6:	6822      	ldr	r2, [r4, #0]
    13f8:	9216      	str	r2, [sp, #88]	; 0x58
    13fa:	2300      	movs	r3, #0
    13fc:	1d20      	adds	r0, r4, #4
    13fe:	9317      	str	r3, [sp, #92]	; 0x5c
					(uint_value_type)va_arg(ap, size_t);
    1400:	4604      	mov	r4, r0
    1402:	e7ca      	b.n	139a <CONFIG_FPROTECT_BLOCK_SIZE+0x39a>
					(uint_value_type)va_arg(ap,
    1404:	3407      	adds	r4, #7
    1406:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
    140a:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    140e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
				break;
    1412:	e7f5      	b.n	1400 <CONFIG_FPROTECT_BLOCK_SIZE+0x400>
					(uint_value_type)va_arg(ap, size_t);
    1414:	f854 3b04 	ldr.w	r3, [r4], #4
    1418:	9316      	str	r3, [sp, #88]	; 0x58
			if (length_mod == LENGTH_HH) {
    141a:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    141c:	f04f 0300 	mov.w	r3, #0
    1420:	9317      	str	r3, [sp, #92]	; 0x5c
			if (length_mod == LENGTH_HH) {
    1422:	d0d3      	beq.n	13cc <CONFIG_FPROTECT_BLOCK_SIZE+0x3cc>
			} else if (length_mod == LENGTH_H) {
    1424:	2902      	cmp	r1, #2
    1426:	d1b8      	bne.n	139a <CONFIG_FPROTECT_BLOCK_SIZE+0x39a>
				value->uint = (unsigned short)value->uint;
    1428:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    142c:	e7d0      	b.n	13d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d0>
		} else if (specifier_cat == SPECIFIER_FP) {
    142e:	2b04      	cmp	r3, #4
    1430:	d107      	bne.n	1442 <CONFIG_FPROTECT_BLOCK_SIZE+0x442>
			if (length_mod == LENGTH_UPPER_L) {
    1432:	3407      	adds	r4, #7
    1434:	f024 0407 	bic.w	r4, r4, #7
    1438:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
    143c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    1440:	e7ab      	b.n	139a <CONFIG_FPROTECT_BLOCK_SIZE+0x39a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1442:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1444:	bf04      	itt	eq
    1446:	f854 3b04 	ldreq.w	r3, [r4], #4
    144a:	9316      	streq	r3, [sp, #88]	; 0x58
    144c:	e7a5      	b.n	139a <CONFIG_FPROTECT_BLOCK_SIZE+0x39a>
		switch (conv->specifier) {
    144e:	f89d 9063 	ldrb.w	r9, [sp, #99]	; 0x63
    1452:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    1456:	d8ae      	bhi.n	13b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b6>
    1458:	f1b9 0f57 	cmp.w	r9, #87	; 0x57
    145c:	f200 80a6 	bhi.w	15ac <CONFIG_FPROTECT_BLOCK_SIZE+0x5ac>
    1460:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    1464:	f000 80ec 	beq.w	1640 <CONFIG_FPROTECT_BLOCK_SIZE+0x640>
    1468:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
    146c:	d9a3      	bls.n	13b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b6>
    146e:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
    1472:	d003      	beq.n	147c <CONFIG_FPROTECT_BLOCK_SIZE+0x47c>
    1474:	f1a9 0345 	sub.w	r3, r9, #69	; 0x45
    1478:	2b02      	cmp	r3, #2
    147a:	d89c      	bhi.n	13b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b6>
	} u = {
    147c:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
	if ((u.u64 & SIGN_MASK) != 0U) {
    1480:	2a00      	cmp	r2, #0
    1482:	f173 0100 	sbcs.w	r1, r3, #0
    1486:	f2c0 81d3 	blt.w	1830 <CONFIG_FPROTECT_BLOCK_SIZE+0x830>
	} else if (conv->flag_plus) {
    148a:	0731      	lsls	r1, r6, #28
    148c:	f100 81d2 	bmi.w	1834 <CONFIG_FPROTECT_BLOCK_SIZE+0x834>
		*sign = ' ';
    1490:	f016 0610 	ands.w	r6, r6, #16
    1494:	bf18      	it	ne
    1496:	2620      	movne	r6, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    1498:	f3c3 5b0a 	ubfx	fp, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    149c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    14a0:	9206      	str	r2, [sp, #24]
    14a2:	9307      	str	r3, [sp, #28]
    14a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    14a8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	bool is_subnormal = (expo == 0) && (fract != 0);
    14ac:	f1bb 0f00 	cmp.w	fp, #0
    14b0:	f040 81c2 	bne.w	1838 <CONFIG_FPROTECT_BLOCK_SIZE+0x838>
    14b4:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
    14b8:	4313      	orrs	r3, r2
    14ba:	bf14      	ite	ne
    14bc:	f04f 0c01 	movne.w	ip, #1
    14c0:	f04f 0c00 	moveq.w	ip, #0
	fract <<= EXPONENT_BITS;
    14c4:	9907      	ldr	r1, [sp, #28]
    14c6:	02cb      	lsls	r3, r1, #11
    14c8:	9906      	ldr	r1, [sp, #24]
    14ca:	02ca      	lsls	r2, r1, #11
    14cc:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
	if ((expo | fract) != 0) {
    14d0:	4658      	mov	r0, fp
    14d2:	ea4b 0102 	orr.w	r1, fp, r2
    14d6:	910c      	str	r1, [sp, #48]	; 0x30
    14d8:	17c1      	asrs	r1, r0, #31
    14da:	4319      	orrs	r1, r3
    14dc:	910d      	str	r1, [sp, #52]	; 0x34
    14de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
		c = 'f';
    14e2:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
    14e6:	bf08      	it	eq
    14e8:	f04f 0966 	moveq.w	r9, #102	; 0x66
	if ((expo | fract) != 0) {
    14ec:	4301      	orrs	r1, r0
	fract &= ~SIGN_MASK;
    14ee:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	if ((expo | fract) != 0) {
    14f2:	f000 8214 	beq.w	191e <CONFIG_FPROTECT_BLOCK_SIZE+0x91e>
		if (is_subnormal) {
    14f6:	f1bc 0f00 	cmp.w	ip, #0
    14fa:	f040 81d4 	bne.w	18a6 <CONFIG_FPROTECT_BLOCK_SIZE+0x8a6>
		fract |= BIT_63;
    14fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1500:	9304      	str	r3, [sp, #16]
    1502:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1504:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1508:	9305      	str	r3, [sp, #20]
    150a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    150e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    1512:	2300      	movs	r3, #0
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    1514:	f2ab 3bfe 	subw	fp, fp, #1022	; 0x3fe
		fract |= BIT_63;
    1518:	461a      	mov	r2, r3
		fract *= 5U;
    151a:	2105      	movs	r1, #5
	while (expo < -2) {
    151c:	f11b 0f02 	cmn.w	fp, #2
    1520:	f2c0 81ca 	blt.w	18b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x8b8>
    1524:	b11b      	cbz	r3, 152e <CONFIG_FPROTECT_BLOCK_SIZE+0x52e>
    1526:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    152a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	while (expo > 0) {
    152e:	f1bb 0f00 	cmp.w	fp, #0
    1532:	e9dd 3112 	ldrd	r3, r1, [sp, #72]	; 0x48
    1536:	f300 81da 	bgt.w	18ee <CONFIG_FPROTECT_BLOCK_SIZE+0x8ee>
	fract >>= (4 - expo);
    153a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    153c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    153e:	f1cb 0004 	rsb	r0, fp, #4
    1542:	f10b 0b1c 	add.w	fp, fp, #28
    1546:	fa01 fb0b 	lsl.w	fp, r1, fp
    154a:	f1a0 0c20 	sub.w	ip, r0, #32
    154e:	40c3      	lsrs	r3, r0
    1550:	fa21 fc0c 	lsr.w	ip, r1, ip
    1554:	ea43 030b 	orr.w	r3, r3, fp
    1558:	ea43 030c 	orr.w	r3, r3, ip
    155c:	40c1      	lsrs	r1, r0
    155e:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
	if ((c == 'g') || (c == 'G')) {
    1562:	f009 03df 	and.w	r3, r9, #223	; 0xdf
    1566:	2b47      	cmp	r3, #71	; 0x47
    1568:	f040 81e0 	bne.w	192c <CONFIG_FPROTECT_BLOCK_SIZE+0x92c>
		if (decexp < (-4 + 1) || decexp > precision) {
    156c:	1cd0      	adds	r0, r2, #3
    156e:	db02      	blt.n	1576 <CONFIG_FPROTECT_BLOCK_SIZE+0x576>
    1570:	4297      	cmp	r7, r2
    1572:	f280 81d7 	bge.w	1924 <CONFIG_FPROTECT_BLOCK_SIZE+0x924>
			c += 'e' - 'g';  /* e or E */
    1576:	f1a9 0902 	sub.w	r9, r9, #2
			if (precision > 0) {
    157a:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
    157c:	fa5f f989 	uxtb.w	r9, r9
			if (precision > 0) {
    1580:	dd00      	ble.n	1584 <CONFIG_FPROTECT_BLOCK_SIZE+0x584>
				precision--;
    1582:	3f01      	subs	r7, #1
		if (!conv->flag_hash && (precision > 0)) {
    1584:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    1588:	0699      	lsls	r1, r3, #26
    158a:	f100 81cf 	bmi.w	192c <CONFIG_FPROTECT_BLOCK_SIZE+0x92c>
    158e:	2f00      	cmp	r7, #0
    1590:	bfd4      	ite	le
    1592:	2300      	movle	r3, #0
    1594:	2301      	movgt	r3, #1
	if (c == 'f') {
    1596:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
	bool prune_zero = false;
    159a:	930e      	str	r3, [sp, #56]	; 0x38
	if (c == 'f') {
    159c:	f040 81c8 	bne.w	1930 <CONFIG_FPROTECT_BLOCK_SIZE+0x930>
		if (decimals < 0) {
    15a0:	18bb      	adds	r3, r7, r2
    15a2:	f140 81c6 	bpl.w	1932 <CONFIG_FPROTECT_BLOCK_SIZE+0x932>
			decimals = 0;
    15a6:	f04f 0a00 	mov.w	sl, #0
    15aa:	e1c6      	b.n	193a <CONFIG_FPROTECT_BLOCK_SIZE+0x93a>
    15ac:	f1a9 0358 	sub.w	r3, r9, #88	; 0x58
    15b0:	2b20      	cmp	r3, #32
    15b2:	f63f af00 	bhi.w	13b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b6>
    15b6:	a201      	add	r2, pc, #4	; (adr r2, 15bc <CONFIG_FPROTECT_BLOCK_SIZE+0x5bc>)
    15b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    15bc:	000017d1 	.word	0x000017d1
    15c0:	000013b7 	.word	0x000013b7
    15c4:	000013b7 	.word	0x000013b7
    15c8:	000013b7 	.word	0x000013b7
    15cc:	000013b7 	.word	0x000013b7
    15d0:	000013b7 	.word	0x000013b7
    15d4:	000013b7 	.word	0x000013b7
    15d8:	000013b7 	.word	0x000013b7
    15dc:	000013b7 	.word	0x000013b7
    15e0:	0000147d 	.word	0x0000147d
    15e4:	000013b7 	.word	0x000013b7
    15e8:	0000166d 	.word	0x0000166d
    15ec:	00001771 	.word	0x00001771
    15f0:	0000147d 	.word	0x0000147d
    15f4:	0000147d 	.word	0x0000147d
    15f8:	0000147d 	.word	0x0000147d
    15fc:	000013b7 	.word	0x000013b7
    1600:	00001771 	.word	0x00001771
    1604:	000013b7 	.word	0x000013b7
    1608:	000013b7 	.word	0x000013b7
    160c:	000013b7 	.word	0x000013b7
    1610:	000013b7 	.word	0x000013b7
    1614:	00001807 	.word	0x00001807
    1618:	000017d1 	.word	0x000017d1
    161c:	000017d5 	.word	0x000017d5
    1620:	000013b7 	.word	0x000013b7
    1624:	000013b7 	.word	0x000013b7
    1628:	00001647 	.word	0x00001647
    162c:	000013b7 	.word	0x000013b7
    1630:	000017d1 	.word	0x000017d1
    1634:	000013b7 	.word	0x000013b7
    1638:	000013b7 	.word	0x000013b7
    163c:	000017d1 	.word	0x000017d1
			OUTC('%');
    1640:	4641      	mov	r1, r8
    1642:	4648      	mov	r0, r9
    1644:	e46a      	b.n	f1c <cbvprintf+0x28>
			if (precision >= 0) {
    1646:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    1648:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
			if (precision >= 0) {
    164c:	db0a      	blt.n	1664 <CONFIG_FPROTECT_BLOCK_SIZE+0x664>
				len = strnlen(bps, precision);
    164e:	4639      	mov	r1, r7
    1650:	4648      	mov	r0, r9
    1652:	f008 ff84 	bl	a55e <strnlen>
			bpe = bps + len;
    1656:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    165a:	2600      	movs	r6, #0
		if (bps == NULL) {
    165c:	f1b9 0f00 	cmp.w	r9, #0
    1660:	d10c      	bne.n	167c <CONFIG_FPROTECT_BLOCK_SIZE+0x67c>
    1662:	e6a8      	b.n	13b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b6>
				len = strlen(bps);
    1664:	4648      	mov	r0, r9
    1666:	f008 ff73 	bl	a550 <strlen>
    166a:	e7f4      	b.n	1656 <CONFIG_FPROTECT_BLOCK_SIZE+0x656>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    166c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    166e:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
		char sign = 0;
    1672:	2600      	movs	r6, #0
			bpe = buf + 1;
    1674:	f10d 0a75 	add.w	sl, sp, #117	; 0x75
				bps = encode_float(value->dbl, conv, precision,
    1678:	f10d 0974 	add.w	r9, sp, #116	; 0x74
		size_t nj_len = (bpe - bps);
    167c:	ebaa 0209 	sub.w	r2, sl, r9
		if (sign != 0) {
    1680:	b106      	cbz	r6, 1684 <CONFIG_FPROTECT_BLOCK_SIZE+0x684>
			nj_len += 1U;
    1682:	3201      	adds	r2, #1
		if (conv->altform_0c) {
    1684:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    1688:	06c3      	lsls	r3, r0, #27
    168a:	f140 824b 	bpl.w	1b24 <CONFIG_FPROTECT_BLOCK_SIZE+0xb24>
			nj_len += 2U;
    168e:	3202      	adds	r2, #2
		nj_len += conv->pad0_value;
    1690:	9919      	ldr	r1, [sp, #100]	; 0x64
		if (width > 0) {
    1692:	9b08      	ldr	r3, [sp, #32]
		if (conv->pad_fp) {
    1694:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    1696:	440a      	add	r2, r1
			nj_len += conv->pad0_pre_exp;
    1698:	bf44      	itt	mi
    169a:	991a      	ldrmi	r1, [sp, #104]	; 0x68
    169c:	1852      	addmi	r2, r2, r1
		if (width > 0) {
    169e:	2b00      	cmp	r3, #0
    16a0:	dd25      	ble.n	16ee <CONFIG_FPROTECT_BLOCK_SIZE+0x6ee>
			width -= (int)nj_len;
    16a2:	1a9b      	subs	r3, r3, r2
			if (!conv->flag_dash) {
    16a4:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    16a8:	0751      	lsls	r1, r2, #29
    16aa:	f3c2 0b80 	ubfx	fp, r2, #2, #1
    16ae:	f100 824b 	bmi.w	1b48 <CONFIG_FPROTECT_BLOCK_SIZE+0xb48>
				if (conv->flag_zero) {
    16b2:	0657      	lsls	r7, r2, #25
    16b4:	f140 8244 	bpl.w	1b40 <CONFIG_FPROTECT_BLOCK_SIZE+0xb40>
					if (sign != 0) {
    16b8:	2e00      	cmp	r6, #0
    16ba:	f000 8243 	beq.w	1b44 <CONFIG_FPROTECT_BLOCK_SIZE+0xb44>
    16be:	9308      	str	r3, [sp, #32]
						OUTC(sign);
    16c0:	4641      	mov	r1, r8
    16c2:	9b03      	ldr	r3, [sp, #12]
    16c4:	4630      	mov	r0, r6
    16c6:	4798      	blx	r3
    16c8:	2800      	cmp	r0, #0
    16ca:	f2c0 8236 	blt.w	1b3a <CONFIG_FPROTECT_BLOCK_SIZE+0xb3a>
    16ce:	9b08      	ldr	r3, [sp, #32]
    16d0:	3501      	adds	r5, #1
						sign = 0;
    16d2:	465e      	mov	r6, fp
					pad = '0';
    16d4:	2730      	movs	r7, #48	; 0x30
    16d6:	9308      	str	r3, [sp, #32]
    16d8:	eb03 0b05 	add.w	fp, r3, r5
    16dc:	9b08      	ldr	r3, [sp, #32]
    16de:	ebab 0503 	sub.w	r5, fp, r3
				while (width-- > 0) {
    16e2:	2b00      	cmp	r3, #0
    16e4:	f103 33ff 	add.w	r3, r3, #4294967295
    16e8:	9308      	str	r3, [sp, #32]
    16ea:	f300 821f 	bgt.w	1b2c <CONFIG_FPROTECT_BLOCK_SIZE+0xb2c>
		if (sign != 0) {
    16ee:	b13e      	cbz	r6, 1700 <CONFIG_FPROTECT_BLOCK_SIZE+0x700>
			OUTC(sign);
    16f0:	9b03      	ldr	r3, [sp, #12]
    16f2:	4641      	mov	r1, r8
    16f4:	4630      	mov	r0, r6
    16f6:	4798      	blx	r3
    16f8:	2800      	cmp	r0, #0
    16fa:	f2c0 821e 	blt.w	1b3a <CONFIG_FPROTECT_BLOCK_SIZE+0xb3a>
    16fe:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    1700:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
    1704:	0656      	lsls	r6, r2, #25
    1706:	f140 827d 	bpl.w	1c04 <CONFIG_FPROTECT_BLOCK_SIZE+0xc04>
			if (conv->specifier_a) {
    170a:	f99d 2061 	ldrsb.w	r2, [sp, #97]	; 0x61
    170e:	2a00      	cmp	r2, #0
    1710:	f2c0 821c 	blt.w	1b4c <CONFIG_FPROTECT_BLOCK_SIZE+0xb4c>
    1714:	eba5 0509 	sub.w	r5, r5, r9
				while (isdigit((int)*cp)) {
    1718:	f899 0000 	ldrb.w	r0, [r9]
    171c:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    1720:	2a09      	cmp	r2, #9
    1722:	464f      	mov	r7, r9
    1724:	eb05 0b09 	add.w	fp, r5, r9
    1728:	f109 0901 	add.w	r9, r9, #1
    172c:	f240 823e 	bls.w	1bac <CONFIG_FPROTECT_BLOCK_SIZE+0xbac>
				if (!conv->pad_postdp) {
    1730:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
				pad_len = conv->pad0_value;
    1734:	9e19      	ldr	r6, [sp, #100]	; 0x64
				if (!conv->pad_postdp) {
    1736:	0690      	lsls	r0, r2, #26
    1738:	d408      	bmi.n	174c <CONFIG_FPROTECT_BLOCK_SIZE+0x74c>
    173a:	eb06 090b 	add.w	r9, r6, fp
					while (pad_len-- > 0) {
    173e:	2e00      	cmp	r6, #0
    1740:	eba9 0b06 	sub.w	fp, r9, r6
    1744:	f106 36ff 	add.w	r6, r6, #4294967295
    1748:	f300 8237 	bgt.w	1bba <CONFIG_FPROTECT_BLOCK_SIZE+0xbba>
				if (*cp == '.') {
    174c:	7838      	ldrb	r0, [r7, #0]
    174e:	282e      	cmp	r0, #46	; 0x2e
    1750:	d10b      	bne.n	176a <CONFIG_FPROTECT_BLOCK_SIZE+0x76a>
					OUTC(*cp++);
    1752:	9b03      	ldr	r3, [sp, #12]
    1754:	4641      	mov	r1, r8
    1756:	4798      	blx	r3
						OUTC('0');
    1758:	2800      	cmp	r0, #0
    175a:	f2c0 81ee 	blt.w	1b3a <CONFIG_FPROTECT_BLOCK_SIZE+0xb3a>
					while (pad_len-- > 0) {
    175e:	2e00      	cmp	r6, #0
						OUTC('0');
    1760:	f10b 0b01 	add.w	fp, fp, #1
					while (pad_len-- > 0) {
    1764:	f300 8231 	bgt.w	1bca <CONFIG_FPROTECT_BLOCK_SIZE+0xbca>
					OUTC(*cp++);
    1768:	3701      	adds	r7, #1
    176a:	ebab 0b07 	sub.w	fp, fp, r7
    176e:	e237      	b.n	1be0 <CONFIG_FPROTECT_BLOCK_SIZE+0xbe0>
			if (conv->flag_plus) {
    1770:	0730      	lsls	r0, r6, #28
    1772:	d42b      	bmi.n	17cc <CONFIG_FPROTECT_BLOCK_SIZE+0x7cc>
				sign = ' ';
    1774:	f016 0610 	ands.w	r6, r6, #16
    1778:	bf18      	it	ne
    177a:	2620      	movne	r6, #32
			sint = value->sint;
    177c:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
			if (sint < 0) {
    1780:	2a00      	cmp	r2, #0
    1782:	f173 0100 	sbcs.w	r1, r3, #0
    1786:	da05      	bge.n	1794 <CONFIG_FPROTECT_BLOCK_SIZE+0x794>
				value->uint = (uint_value_type)-sint;
    1788:	4252      	negs	r2, r2
    178a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    178e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
				sign = '-';
    1792:	262d      	movs	r6, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    1794:	f10d 038d 	add.w	r3, sp, #141	; 0x8d
    1798:	9300      	str	r3, [sp, #0]
    179a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    179e:	ab1d      	add	r3, sp, #116	; 0x74
    17a0:	aa18      	add	r2, sp, #96	; 0x60
    17a2:	f007 fba4 	bl	8eee <encode_uint>
    17a6:	4681      	mov	r9, r0
			if (precision >= 0) {
    17a8:	2f00      	cmp	r7, #0
    17aa:	f10d 038d 	add.w	r3, sp, #141	; 0x8d
    17ae:	db0b      	blt.n	17c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x7c8>
				conv->flag_zero = false;
    17b0:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
				size_t len = bpe - bps;
    17b4:	eba3 0209 	sub.w	r2, r3, r9
				conv->flag_zero = false;
    17b8:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    17bc:	4297      	cmp	r7, r2
				conv->flag_zero = false;
    17be:	f88d 1060 	strb.w	r1, [sp, #96]	; 0x60
				if (len < (size_t)precision) {
    17c2:	d901      	bls.n	17c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x7c8>
					conv->pad0_value = precision - (int)len;
    17c4:	1abf      	subs	r7, r7, r2
    17c6:	9719      	str	r7, [sp, #100]	; 0x64
		const char *bpe = buf + sizeof(buf);
    17c8:	469a      	mov	sl, r3
    17ca:	e747      	b.n	165c <CONFIG_FPROTECT_BLOCK_SIZE+0x65c>
				sign = '+';
    17cc:	262b      	movs	r6, #43	; 0x2b
    17ce:	e7d5      	b.n	177c <CONFIG_FPROTECT_BLOCK_SIZE+0x77c>
		switch (conv->specifier) {
    17d0:	2600      	movs	r6, #0
    17d2:	e7df      	b.n	1794 <CONFIG_FPROTECT_BLOCK_SIZE+0x794>
			if (value->ptr != NULL) {
    17d4:	9816      	ldr	r0, [sp, #88]	; 0x58
    17d6:	2800      	cmp	r0, #0
    17d8:	f000 819e 	beq.w	1b18 <CONFIG_FPROTECT_BLOCK_SIZE+0xb18>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    17dc:	f10d 038d 	add.w	r3, sp, #141	; 0x8d
    17e0:	9300      	str	r3, [sp, #0]
    17e2:	aa18      	add	r2, sp, #96	; 0x60
    17e4:	ab1d      	add	r3, sp, #116	; 0x74
    17e6:	2100      	movs	r1, #0
    17e8:	f007 fb81 	bl	8eee <encode_uint>
				conv->altform_0c = true;
    17ec:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
    17f0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    17f4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    17f8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    17fc:	4681      	mov	r9, r0
				conv->altform_0c = true;
    17fe:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
		char sign = 0;
    1802:	2600      	movs	r6, #0
				goto prec_int_pad0;
    1804:	e7d0      	b.n	17a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x7a8>
				store_count(conv, value->ptr, count);
    1806:	9b16      	ldr	r3, [sp, #88]	; 0x58
	switch ((enum length_mod_enum)conv->length_mod) {
    1808:	2907      	cmp	r1, #7
    180a:	f63f add4 	bhi.w	13b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b6>
    180e:	e8df f001 	tbb	[pc, r1]
    1812:	040d      	.short	0x040d
    1814:	08080d06 	.word	0x08080d06
    1818:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    181a:	701d      	strb	r5, [r3, #0]
		break;
    181c:	e5cb      	b.n	13b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b6>
		*(short *)dp = (short)count;
    181e:	801d      	strh	r5, [r3, #0]
		break;
    1820:	e5c9      	b.n	13b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b6>
		*(intmax_t *)dp = (intmax_t)count;
    1822:	4628      	mov	r0, r5
    1824:	17e9      	asrs	r1, r5, #31
    1826:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    182a:	e5c4      	b.n	13b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b6>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    182c:	601d      	str	r5, [r3, #0]
		break;
    182e:	e5c2      	b.n	13b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b6>
		*sign = '-';
    1830:	262d      	movs	r6, #45	; 0x2d
    1832:	e631      	b.n	1498 <CONFIG_FPROTECT_BLOCK_SIZE+0x498>
		*sign = '+';
    1834:	262b      	movs	r6, #43	; 0x2b
    1836:	e62f      	b.n	1498 <CONFIG_FPROTECT_BLOCK_SIZE+0x498>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    1838:	f240 73ff 	movw	r3, #2047	; 0x7ff
    183c:	459b      	cmp	fp, r3
    183e:	d12d      	bne.n	189c <CONFIG_FPROTECT_BLOCK_SIZE+0x89c>
		if (fract == 0) {
    1840:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1844:	4313      	orrs	r3, r2
    1846:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
    184a:	d118      	bne.n	187e <CONFIG_FPROTECT_BLOCK_SIZE+0x87e>
			if (isupper((int)c)) {
    184c:	f1b9 0f19 	cmp.w	r9, #25
				*buf++ = 'I';
    1850:	bf95      	itete	ls
    1852:	f644 6349 	movwls	r3, #20041	; 0x4e49
				*buf++ = 'i';
    1856:	f646 6369 	movwhi	r3, #28265	; 0x6e69
				*buf++ = 'I';
    185a:	f8ad 3074 	strhls.w	r3, [sp, #116]	; 0x74
				*buf++ = 'i';
    185e:	f8ad 3074 	strhhi.w	r3, [sp, #116]	; 0x74
				*buf++ = 'F';
    1862:	bf94      	ite	ls
    1864:	2346      	movls	r3, #70	; 0x46
				*buf++ = 'f';
    1866:	2366      	movhi	r3, #102	; 0x66
				*buf++ = 'n';
    1868:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
		conv->flag_zero = false;
    186c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    1870:	f36f 1386 	bfc	r3, #6, #1
    1874:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
		*bpe = buf;
    1878:	f10d 0a77 	add.w	sl, sp, #119	; 0x77
		return bps;
    187c:	e6fc      	b.n	1678 <CONFIG_FPROTECT_BLOCK_SIZE+0x678>
			if (isupper((int)c)) {
    187e:	f1b9 0f19 	cmp.w	r9, #25
				*buf++ = 'N';
    1882:	bf95      	itete	ls
    1884:	f244 134e 	movwls	r3, #16718	; 0x414e
				*buf++ = 'n';
    1888:	f246 136e 	movwhi	r3, #24942	; 0x616e
				*buf++ = 'N';
    188c:	f8ad 3074 	strhls.w	r3, [sp, #116]	; 0x74
				*buf++ = 'n';
    1890:	f8ad 3074 	strhhi.w	r3, [sp, #116]	; 0x74
				*buf++ = 'N';
    1894:	bf94      	ite	ls
    1896:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'n';
    1898:	236e      	movhi	r3, #110	; 0x6e
    189a:	e7e5      	b.n	1868 <CONFIG_FPROTECT_BLOCK_SIZE+0x868>
	bool is_subnormal = (expo == 0) && (fract != 0);
    189c:	f04f 0c00 	mov.w	ip, #0
    18a0:	e610      	b.n	14c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c4>
				expo--;
    18a2:	f10b 3bff 	add.w	fp, fp, #4294967295
			while (((fract <<= 1) & BIT_63) == 0) {
    18a6:	1892      	adds	r2, r2, r2
    18a8:	415b      	adcs	r3, r3
    18aa:	2a00      	cmp	r2, #0
    18ac:	f173 0100 	sbcs.w	r1, r3, #0
    18b0:	daf7      	bge.n	18a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x8a2>
    18b2:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    18b6:	e622      	b.n	14fe <CONFIG_FPROTECT_BLOCK_SIZE+0x4fe>
			fract >>= 1;
    18b8:	9b04      	ldr	r3, [sp, #16]
    18ba:	9805      	ldr	r0, [sp, #20]
    18bc:	085b      	lsrs	r3, r3, #1
    18be:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    18c2:	0840      	lsrs	r0, r0, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    18c4:	f1b0 3f33 	cmp.w	r0, #858993459	; 0x33333333
    18c8:	46dc      	mov	ip, fp
			fract >>= 1;
    18ca:	e9cd 3004 	strd	r3, r0, [sp, #16]
			expo++;
    18ce:	f10b 0b01 	add.w	fp, fp, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    18d2:	d2f1      	bcs.n	18b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x8b8>
		fract *= 5U;
    18d4:	fba3 ab01 	umull	sl, fp, r3, r1
    18d8:	e9cd ab04 	strd	sl, fp, [sp, #16]
    18dc:	9b05      	ldr	r3, [sp, #20]
    18de:	4348      	muls	r0, r1
    18e0:	18c3      	adds	r3, r0, r3
    18e2:	9305      	str	r3, [sp, #20]
		expo++;
    18e4:	f10c 0b02 	add.w	fp, ip, #2
		decexp--;
    18e8:	3a01      	subs	r2, #1
    18ea:	2301      	movs	r3, #1
    18ec:	e616      	b.n	151c <CONFIG_FPROTECT_BLOCK_SIZE+0x51c>
		fract += 2;
    18ee:	3302      	adds	r3, #2
    18f0:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
    18f4:	a812      	add	r0, sp, #72	; 0x48
		fract += 2;
    18f6:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
    18fa:	920e      	str	r2, [sp, #56]	; 0x38
		_ldiv5(&fract);
    18fc:	f007 fac0 	bl	8e80 <_ldiv5>
		decexp++;
    1900:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1902:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
		expo--;
    1906:	f10b 3bff 	add.w	fp, fp, #4294967295
		decexp++;
    190a:	3201      	adds	r2, #1
			fract <<= 1;
    190c:	1800      	adds	r0, r0, r0
    190e:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
    1910:	2800      	cmp	r0, #0
    1912:	f171 0300 	sbcs.w	r3, r1, #0
			expo--;
    1916:	f10b 3bff 	add.w	fp, fp, #4294967295
		} while (!(fract & BIT_63));
    191a:	daf7      	bge.n	190c <CONFIG_FPROTECT_BLOCK_SIZE+0x90c>
    191c:	e605      	b.n	152a <CONFIG_FPROTECT_BLOCK_SIZE+0x52a>
    191e:	2200      	movs	r2, #0
    1920:	4693      	mov	fp, r2
    1922:	e60a      	b.n	153a <CONFIG_FPROTECT_BLOCK_SIZE+0x53a>
			precision -= decexp;
    1924:	1abf      	subs	r7, r7, r2
			c = 'f';
    1926:	f04f 0966 	mov.w	r9, #102	; 0x66
    192a:	e62b      	b.n	1584 <CONFIG_FPROTECT_BLOCK_SIZE+0x584>
	bool prune_zero = false;
    192c:	2300      	movs	r3, #0
    192e:	e632      	b.n	1596 <CONFIG_FPROTECT_BLOCK_SIZE+0x596>
		decimals = precision + 1;
    1930:	1c7b      	adds	r3, r7, #1
	if (decimals > 16) {
    1932:	2b10      	cmp	r3, #16
    1934:	bfa8      	it	ge
    1936:	2310      	movge	r3, #16
    1938:	469a      	mov	sl, r3
    193a:	2110      	movs	r1, #16
    193c:	9111      	str	r1, [sp, #68]	; 0x44
	uint64_t round = BIT64(59); /* 0.5 */
    193e:	2000      	movs	r0, #0
    1940:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    1944:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	while (decimals--) {
    1948:	f10a 3aff 	add.w	sl, sl, #4294967295
    194c:	f1ba 3fff 	cmp.w	sl, #4294967295
    1950:	e9dd 1014 	ldrd	r1, r0, [sp, #80]	; 0x50
    1954:	d11f      	bne.n	1996 <CONFIG_FPROTECT_BLOCK_SIZE+0x996>
	fract += round;
    1956:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1958:	18cb      	adds	r3, r1, r3
    195a:	930a      	str	r3, [sp, #40]	; 0x28
    195c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    195e:	eb40 0303 	adc.w	r3, r0, r3
    1962:	930b      	str	r3, [sp, #44]	; 0x2c
	if (fract >= BIT64(60)) {
    1964:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
    1968:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
    196c:	f04f 30ff 	mov.w	r0, #4294967295
    1970:	4559      	cmp	r1, fp
    1972:	bf08      	it	eq
    1974:	4550      	cmpeq	r0, sl
    1976:	d31a      	bcc.n	19ae <CONFIG_FPROTECT_BLOCK_SIZE+0x9ae>
	fract += round;
    1978:	4650      	mov	r0, sl
    197a:	4659      	mov	r1, fp
    197c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	if (c == 'f') {
    1980:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
    1984:	d153      	bne.n	1a2e <CONFIG_FPROTECT_BLOCK_SIZE+0xa2e>
		if (decexp > 0) {
    1986:	2a00      	cmp	r2, #0
    1988:	dc20      	bgt.n	19cc <CONFIG_FPROTECT_BLOCK_SIZE+0x9cc>
			*buf++ = '0';
    198a:	2330      	movs	r3, #48	; 0x30
    198c:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
    1990:	f10d 0a75 	add.w	sl, sp, #117	; 0x75
    1994:	e02b      	b.n	19ee <CONFIG_FPROTECT_BLOCK_SIZE+0x9ee>
	*v >>= 1;
    1996:	0849      	lsrs	r1, r1, #1
    1998:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    199c:	0840      	lsrs	r0, r0, #1
    199e:	e9cd 1014 	strd	r1, r0, [sp, #80]	; 0x50
	_ldiv5(v);
    19a2:	a814      	add	r0, sp, #80	; 0x50
    19a4:	920f      	str	r2, [sp, #60]	; 0x3c
    19a6:	f007 fa6b 	bl	8e80 <_ldiv5>
    19aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
}
    19ac:	e7cc      	b.n	1948 <CONFIG_FPROTECT_BLOCK_SIZE+0x948>
	*v >>= 1;
    19ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    19b0:	920f      	str	r2, [sp, #60]	; 0x3c
    19b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    19b4:	085b      	lsrs	r3, r3, #1
    19b6:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
    19ba:	0851      	lsrs	r1, r2, #1
	_ldiv5(v);
    19bc:	a812      	add	r0, sp, #72	; 0x48
	*v >>= 1;
    19be:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
	_ldiv5(v);
    19c2:	f007 fa5d 	bl	8e80 <_ldiv5>
		decexp++;
    19c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    19c8:	3201      	adds	r2, #1
    19ca:	e7d9      	b.n	1980 <CONFIG_FPROTECT_BLOCK_SIZE+0x980>
	char *buf = bps;
    19cc:	f10d 0a74 	add.w	sl, sp, #116	; 0x74
			while (decexp > 0 && digit_count > 0) {
    19d0:	9911      	ldr	r1, [sp, #68]	; 0x44
    19d2:	2900      	cmp	r1, #0
    19d4:	dd09      	ble.n	19ea <CONFIG_FPROTECT_BLOCK_SIZE+0x9ea>
				*buf++ = _get_digit(&fract, &digit_count);
    19d6:	a911      	add	r1, sp, #68	; 0x44
    19d8:	a812      	add	r0, sp, #72	; 0x48
    19da:	920f      	str	r2, [sp, #60]	; 0x3c
    19dc:	f007 fa70 	bl	8ec0 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    19e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
				*buf++ = _get_digit(&fract, &digit_count);
    19e2:	f80a 0b01 	strb.w	r0, [sl], #1
			while (decexp > 0 && digit_count > 0) {
    19e6:	3a01      	subs	r2, #1
    19e8:	d1f2      	bne.n	19d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x9d0>
			conv->pad0_value = decexp;
    19ea:	9219      	str	r2, [sp, #100]	; 0x64
			decexp = 0;
    19ec:	2200      	movs	r2, #0
		if (conv->flag_hash || (precision > 0)) {
    19ee:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
    19f2:	0688      	lsls	r0, r1, #26
    19f4:	d401      	bmi.n	19fa <CONFIG_FPROTECT_BLOCK_SIZE+0x9fa>
    19f6:	2f00      	cmp	r7, #0
    19f8:	dd3f      	ble.n	1a7a <CONFIG_FPROTECT_BLOCK_SIZE+0xa7a>
			*buf++ = '.';
    19fa:	4653      	mov	r3, sl
    19fc:	212e      	movs	r1, #46	; 0x2e
    19fe:	f803 1b01 	strb.w	r1, [r3], #1
		if (decexp < 0 && precision > 0) {
    1a02:	b192      	cbz	r2, 1a2a <CONFIG_FPROTECT_BLOCK_SIZE+0xa2a>
    1a04:	2f00      	cmp	r7, #0
    1a06:	dd75      	ble.n	1af4 <CONFIG_FPROTECT_BLOCK_SIZE+0xaf4>
			conv->pad0_value = -decexp;
    1a08:	4251      	negs	r1, r2
    1a0a:	42b9      	cmp	r1, r7
    1a0c:	bfa8      	it	ge
    1a0e:	4639      	movge	r1, r7
			conv->pad_postdp = (conv->pad0_value > 0);
    1a10:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
			conv->pad0_value = -decexp;
    1a14:	9119      	str	r1, [sp, #100]	; 0x64
			conv->pad_postdp = (conv->pad0_value > 0);
    1a16:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    1a18:	eba7 0701 	sub.w	r7, r7, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    1a1c:	bfd4      	ite	le
    1a1e:	2100      	movle	r1, #0
    1a20:	2101      	movgt	r1, #1
    1a22:	f361 1045 	bfi	r0, r1, #5, #1
    1a26:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
			*buf++ = '.';
    1a2a:	469a      	mov	sl, r3
    1a2c:	e020      	b.n	1a70 <CONFIG_FPROTECT_BLOCK_SIZE+0xa70>
		*buf = _get_digit(&fract, &digit_count);
    1a2e:	a911      	add	r1, sp, #68	; 0x44
    1a30:	a812      	add	r0, sp, #72	; 0x48
    1a32:	920f      	str	r2, [sp, #60]	; 0x3c
    1a34:	f007 fa44 	bl	8ec0 <_get_digit>
		if (*buf++ != '0') {
    1a38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		if (conv->flag_hash || (precision > 0)) {
    1a3a:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
		*buf = _get_digit(&fract, &digit_count);
    1a3e:	f88d 0074 	strb.w	r0, [sp, #116]	; 0x74
		if (*buf++ != '0') {
    1a42:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    1a44:	bf18      	it	ne
    1a46:	f102 32ff 	addne.w	r2, r2, #4294967295
		if (conv->flag_hash || (precision > 0)) {
    1a4a:	0699      	lsls	r1, r3, #26
    1a4c:	d401      	bmi.n	1a52 <CONFIG_FPROTECT_BLOCK_SIZE+0xa52>
    1a4e:	2f00      	cmp	r7, #0
    1a50:	dd52      	ble.n	1af8 <CONFIG_FPROTECT_BLOCK_SIZE+0xaf8>
			*buf++ = '.';
    1a52:	232e      	movs	r3, #46	; 0x2e
    1a54:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
    1a58:	f10d 0376 	add.w	r3, sp, #118	; 0x76
    1a5c:	e7e5      	b.n	1a2a <CONFIG_FPROTECT_BLOCK_SIZE+0xa2a>
		*buf++ = _get_digit(&fract, &digit_count);
    1a5e:	a911      	add	r1, sp, #68	; 0x44
    1a60:	a812      	add	r0, sp, #72	; 0x48
    1a62:	920f      	str	r2, [sp, #60]	; 0x3c
    1a64:	f007 fa2c 	bl	8ec0 <_get_digit>
    1a68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    1a6a:	f80a 0b01 	strb.w	r0, [sl], #1
		precision--;
    1a6e:	3f01      	subs	r7, #1
	while (precision > 0 && digit_count > 0) {
    1a70:	2f00      	cmp	r7, #0
    1a72:	dd02      	ble.n	1a7a <CONFIG_FPROTECT_BLOCK_SIZE+0xa7a>
    1a74:	9911      	ldr	r1, [sp, #68]	; 0x44
    1a76:	2900      	cmp	r1, #0
    1a78:	dcf1      	bgt.n	1a5e <CONFIG_FPROTECT_BLOCK_SIZE+0xa5e>
	if (prune_zero) {
    1a7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1a7c:	2b00      	cmp	r3, #0
    1a7e:	d13e      	bne.n	1afe <CONFIG_FPROTECT_BLOCK_SIZE+0xafe>
	conv->pad0_pre_exp = precision;
    1a80:	971a      	str	r7, [sp, #104]	; 0x68
	if ((c == 'e') || (c == 'E')) {
    1a82:	f009 01df 	and.w	r1, r9, #223	; 0xdf
    1a86:	2945      	cmp	r1, #69	; 0x45
    1a88:	d122      	bne.n	1ad0 <CONFIG_FPROTECT_BLOCK_SIZE+0xad0>
		if (decexp < 0) {
    1a8a:	2a00      	cmp	r2, #0
		*buf++ = c;
    1a8c:	4650      	mov	r0, sl
			decexp = -decexp;
    1a8e:	bfba      	itte	lt
    1a90:	4252      	neglt	r2, r2
			*buf++ = '-';
    1a92:	212d      	movlt	r1, #45	; 0x2d
			*buf++ = '+';
    1a94:	212b      	movge	r1, #43	; 0x2b
		if (decexp >= 100) {
    1a96:	2a63      	cmp	r2, #99	; 0x63
		*buf++ = c;
    1a98:	f800 9b02 	strb.w	r9, [r0], #2
			*buf++ = '-';
    1a9c:	f88a 1001 	strb.w	r1, [sl, #1]
		if (decexp >= 100) {
    1aa0:	dd0a      	ble.n	1ab8 <CONFIG_FPROTECT_BLOCK_SIZE+0xab8>
			*buf++ = (decexp / 100) + '0';
    1aa2:	2764      	movs	r7, #100	; 0x64
    1aa4:	fb92 f1f7 	sdiv	r1, r2, r7
    1aa8:	f101 0c30 	add.w	ip, r1, #48	; 0x30
    1aac:	f10a 0003 	add.w	r0, sl, #3
    1ab0:	f88a c002 	strb.w	ip, [sl, #2]
			decexp %= 100;
    1ab4:	fb07 2211 	mls	r2, r7, r1, r2
		*buf++ = (decexp / 10) + '0';
    1ab8:	270a      	movs	r7, #10
    1aba:	4682      	mov	sl, r0
    1abc:	fb92 f1f7 	sdiv	r1, r2, r7
		*buf++ = (decexp % 10) + '0';
    1ac0:	fb07 2211 	mls	r2, r7, r1, r2
		*buf++ = (decexp / 10) + '0';
    1ac4:	f101 0c30 	add.w	ip, r1, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    1ac8:	3230      	adds	r2, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    1aca:	f80a cb02 	strb.w	ip, [sl], #2
		*buf++ = (decexp % 10) + '0';
    1ace:	7042      	strb	r2, [r0, #1]
		|| (conv->pad0_pre_exp > 0);
    1ad0:	9a19      	ldr	r2, [sp, #100]	; 0x64
    1ad2:	2a00      	cmp	r2, #0
    1ad4:	dc1e      	bgt.n	1b14 <CONFIG_FPROTECT_BLOCK_SIZE+0xb14>
    1ad6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    1ad8:	2a00      	cmp	r2, #0
    1ada:	bfd4      	ite	le
    1adc:	2200      	movle	r2, #0
    1ade:	2201      	movgt	r2, #1
	conv->pad_fp = (conv->pad0_value > 0)
    1ae0:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
    1ae4:	f362 1186 	bfi	r1, r2, #6, #1
	*buf = 0;
    1ae8:	2200      	movs	r2, #0
	conv->pad_fp = (conv->pad0_value > 0)
    1aea:	f88d 1062 	strb.w	r1, [sp, #98]	; 0x62
	*buf = 0;
    1aee:	f88a 2000 	strb.w	r2, [sl]
	return bps;
    1af2:	e5c1      	b.n	1678 <CONFIG_FPROTECT_BLOCK_SIZE+0x678>
			*buf++ = '.';
    1af4:	469a      	mov	sl, r3
    1af6:	e7c0      	b.n	1a7a <CONFIG_FPROTECT_BLOCK_SIZE+0xa7a>
		if (*buf++ != '0') {
    1af8:	f10d 0a75 	add.w	sl, sp, #117	; 0x75
    1afc:	e7bd      	b.n	1a7a <CONFIG_FPROTECT_BLOCK_SIZE+0xa7a>
		conv->pad0_pre_exp = 0;
    1afe:	2100      	movs	r1, #0
    1b00:	911a      	str	r1, [sp, #104]	; 0x68
		while (*--buf == '0') {
    1b02:	4650      	mov	r0, sl
    1b04:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
    1b08:	2930      	cmp	r1, #48	; 0x30
    1b0a:	d0fa      	beq.n	1b02 <CONFIG_FPROTECT_BLOCK_SIZE+0xb02>
		if (*buf != '.') {
    1b0c:	292e      	cmp	r1, #46	; 0x2e
    1b0e:	bf18      	it	ne
    1b10:	4682      	movne	sl, r0
    1b12:	e7b6      	b.n	1a82 <CONFIG_FPROTECT_BLOCK_SIZE+0xa82>
		|| (conv->pad0_pre_exp > 0);
    1b14:	2201      	movs	r2, #1
    1b16:	e7e3      	b.n	1ae0 <CONFIG_FPROTECT_BLOCK_SIZE+0xae0>
			bpe = bps + 5;
    1b18:	f8df a138 	ldr.w	sl, [pc, #312]	; 1c54 <CONFIG_FPROTECT_BLOCK_SIZE+0xc54>
		char sign = 0;
    1b1c:	4606      	mov	r6, r0
			bps = "(nil)";
    1b1e:	f1aa 0905 	sub.w	r9, sl, #5
    1b22:	e5ab      	b.n	167c <CONFIG_FPROTECT_BLOCK_SIZE+0x67c>
		} else if (conv->altform_0) {
    1b24:	0707      	lsls	r7, r0, #28
			nj_len += 1U;
    1b26:	bf48      	it	mi
    1b28:	3201      	addmi	r2, #1
    1b2a:	e5b1      	b.n	1690 <CONFIG_FPROTECT_BLOCK_SIZE+0x690>
					OUTC(pad);
    1b2c:	9b03      	ldr	r3, [sp, #12]
    1b2e:	4641      	mov	r1, r8
    1b30:	4638      	mov	r0, r7
    1b32:	4798      	blx	r3
    1b34:	2800      	cmp	r0, #0
    1b36:	f6bf add1 	bge.w	16dc <CONFIG_FPROTECT_BLOCK_SIZE+0x6dc>
#undef OUTS
#undef OUTC
}
    1b3a:	b025      	add	sp, #148	; 0x94
    1b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1b40:	2720      	movs	r7, #32
    1b42:	e5c8      	b.n	16d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x6d6>
					pad = '0';
    1b44:	2730      	movs	r7, #48	; 0x30
    1b46:	e5c6      	b.n	16d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x6d6>
			width -= (int)nj_len;
    1b48:	9308      	str	r3, [sp, #32]
    1b4a:	e5d0      	b.n	16ee <CONFIG_FPROTECT_BLOCK_SIZE+0x6ee>
    1b4c:	eba5 0b09 	sub.w	fp, r5, r9
    1b50:	464e      	mov	r6, r9
    1b52:	eb0b 0509 	add.w	r5, fp, r9
				while (*cp != 'p') {
    1b56:	f819 0b01 	ldrb.w	r0, [r9], #1
    1b5a:	2870      	cmp	r0, #112	; 0x70
    1b5c:	d120      	bne.n	1ba0 <CONFIG_FPROTECT_BLOCK_SIZE+0xba0>
			while (pad_len-- > 0) {
    1b5e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    1b60:	eb02 0905 	add.w	r9, r2, r5
    1b64:	eba9 0205 	sub.w	r2, r9, r5
    1b68:	2a00      	cmp	r2, #0
    1b6a:	dc43      	bgt.n	1bf4 <CONFIG_FPROTECT_BLOCK_SIZE+0xbf4>
			OUTS(cp, bpe);
    1b6c:	4653      	mov	r3, sl
    1b6e:	4632      	mov	r2, r6
			OUTS(bps, bpe);
    1b70:	9803      	ldr	r0, [sp, #12]
    1b72:	4641      	mov	r1, r8
    1b74:	f007 fa06 	bl	8f84 <outs>
    1b78:	2800      	cmp	r0, #0
    1b7a:	dbde      	blt.n	1b3a <CONFIG_FPROTECT_BLOCK_SIZE+0xb3a>
    1b7c:	9b08      	ldr	r3, [sp, #32]
    1b7e:	4428      	add	r0, r5
    1b80:	4403      	add	r3, r0
			while (pad_len-- > 0) {
    1b82:	4605      	mov	r5, r0
    1b84:	469a      	mov	sl, r3
		while (width > 0) {
    1b86:	ebaa 0305 	sub.w	r3, sl, r5
    1b8a:	2b00      	cmp	r3, #0
    1b8c:	f77f ac13 	ble.w	13b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b6>
			OUTC(' ');
    1b90:	9b03      	ldr	r3, [sp, #12]
    1b92:	4641      	mov	r1, r8
    1b94:	2020      	movs	r0, #32
    1b96:	4798      	blx	r3
    1b98:	2800      	cmp	r0, #0
    1b9a:	dbce      	blt.n	1b3a <CONFIG_FPROTECT_BLOCK_SIZE+0xb3a>
    1b9c:	3501      	adds	r5, #1
			--width;
    1b9e:	e7f2      	b.n	1b86 <CONFIG_FPROTECT_BLOCK_SIZE+0xb86>
					OUTC(*cp++);
    1ba0:	9b03      	ldr	r3, [sp, #12]
    1ba2:	4641      	mov	r1, r8
    1ba4:	4798      	blx	r3
    1ba6:	2800      	cmp	r0, #0
    1ba8:	dad2      	bge.n	1b50 <CONFIG_FPROTECT_BLOCK_SIZE+0xb50>
    1baa:	e7c6      	b.n	1b3a <CONFIG_FPROTECT_BLOCK_SIZE+0xb3a>
					OUTC(*cp++);
    1bac:	9b03      	ldr	r3, [sp, #12]
    1bae:	4641      	mov	r1, r8
    1bb0:	4798      	blx	r3
    1bb2:	2800      	cmp	r0, #0
    1bb4:	f6bf adb0 	bge.w	1718 <CONFIG_FPROTECT_BLOCK_SIZE+0x718>
    1bb8:	e7bf      	b.n	1b3a <CONFIG_FPROTECT_BLOCK_SIZE+0xb3a>
						OUTC('0');
    1bba:	9b03      	ldr	r3, [sp, #12]
    1bbc:	4641      	mov	r1, r8
    1bbe:	2030      	movs	r0, #48	; 0x30
    1bc0:	4798      	blx	r3
    1bc2:	2800      	cmp	r0, #0
    1bc4:	f6bf adbb 	bge.w	173e <CONFIG_FPROTECT_BLOCK_SIZE+0x73e>
    1bc8:	e7b7      	b.n	1b3a <CONFIG_FPROTECT_BLOCK_SIZE+0xb3a>
						OUTC('0');
    1bca:	9b03      	ldr	r3, [sp, #12]
    1bcc:	4641      	mov	r1, r8
    1bce:	2030      	movs	r0, #48	; 0x30
    1bd0:	4798      	blx	r3
    1bd2:	3e01      	subs	r6, #1
    1bd4:	e5c0      	b.n	1758 <CONFIG_FPROTECT_BLOCK_SIZE+0x758>
					OUTC(*cp++);
    1bd6:	9b03      	ldr	r3, [sp, #12]
    1bd8:	4641      	mov	r1, r8
    1bda:	4798      	blx	r3
    1bdc:	2800      	cmp	r0, #0
    1bde:	dbac      	blt.n	1b3a <CONFIG_FPROTECT_BLOCK_SIZE+0xb3a>
    1be0:	463e      	mov	r6, r7
    1be2:	eb0b 0507 	add.w	r5, fp, r7
				while (isdigit((int)*cp)) {
    1be6:	f817 0b01 	ldrb.w	r0, [r7], #1
    1bea:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    1bee:	2a09      	cmp	r2, #9
    1bf0:	d9f1      	bls.n	1bd6 <CONFIG_FPROTECT_BLOCK_SIZE+0xbd6>
    1bf2:	e7b4      	b.n	1b5e <CONFIG_FPROTECT_BLOCK_SIZE+0xb5e>
				OUTC('0');
    1bf4:	9b03      	ldr	r3, [sp, #12]
    1bf6:	4641      	mov	r1, r8
    1bf8:	2030      	movs	r0, #48	; 0x30
    1bfa:	4798      	blx	r3
    1bfc:	2800      	cmp	r0, #0
    1bfe:	db9c      	blt.n	1b3a <CONFIG_FPROTECT_BLOCK_SIZE+0xb3a>
    1c00:	3501      	adds	r5, #1
    1c02:	e7af      	b.n	1b64 <CONFIG_FPROTECT_BLOCK_SIZE+0xb64>
			if (conv->altform_0c | conv->altform_0) {
    1c04:	06d1      	lsls	r1, r2, #27
    1c06:	d401      	bmi.n	1c0c <CONFIG_FPROTECT_BLOCK_SIZE+0xc0c>
    1c08:	0712      	lsls	r2, r2, #28
    1c0a:	d506      	bpl.n	1c1a <CONFIG_FPROTECT_BLOCK_SIZE+0xc1a>
				OUTC('0');
    1c0c:	9b03      	ldr	r3, [sp, #12]
    1c0e:	4641      	mov	r1, r8
    1c10:	2030      	movs	r0, #48	; 0x30
    1c12:	4798      	blx	r3
    1c14:	2800      	cmp	r0, #0
    1c16:	db90      	blt.n	1b3a <CONFIG_FPROTECT_BLOCK_SIZE+0xb3a>
    1c18:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1c1a:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
    1c1e:	06d3      	lsls	r3, r2, #27
    1c20:	d507      	bpl.n	1c32 <CONFIG_FPROTECT_BLOCK_SIZE+0xc32>
				OUTC(conv->specifier);
    1c22:	f89d 0063 	ldrb.w	r0, [sp, #99]	; 0x63
    1c26:	9b03      	ldr	r3, [sp, #12]
    1c28:	4641      	mov	r1, r8
    1c2a:	4798      	blx	r3
    1c2c:	2800      	cmp	r0, #0
    1c2e:	db84      	blt.n	1b3a <CONFIG_FPROTECT_BLOCK_SIZE+0xb3a>
    1c30:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1c32:	9e19      	ldr	r6, [sp, #100]	; 0x64
    1c34:	442e      	add	r6, r5
    1c36:	1b72      	subs	r2, r6, r5
    1c38:	2a00      	cmp	r2, #0
    1c3a:	dc02      	bgt.n	1c42 <CONFIG_FPROTECT_BLOCK_SIZE+0xc42>
			OUTS(bps, bpe);
    1c3c:	4653      	mov	r3, sl
    1c3e:	464a      	mov	r2, r9
    1c40:	e796      	b.n	1b70 <CONFIG_FPROTECT_BLOCK_SIZE+0xb70>
				OUTC('0');
    1c42:	9b03      	ldr	r3, [sp, #12]
    1c44:	4641      	mov	r1, r8
    1c46:	2030      	movs	r0, #48	; 0x30
    1c48:	4798      	blx	r3
    1c4a:	2800      	cmp	r0, #0
    1c4c:	f6ff af75 	blt.w	1b3a <CONFIG_FPROTECT_BLOCK_SIZE+0xb3a>
    1c50:	3501      	adds	r5, #1
    1c52:	e7f0      	b.n	1c36 <CONFIG_FPROTECT_BLOCK_SIZE+0xc36>
    1c54:	0000c7b6 	.word	0x0000c7b6

00001c58 <get_device_name>:
};

static const char *get_device_name(const struct device *dev,
				   char *buf,
				   size_t len)
{
    1c58:	4603      	mov	r3, r0
	const char *name = dev->name;
    1c5a:	6800      	ldr	r0, [r0, #0]
{
    1c5c:	b510      	push	{r4, lr}
    1c5e:	460c      	mov	r4, r1
    1c60:	4611      	mov	r1, r2

	if ((name == NULL) || (name[0] == 0)) {
    1c62:	b108      	cbz	r0, 1c68 <get_device_name+0x10>
    1c64:	7802      	ldrb	r2, [r0, #0]
    1c66:	b922      	cbnz	r2, 1c72 <get_device_name+0x1a>
		snprintf(buf, len, "[%p]", dev);
    1c68:	4a02      	ldr	r2, [pc, #8]	; (1c74 <get_device_name+0x1c>)
    1c6a:	4620      	mov	r0, r4
    1c6c:	f002 fdca 	bl	4804 <snprintf>
		name = buf;
    1c70:	4620      	mov	r0, r4
	}

	return name;
}
    1c72:	bd10      	pop	{r4, pc}
    1c74:	0000c7b7 	.word	0x0000c7b7

00001c78 <cmd_device_list_visitor>:
	size_t buf_size;
};

static int cmd_device_list_visitor(const struct device *dev,
				   void *context)
{
    1c78:	b510      	push	{r4, lr}
	const struct cmd_device_list_visitor_context *ctx = context;

	shell_fprintf(ctx->shell, SHELL_NORMAL, "  requires: %s\n",
    1c7a:	680c      	ldr	r4, [r1, #0]
    1c7c:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
    1c80:	f7ff ffea 	bl	1c58 <get_device_name>
    1c84:	4a03      	ldr	r2, [pc, #12]	; (1c94 <cmd_device_list_visitor+0x1c>)
    1c86:	4603      	mov	r3, r0
    1c88:	2108      	movs	r1, #8
    1c8a:	4620      	mov	r0, r4
    1c8c:	f007 fd79 	bl	9782 <shell_fprintf>
		      get_device_name(dev, ctx->buf, ctx->buf_size));

	return 0;
}
    1c90:	2000      	movs	r0, #0
    1c92:	bd10      	pop	{r4, pc}
    1c94:	0000c7bc 	.word	0x0000c7bc

00001c98 <cmd_device_list>:

static int cmd_device_list(const struct shell *shell,
			   size_t argc, char **argv)
{
    1c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1c9c:	b08a      	sub	sp, #40	; 0x28
    1c9e:	4605      	mov	r5, r0
	const struct device *devlist;
	size_t devcnt = z_device_get_all_static(&devlist);
    1ca0:	a801      	add	r0, sp, #4
    1ca2:	f005 fc27 	bl	74f4 <z_device_get_all_static>
	const struct device *devlist_end = devlist + devcnt;
    1ca6:	9b01      	ldr	r3, [sp, #4]
	const struct device *dev;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
    1ca8:	4a1b      	ldr	r2, [pc, #108]	; (1d18 <cmd_device_list+0x80>)
	for (dev = devlist; dev < devlist_end; dev++) {
		char buf[20];
		const char *name = get_device_name(dev, buf, sizeof(buf));
		const char *state = "READY";

		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    1caa:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1d24 <cmd_device_list+0x8c>
		if (!device_is_ready(dev)) {
			state = "DISABLED";
    1cae:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1d28 <cmd_device_list+0x90>
    1cb2:	f8df a078 	ldr.w	sl, [pc, #120]	; 1d2c <cmd_device_list+0x94>
	const struct device *devlist_end = devlist + devcnt;
    1cb6:	2618      	movs	r6, #24
    1cb8:	fb06 3600 	mla	r6, r6, r0, r3
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
    1cbc:	2108      	movs	r1, #8
    1cbe:	4628      	mov	r0, r5
    1cc0:	f007 fd5f 	bl	9782 <shell_fprintf>
	for (dev = devlist; dev < devlist_end; dev++) {
    1cc4:	9c01      	ldr	r4, [sp, #4]
    1cc6:	42b4      	cmp	r4, r6
    1cc8:	d303      	bcc.n	1cd2 <cmd_device_list+0x3a>
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
		}
	}

	return 0;
}
    1cca:	2000      	movs	r0, #0
    1ccc:	b00a      	add	sp, #40	; 0x28
    1cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const char *name = get_device_name(dev, buf, sizeof(buf));
    1cd2:	af05      	add	r7, sp, #20
    1cd4:	4639      	mov	r1, r7
    1cd6:	2214      	movs	r2, #20
    1cd8:	4620      	mov	r0, r4
    1cda:	f7ff ffbd 	bl	1c58 <get_device_name>
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    1cde:	4642      	mov	r2, r8
		const char *name = get_device_name(dev, buf, sizeof(buf));
    1ce0:	4603      	mov	r3, r0
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    1ce2:	2108      	movs	r1, #8
    1ce4:	4628      	mov	r0, r5
    1ce6:	f007 fd4c 	bl	9782 <shell_fprintf>
    1cea:	4620      	mov	r0, r4
    1cec:	f009 fb78 	bl	b3e0 <z_device_ready>
		shell_fprintf(shell, SHELL_NORMAL, " (%s)\n", state);
    1cf0:	4a0a      	ldr	r2, [pc, #40]	; (1d1c <cmd_device_list+0x84>)
    1cf2:	2800      	cmp	r0, #0
    1cf4:	bf14      	ite	ne
    1cf6:	464b      	movne	r3, r9
    1cf8:	4653      	moveq	r3, sl
    1cfa:	2108      	movs	r1, #8
    1cfc:	4628      	mov	r0, r5
    1cfe:	f007 fd40 	bl	9782 <shell_fprintf>
			struct cmd_device_list_visitor_context ctx = {
    1d02:	2314      	movs	r3, #20
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    1d04:	4620      	mov	r0, r4
    1d06:	4906      	ldr	r1, [pc, #24]	; (1d20 <cmd_device_list+0x88>)
			struct cmd_device_list_visitor_context ctx = {
    1d08:	9304      	str	r3, [sp, #16]
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    1d0a:	aa02      	add	r2, sp, #8
			struct cmd_device_list_visitor_context ctx = {
    1d0c:	e9cd 5702 	strd	r5, r7, [sp, #8]
	for (dev = devlist; dev < devlist_end; dev++) {
    1d10:	3418      	adds	r4, #24
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    1d12:	f009 fb6f 	bl	b3f4 <device_required_foreach>
	for (dev = devlist; dev < devlist_end; dev++) {
    1d16:	e7d6      	b.n	1cc6 <cmd_device_list+0x2e>
    1d18:	0000c7db 	.word	0x0000c7db
    1d1c:	0000d945 	.word	0x0000d945
    1d20:	00001c79 	.word	0x00001c79
    1d24:	0000c7e5 	.word	0x0000c7e5
    1d28:	0000c7cc 	.word	0x0000c7cc
    1d2c:	0000c7d2 	.word	0x0000c7d2

00001d30 <device_get_config_level>:
{
    1d30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    1d34:	4b11      	ldr	r3, [pc, #68]	; (1d7c <device_get_config_level+0x4c>)
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
    1d36:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1d80 <device_get_config_level+0x50>
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    1d3a:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    1d3e:	3101      	adds	r1, #1
{
    1d40:	b087      	sub	sp, #28
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    1d42:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
{
    1d46:	4606      	mov	r6, r0
	bool devices = false;
    1d48:	2700      	movs	r7, #0
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    1d4a:	45a0      	cmp	r8, r4
    1d4c:	d803      	bhi.n	1d56 <device_get_config_level+0x26>
}
    1d4e:	4638      	mov	r0, r7
    1d50:	b007      	add	sp, #28
    1d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1d56:	4620      	mov	r0, r4
    1d58:	f009 fb42 	bl	b3e0 <z_device_ready>
    1d5c:	4605      	mov	r5, r0
    1d5e:	b158      	cbz	r0, 1d78 <device_get_config_level+0x48>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
    1d60:	2214      	movs	r2, #20
    1d62:	a901      	add	r1, sp, #4
    1d64:	4620      	mov	r0, r4
    1d66:	f7ff ff77 	bl	1c58 <get_device_name>
    1d6a:	464a      	mov	r2, r9
    1d6c:	4603      	mov	r3, r0
    1d6e:	2108      	movs	r1, #8
    1d70:	4630      	mov	r0, r6
    1d72:	f007 fd06 	bl	9782 <shell_fprintf>
			devices = true;
    1d76:	462f      	mov	r7, r5
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    1d78:	3418      	adds	r4, #24
    1d7a:	e7e6      	b.n	1d4a <device_get_config_level+0x1a>
    1d7c:	0000be6c 	.word	0x0000be6c
    1d80:	0000c7ea 	.word	0x0000c7ea

00001d84 <cmd_device_levels>:
{
    1d84:	b510      	push	{r4, lr}
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
    1d86:	2108      	movs	r1, #8
{
    1d88:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
    1d8a:	4a1e      	ldr	r2, [pc, #120]	; (1e04 <cmd_device_levels+0x80>)
    1d8c:	f007 fcf9 	bl	9782 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_1);
    1d90:	2100      	movs	r1, #0
    1d92:	4620      	mov	r0, r4
    1d94:	f7ff ffcc 	bl	1d30 <device_get_config_level>
	if (ret == false) {
    1d98:	b920      	cbnz	r0, 1da4 <cmd_device_levels+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    1d9a:	4a1b      	ldr	r2, [pc, #108]	; (1e08 <cmd_device_levels+0x84>)
    1d9c:	2108      	movs	r1, #8
    1d9e:	4620      	mov	r0, r4
    1da0:	f007 fcef 	bl	9782 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 2:\n");
    1da4:	2108      	movs	r1, #8
    1da6:	4620      	mov	r0, r4
    1da8:	4a18      	ldr	r2, [pc, #96]	; (1e0c <cmd_device_levels+0x88>)
    1daa:	f007 fcea 	bl	9782 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_2);
    1dae:	2101      	movs	r1, #1
    1db0:	4620      	mov	r0, r4
    1db2:	f7ff ffbd 	bl	1d30 <device_get_config_level>
	if (ret == false) {
    1db6:	b920      	cbnz	r0, 1dc2 <cmd_device_levels+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    1db8:	4a13      	ldr	r2, [pc, #76]	; (1e08 <cmd_device_levels+0x84>)
    1dba:	2108      	movs	r1, #8
    1dbc:	4620      	mov	r0, r4
    1dbe:	f007 fce0 	bl	9782 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
    1dc2:	2108      	movs	r1, #8
    1dc4:	4620      	mov	r0, r4
    1dc6:	4a12      	ldr	r2, [pc, #72]	; (1e10 <cmd_device_levels+0x8c>)
    1dc8:	f007 fcdb 	bl	9782 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_POST_KERNEL);
    1dcc:	2102      	movs	r1, #2
    1dce:	4620      	mov	r0, r4
    1dd0:	f7ff ffae 	bl	1d30 <device_get_config_level>
	if (ret == false) {
    1dd4:	b920      	cbnz	r0, 1de0 <cmd_device_levels+0x5c>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    1dd6:	4a0c      	ldr	r2, [pc, #48]	; (1e08 <cmd_device_levels+0x84>)
    1dd8:	2108      	movs	r1, #8
    1dda:	4620      	mov	r0, r4
    1ddc:	f007 fcd1 	bl	9782 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "APPLICATION:\n");
    1de0:	2108      	movs	r1, #8
    1de2:	4620      	mov	r0, r4
    1de4:	4a0b      	ldr	r2, [pc, #44]	; (1e14 <cmd_device_levels+0x90>)
    1de6:	f007 fccc 	bl	9782 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_APPLICATION);
    1dea:	2103      	movs	r1, #3
    1dec:	4620      	mov	r0, r4
    1dee:	f7ff ff9f 	bl	1d30 <device_get_config_level>
	if (ret == false) {
    1df2:	b920      	cbnz	r0, 1dfe <cmd_device_levels+0x7a>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    1df4:	4a04      	ldr	r2, [pc, #16]	; (1e08 <cmd_device_levels+0x84>)
    1df6:	2108      	movs	r1, #8
    1df8:	4620      	mov	r0, r4
    1dfa:	f007 fcc2 	bl	9782 <shell_fprintf>
}
    1dfe:	2000      	movs	r0, #0
    1e00:	bd10      	pop	{r4, pc}
    1e02:	bf00      	nop
    1e04:	0000c7f0 	.word	0x0000c7f0
    1e08:	0000c7ff 	.word	0x0000c7ff
    1e0c:	0000c807 	.word	0x0000c807
    1e10:	0000c816 	.word	0x0000c816
    1e14:	0000c824 	.word	0x0000c824

00001e18 <cmd_devmem>:
{
	mem_addr_t phys_addr, addr;
	uint32_t value = 0;
	uint8_t width;

	if (argc < 2 || argc > 4) {
    1e18:	1e8b      	subs	r3, r1, #2
    1e1a:	2b02      	cmp	r3, #2
{
    1e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1e20:	4607      	mov	r7, r0
    1e22:	4688      	mov	r8, r1
    1e24:	4614      	mov	r4, r2
	if (argc < 2 || argc > 4) {
    1e26:	d833      	bhi.n	1e90 <cmd_devmem+0x78>
		return -EINVAL;
	}

	phys_addr = strtoul(argv[1], NULL, 16);
    1e28:	6860      	ldr	r0, [r4, #4]
    1e2a:	2210      	movs	r2, #16
    1e2c:	2100      	movs	r1, #0
    1e2e:	f008 fc8b 	bl	a748 <strtoul>
	shell_print(sh, "Mapped 0x%lx to 0x%lx\n", phys_addr, addr);
#else
	addr = phys_addr;
#endif /* defined(CONFIG_MMU) || defined(CONFIG_PCIE) */

	if (argc < 3) {
    1e32:	f1b8 0f02 	cmp.w	r8, #2
	phys_addr = strtoul(argv[1], NULL, 16);
    1e36:	4606      	mov	r6, r0
	if (argc < 3) {
    1e38:	d01e      	beq.n	1e78 <cmd_devmem+0x60>
		width = 32;
	} else {
		width = strtoul(argv[2], NULL, 10);
    1e3a:	68a0      	ldr	r0, [r4, #8]
    1e3c:	220a      	movs	r2, #10
    1e3e:	2100      	movs	r1, #0
    1e40:	f008 fc82 	bl	a748 <strtoul>
    1e44:	b2c5      	uxtb	r5, r0
	}

	shell_fprintf(sh, SHELL_NORMAL, "Using data width %d\n", width);
    1e46:	4a21      	ldr	r2, [pc, #132]	; (1ecc <cmd_devmem+0xb4>)
    1e48:	462b      	mov	r3, r5
    1e4a:	2108      	movs	r1, #8
    1e4c:	4638      	mov	r0, r7
    1e4e:	f007 fc98 	bl	9782 <shell_fprintf>

	if (argc <= 3) {
    1e52:	f1b8 0f04 	cmp.w	r8, #4
    1e56:	d01e      	beq.n	1e96 <cmd_devmem+0x7e>
	switch (width) {
    1e58:	2d10      	cmp	r5, #16
    1e5a:	d00f      	beq.n	1e7c <cmd_devmem+0x64>
    1e5c:	2d20      	cmp	r5, #32
    1e5e:	d010      	beq.n	1e82 <cmd_devmem+0x6a>
    1e60:	2d08      	cmp	r5, #8
    1e62:	d110      	bne.n	1e86 <cmd_devmem+0x6e>
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
    1e64:	7833      	ldrb	r3, [r6, #0]
    1e66:	b2db      	uxtb	r3, r3
		shell_fprintf(sh, SHELL_NORMAL, "Read value 0x%x\n", value);
    1e68:	4a19      	ldr	r2, [pc, #100]	; (1ed0 <cmd_devmem+0xb8>)
    1e6a:	2108      	movs	r1, #8
    1e6c:	4638      	mov	r0, r7
    1e6e:	f007 fc88 	bl	9782 <shell_fprintf>
	int err = 0;
    1e72:	2000      	movs	r0, #0
	value = strtoul(argv[3], NULL, 16);

	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);

	return memory_write(sh, addr, width, value);
}
    1e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		width = 32;
    1e78:	2520      	movs	r5, #32
    1e7a:	e7e4      	b.n	1e46 <cmd_devmem+0x2e>
	*(volatile uint8_t *)addr = data;
}

static ALWAYS_INLINE uint16_t sys_read16(mem_addr_t addr)
{
	return *(volatile uint16_t *)addr;
    1e7c:	8833      	ldrh	r3, [r6, #0]
    1e7e:	b29b      	uxth	r3, r3
	if (err == 0) {
    1e80:	e7f2      	b.n	1e68 <cmd_devmem+0x50>
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
    1e82:	6833      	ldr	r3, [r6, #0]
    1e84:	e7f0      	b.n	1e68 <cmd_devmem+0x50>
		shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
    1e86:	4a13      	ldr	r2, [pc, #76]	; (1ed4 <cmd_devmem+0xbc>)
    1e88:	2108      	movs	r1, #8
    1e8a:	4638      	mov	r0, r7
    1e8c:	f007 fc79 	bl	9782 <shell_fprintf>
		return -EINVAL;
    1e90:	f06f 0015 	mvn.w	r0, #21
    1e94:	e7ee      	b.n	1e74 <cmd_devmem+0x5c>
	value = strtoul(argv[3], NULL, 16);
    1e96:	68e0      	ldr	r0, [r4, #12]
    1e98:	2210      	movs	r2, #16
    1e9a:	2100      	movs	r1, #0
    1e9c:	f008 fc54 	bl	a748 <strtoul>
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
    1ea0:	4a0d      	ldr	r2, [pc, #52]	; (1ed8 <cmd_devmem+0xc0>)
    1ea2:	4603      	mov	r3, r0
	value = strtoul(argv[3], NULL, 16);
    1ea4:	4604      	mov	r4, r0
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
    1ea6:	2108      	movs	r1, #8
    1ea8:	4638      	mov	r0, r7
    1eaa:	f007 fc6a 	bl	9782 <shell_fprintf>
	switch (width) {
    1eae:	2d10      	cmp	r5, #16
    1eb0:	d006      	beq.n	1ec0 <cmd_devmem+0xa8>
    1eb2:	2d20      	cmp	r5, #32
    1eb4:	d007      	beq.n	1ec6 <cmd_devmem+0xae>
    1eb6:	2d08      	cmp	r5, #8
    1eb8:	d1e5      	bne.n	1e86 <cmd_devmem+0x6e>
		sys_write8(value, addr);
    1eba:	b2e4      	uxtb	r4, r4
	*(volatile uint8_t *)addr = data;
    1ebc:	7034      	strb	r4, [r6, #0]
    1ebe:	e7d8      	b.n	1e72 <cmd_devmem+0x5a>
		sys_write16(value, addr);
    1ec0:	b2a4      	uxth	r4, r4
	*(volatile uint16_t *)addr = data;
    1ec2:	8034      	strh	r4, [r6, #0]
    1ec4:	e7d5      	b.n	1e72 <cmd_devmem+0x5a>
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
    1ec6:	6034      	str	r4, [r6, #0]
    1ec8:	e7d3      	b.n	1e72 <cmd_devmem+0x5a>
    1eca:	bf00      	nop
    1ecc:	0000c881 	.word	0x0000c881
    1ed0:	0000c8ac 	.word	0x0000c8ac
    1ed4:	0000c896 	.word	0x0000c896
    1ed8:	0000c8bd 	.word	0x0000c8bd

00001edc <set_bypass>:
{
    1edc:	b570      	push	{r4, r5, r6, lr}
    1ede:	4c0f      	ldr	r4, [pc, #60]	; (1f1c <set_bypass+0x40>)
    1ee0:	4605      	mov	r5, r0
	if (bypass && in_use) {
    1ee2:	7823      	ldrb	r3, [r4, #0]
    1ee4:	460e      	mov	r6, r1
    1ee6:	b139      	cbz	r1, 1ef8 <set_bypass+0x1c>
    1ee8:	b133      	cbz	r3, 1ef8 <set_bypass+0x1c>
		shell_error(sh, "devmem load supports setting bypass on a single instance.");
    1eea:	4a0d      	ldr	r2, [pc, #52]	; (1f20 <set_bypass+0x44>)
    1eec:	2101      	movs	r1, #1
    1eee:	f007 fc48 	bl	9782 <shell_fprintf>
    1ef2:	f06f 000f 	mvn.w	r0, #15
}
    1ef6:	bd70      	pop	{r4, r5, r6, pc}
	in_use = !in_use;
    1ef8:	f083 0301 	eor.w	r3, r3, #1
    1efc:	7023      	strb	r3, [r4, #0]
	if (in_use) {
    1efe:	b133      	cbz	r3, 1f0e <set_bypass+0x32>
		shell_print(sh, "Loading...\npress ctrl-x ctrl-q to escape");
    1f00:	4a08      	ldr	r2, [pc, #32]	; (1f24 <set_bypass+0x48>)
    1f02:	2108      	movs	r1, #8
    1f04:	4628      	mov	r0, r5
    1f06:	f007 fc3c 	bl	9782 <shell_fprintf>
		in_use = true;
    1f0a:	2301      	movs	r3, #1
    1f0c:	7023      	strb	r3, [r4, #0]
	shell_set_bypass(sh, bypass);
    1f0e:	4628      	mov	r0, r5
    1f10:	4631      	mov	r1, r6
    1f12:	f007 fc5b 	bl	97cc <shell_set_bypass>
	return 0;
    1f16:	2000      	movs	r0, #0
    1f18:	e7ed      	b.n	1ef6 <set_bypass+0x1a>
    1f1a:	bf00      	nop
    1f1c:	2000128a 	.word	0x2000128a
    1f20:	0000c8d1 	.word	0x0000c8d1
    1f24:	0000c90c 	.word	0x0000c90c

00001f28 <cmd_load>:
{
    1f28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f2c:	4606      	mov	r6, r0
	chunk_element = 0;
    1f2e:	482e      	ldr	r0, [pc, #184]	; (1fe8 <cmd_load+0xc0>)
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    1f30:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 2000 <cmd_load+0xd8>
		if (!strncmp(arg, "-e", 2)) {
    1f34:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 2004 <cmd_load+0xdc>
			shell_print(sh, "Unknown option \"%s\"", arg);
    1f38:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 2008 <cmd_load+0xe0>
	littleendian = false;
    1f3c:	2300      	movs	r3, #0
	chunk_element = 0;
    1f3e:	6003      	str	r3, [r0, #0]
{
    1f40:	460d      	mov	r5, r1
	sum = 0;
    1f42:	482a      	ldr	r0, [pc, #168]	; (1fec <cmd_load+0xc4>)
	littleendian = false;
    1f44:	492a      	ldr	r1, [pc, #168]	; (1ff0 <cmd_load+0xc8>)
	sum = 0;
    1f46:	6003      	str	r3, [r0, #0]
	littleendian = false;
    1f48:	700b      	strb	r3, [r1, #0]
	while (argc >= 2) {
    1f4a:	4614      	mov	r4, r2
    1f4c:	9100      	str	r1, [sp, #0]
    1f4e:	2d01      	cmp	r5, #1
    1f50:	4627      	mov	r7, r4
    1f52:	f854 3f04 	ldr.w	r3, [r4, #4]!
    1f56:	d921      	bls.n	1f9c <cmd_load+0x74>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    1f58:	4618      	mov	r0, r3
    1f5a:	2202      	movs	r2, #2
    1f5c:	4649      	mov	r1, r9
    1f5e:	9301      	str	r3, [sp, #4]
    1f60:	f008 fb12 	bl	a588 <strncmp>
    1f64:	9b01      	ldr	r3, [sp, #4]
    1f66:	b988      	cbnz	r0, 1f8c <cmd_load+0x64>
    1f68:	6822      	ldr	r2, [r4, #0]
    1f6a:	7892      	ldrb	r2, [r2, #2]
    1f6c:	3a00      	subs	r2, #0
    1f6e:	bf18      	it	ne
    1f70:	2201      	movne	r2, #1
    1f72:	eb03 0802 	add.w	r8, r3, r2
		if (!strncmp(arg, "-e", 2)) {
    1f76:	4651      	mov	r1, sl
    1f78:	2202      	movs	r2, #2
    1f7a:	4640      	mov	r0, r8
    1f7c:	f008 fb04 	bl	a588 <strncmp>
    1f80:	b930      	cbnz	r0, 1f90 <cmd_load+0x68>
			littleendian = true;
    1f82:	9a00      	ldr	r2, [sp, #0]
    1f84:	2301      	movs	r3, #1
    1f86:	7013      	strb	r3, [r2, #0]
		argc--;
    1f88:	3d01      	subs	r5, #1
    1f8a:	e7e0      	b.n	1f4e <cmd_load+0x26>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    1f8c:	2200      	movs	r2, #0
    1f8e:	e7f0      	b.n	1f72 <cmd_load+0x4a>
		} else if (!strcmp(arg, "--")) {
    1f90:	4649      	mov	r1, r9
    1f92:	4640      	mov	r0, r8
    1f94:	f008 faec 	bl	a570 <strcmp>
    1f98:	b9b0      	cbnz	r0, 1fc8 <cmd_load+0xa0>
			argv++;
    1f9a:	3704      	adds	r7, #4
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
    1f9c:	2200      	movs	r2, #0
    1f9e:	4611      	mov	r1, r2
    1fa0:	6878      	ldr	r0, [r7, #4]
    1fa2:	f008 fb5b 	bl	a65c <strtol>
    1fa6:	4b13      	ldr	r3, [pc, #76]	; (1ff4 <cmd_load+0xcc>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    1fa8:	2200      	movs	r2, #0
    1faa:	4611      	mov	r1, r2
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
    1fac:	6018      	str	r0, [r3, #0]
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    1fae:	6878      	ldr	r0, [r7, #4]
    1fb0:	f008 fb54 	bl	a65c <strtol>
    1fb4:	4b10      	ldr	r3, [pc, #64]	; (1ff8 <cmd_load+0xd0>)
	set_bypass(sh, bypass_cb);
    1fb6:	4911      	ldr	r1, [pc, #68]	; (1ffc <cmd_load+0xd4>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    1fb8:	6018      	str	r0, [r3, #0]
	set_bypass(sh, bypass_cb);
    1fba:	4630      	mov	r0, r6
    1fbc:	f7ff ff8e 	bl	1edc <set_bypass>
}
    1fc0:	2000      	movs	r0, #0
    1fc2:	b003      	add	sp, #12
    1fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (arg[0] == '-' && arg[1]) {
    1fc8:	f898 2000 	ldrb.w	r2, [r8]
    1fcc:	2a2d      	cmp	r2, #45	; 0x2d
    1fce:	d1e5      	bne.n	1f9c <cmd_load+0x74>
    1fd0:	f898 2001 	ldrb.w	r2, [r8, #1]
    1fd4:	2a00      	cmp	r2, #0
    1fd6:	d0e1      	beq.n	1f9c <cmd_load+0x74>
			shell_print(sh, "Unknown option \"%s\"", arg);
    1fd8:	4643      	mov	r3, r8
    1fda:	465a      	mov	r2, fp
    1fdc:	2108      	movs	r1, #8
    1fde:	4630      	mov	r0, r6
    1fe0:	f007 fbcf 	bl	9782 <shell_fprintf>
    1fe4:	e7d0      	b.n	1f88 <cmd_load+0x60>
    1fe6:	bf00      	nop
    1fe8:	200006c8 	.word	0x200006c8
    1fec:	200006d0 	.word	0x200006d0
    1ff0:	2000128b 	.word	0x2000128b
    1ff4:	200006c4 	.word	0x200006c4
    1ff8:	200006cc 	.word	0x200006cc
    1ffc:	0000200d 	.word	0x0000200d
    2000:	0000c936 	.word	0x0000c936
    2004:	0000c939 	.word	0x0000c939
    2008:	0000c93c 	.word	0x0000c93c

0000200c <bypass_cb>:
{
    200c:	b570      	push	{r4, r5, r6, lr}
	if (tail == CHAR_CAN && recv[0] == CHAR_DC1) {
    200e:	4b3e      	ldr	r3, [pc, #248]	; (2108 <bypass_cb+0xfc>)
{
    2010:	4605      	mov	r5, r0
	if (tail == CHAR_CAN && recv[0] == CHAR_DC1) {
    2012:	7818      	ldrb	r0, [r3, #0]
    2014:	2818      	cmp	r0, #24
    2016:	d102      	bne.n	201e <bypass_cb+0x12>
    2018:	7808      	ldrb	r0, [r1, #0]
    201a:	2811      	cmp	r0, #17
    201c:	d031      	beq.n	2082 <bypass_cb+0x76>
    201e:	3a01      	subs	r2, #1
    2020:	4608      	mov	r0, r1
    2022:	1854      	adds	r4, r2, r1
		for (int i = 0; i < (len - 1); i++) {
    2024:	4284      	cmp	r4, r0
    2026:	d125      	bne.n	2074 <bypass_cb+0x68>
	tail = recv[len - 1];
    2028:	5c8a      	ldrb	r2, [r1, r2]
    202a:	701a      	strb	r2, [r3, #0]
	if (is_ascii(*recv)) {
    202c:	780a      	ldrb	r2, [r1, #0]
	return (data >= 0x30 && data <= 0x39) || (data >= 0x61 && data <= 0x66) ||
    202e:	4c37      	ldr	r4, [pc, #220]	; (210c <bypass_cb+0x100>)
    2030:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    2034:	2b09      	cmp	r3, #9
    2036:	d904      	bls.n	2042 <bypass_cb+0x36>
	if (is_ascii(*recv)) {
    2038:	f022 0320 	bic.w	r3, r2, #32
    203c:	3b41      	subs	r3, #65	; 0x41
    203e:	2b05      	cmp	r3, #5
    2040:	d804      	bhi.n	204c <bypass_cb+0x40>
		chunk[chunk_element] = *recv;
    2042:	6823      	ldr	r3, [r4, #0]
    2044:	4932      	ldr	r1, [pc, #200]	; (2110 <bypass_cb+0x104>)
    2046:	54ca      	strb	r2, [r1, r3]
		chunk_element++;
    2048:	3301      	adds	r3, #1
    204a:	6023      	str	r3, [r4, #0]
	if (chunk_element == 2) {
    204c:	6823      	ldr	r3, [r4, #0]
    204e:	2b02      	cmp	r3, #2
    2050:	d134      	bne.n	20bc <bypass_cb+0xb0>
		byte = (uint8_t)strtoul(chunk, NULL, 16);
    2052:	2210      	movs	r2, #16
    2054:	482e      	ldr	r0, [pc, #184]	; (2110 <bypass_cb+0x104>)
    2056:	2100      	movs	r1, #0
    2058:	f008 fb76 	bl	a748 <strtoul>
		*bytes = byte;
    205c:	4a2d      	ldr	r2, [pc, #180]	; (2114 <bypass_cb+0x108>)
		byte = (uint8_t)strtoul(chunk, NULL, 16);
    205e:	6813      	ldr	r3, [r2, #0]
    2060:	f803 0b01 	strb.w	r0, [r3], #1
		bytes++;
    2064:	6013      	str	r3, [r2, #0]
		sum++;
    2066:	4a2c      	ldr	r2, [pc, #176]	; (2118 <bypass_cb+0x10c>)
    2068:	6813      	ldr	r3, [r2, #0]
    206a:	3301      	adds	r3, #1
    206c:	6013      	str	r3, [r2, #0]
		chunk_element = 0;
    206e:	2300      	movs	r3, #0
    2070:	6023      	str	r3, [r4, #0]
    2072:	e023      	b.n	20bc <bypass_cb+0xb0>
			if (recv[i] == CHAR_CAN && recv[i + 1] == CHAR_DC1) {
    2074:	f810 6b01 	ldrb.w	r6, [r0], #1
    2078:	2e18      	cmp	r6, #24
    207a:	d1d3      	bne.n	2024 <bypass_cb+0x18>
    207c:	7806      	ldrb	r6, [r0, #0]
    207e:	2e11      	cmp	r6, #17
    2080:	d1d0      	bne.n	2024 <bypass_cb+0x18>
		shell_print(sh, "Number of bytes read: %d", sum);
    2082:	4c25      	ldr	r4, [pc, #148]	; (2118 <bypass_cb+0x10c>)
    2084:	4a25      	ldr	r2, [pc, #148]	; (211c <bypass_cb+0x110>)
    2086:	6823      	ldr	r3, [r4, #0]
    2088:	2108      	movs	r1, #8
    208a:	4628      	mov	r0, r5
    208c:	f007 fb79 	bl	9782 <shell_fprintf>
		set_bypass(sh, NULL);
    2090:	2100      	movs	r1, #0
    2092:	4628      	mov	r0, r5
    2094:	f7ff ff22 	bl	1edc <set_bypass>
		if (!littleendian) {
    2098:	4b21      	ldr	r3, [pc, #132]	; (2120 <bypass_cb+0x114>)
    209a:	7818      	ldrb	r0, [r3, #0]
    209c:	b970      	cbnz	r0, 20bc <bypass_cb+0xb0>
    209e:	4a21      	ldr	r2, [pc, #132]	; (2124 <bypass_cb+0x118>)
    20a0:	6823      	ldr	r3, [r4, #0]
    20a2:	6811      	ldr	r1, [r2, #0]
			while (sum > 4) {
    20a4:	2b04      	cmp	r3, #4
    20a6:	dc0a      	bgt.n	20be <bypass_cb+0xb2>
    20a8:	b108      	cbz	r0, 20ae <bypass_cb+0xa2>
    20aa:	6011      	str	r1, [r2, #0]
    20ac:	6023      	str	r3, [r4, #0]
			if (sum % 4 == 0) {
    20ae:	f013 0103 	ands.w	r1, r3, #3
    20b2:	d10b      	bne.n	20cc <bypass_cb+0xc0>
				*data = __bswap_32(*data);
    20b4:	6812      	ldr	r2, [r2, #0]
    20b6:	6813      	ldr	r3, [r2, #0]
    20b8:	ba1b      	rev	r3, r3
				*data = __bswap_16(*data);
    20ba:	6013      	str	r3, [r2, #0]
}
    20bc:	bd70      	pop	{r4, r5, r6, pc}
				*data = __bswap_32(*data);
    20be:	6808      	ldr	r0, [r1, #0]
    20c0:	ba00      	rev	r0, r0
    20c2:	f841 0b04 	str.w	r0, [r1], #4
				sum = sum - 4;
    20c6:	3b04      	subs	r3, #4
				data++;
    20c8:	2001      	movs	r0, #1
    20ca:	e7eb      	b.n	20a4 <bypass_cb+0x98>
			} else if (sum % 4 == 2) {
    20cc:	425b      	negs	r3, r3
    20ce:	f003 0303 	and.w	r3, r3, #3
    20d2:	bf58      	it	pl
    20d4:	4259      	negpl	r1, r3
    20d6:	2902      	cmp	r1, #2
    20d8:	d107      	bne.n	20ea <bypass_cb+0xde>
				*data = __bswap_16(*data);
    20da:	6812      	ldr	r2, [r2, #0]
    20dc:	6811      	ldr	r1, [r2, #0]
    20de:	f3c1 2307 	ubfx	r3, r1, #8, #8
    20e2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    20e6:	b29b      	uxth	r3, r3
    20e8:	e7e7      	b.n	20ba <bypass_cb+0xae>
			} else if (sum % 4 == 3) {
    20ea:	2903      	cmp	r1, #3
    20ec:	d1e6      	bne.n	20bc <bypass_cb+0xb0>
				*data = __bswap_24(*data);
    20ee:	6810      	ldr	r0, [r2, #0]
    20f0:	6802      	ldr	r2, [r0, #0]
    20f2:	0411      	lsls	r1, r2, #16
    20f4:	f3c2 4307 	ubfx	r3, r2, #16, #8
    20f8:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    20fc:	430b      	orrs	r3, r1
    20fe:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    2102:	4313      	orrs	r3, r2
    2104:	6003      	str	r3, [r0, #0]
    2106:	e7d9      	b.n	20bc <bypass_cb+0xb0>
    2108:	2000128c 	.word	0x2000128c
    210c:	200006c8 	.word	0x200006c8
    2110:	20001288 	.word	0x20001288
    2114:	200006c4 	.word	0x200006c4
    2118:	200006d0 	.word	0x200006d0
    211c:	0000c951 	.word	0x0000c951
    2120:	2000128b 	.word	0x2000128b
    2124:	200006cc 	.word	0x200006cc

00002128 <cmd_kernel_version>:
#include <drivers/timer/system_timer.h>
#include <kernel.h>

static int cmd_kernel_version(const struct shell *shell,
			      size_t argc, char **argv)
{
    2128:	b513      	push	{r0, r1, r4, lr}
    212a:	4604      	mov	r4, r0
	uint32_t version = sys_kernel_version_get();
    212c:	f006 fb5e 	bl	87ec <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Zephyr version %d.%d.%d",
    2130:	f3c0 2307 	ubfx	r3, r0, #8, #8
    2134:	9301      	str	r3, [sp, #4]
    2136:	f3c0 4307 	ubfx	r3, r0, #16, #8
    213a:	9300      	str	r3, [sp, #0]
    213c:	4a04      	ldr	r2, [pc, #16]	; (2150 <cmd_kernel_version+0x28>)
    213e:	0e03      	lsrs	r3, r0, #24
    2140:	2108      	movs	r1, #8
    2142:	4620      	mov	r0, r4
    2144:	f007 fb1d 	bl	9782 <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
    2148:	2000      	movs	r0, #0
    214a:	b002      	add	sp, #8
    214c:	bd10      	pop	{r4, pc}
    214e:	bf00      	nop
    2150:	0000c9f8 	.word	0x0000c9f8

00002154 <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *shell,
			     size_t argc, char **argv)
{
    2154:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
    2158:	4604      	mov	r4, r0
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    215a:	f009 fc70 	bl	ba3e <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    215e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    2162:	fba0 bc05 	umull	fp, ip, r0, r5
    2166:	fb05 cc01 	mla	ip, r5, r1, ip
    216a:	ea4f 32db 	mov.w	r2, fp, lsr #15
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Uptime: %u ms", k_uptime_get_32());
    216e:	ea42 434c 	orr.w	r3, r2, ip, lsl #17
    2172:	4620      	mov	r0, r4
    2174:	4a03      	ldr	r2, [pc, #12]	; (2184 <cmd_kernel_uptime+0x30>)
    2176:	2108      	movs	r1, #8
    2178:	f007 fb03 	bl	9782 <shell_fprintf>
	return 0;
}
    217c:	2000      	movs	r0, #0
    217e:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
    2182:	bf00      	nop
    2184:	0000ca11 	.word	0x0000ca11

00002188 <cmd_kernel_threads>:

}

static int cmd_kernel_threads(const struct shell *shell,
			      size_t argc, char **argv)
{
    2188:	b510      	push	{r4, lr}
    218a:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Scheduler: %u since last call", sys_clock_elapsed());
    218c:	f004 f886 	bl	629c <sys_clock_elapsed>
    2190:	4a08      	ldr	r2, [pc, #32]	; (21b4 <cmd_kernel_threads+0x2c>)
    2192:	4603      	mov	r3, r0
    2194:	2108      	movs	r1, #8
    2196:	4620      	mov	r0, r4
    2198:	f007 faf3 	bl	9782 <shell_fprintf>
	shell_print(shell, "Threads:");
    219c:	4a06      	ldr	r2, [pc, #24]	; (21b8 <cmd_kernel_threads+0x30>)
    219e:	4620      	mov	r0, r4
    21a0:	2108      	movs	r1, #8
    21a2:	f007 faee 	bl	9782 <shell_fprintf>
	k_thread_foreach(shell_tdata_dump, (void *)shell);
    21a6:	4805      	ldr	r0, [pc, #20]	; (21bc <cmd_kernel_threads+0x34>)
    21a8:	4621      	mov	r1, r4
    21aa:	f006 f84d 	bl	8248 <k_thread_foreach>
	return 0;
}
    21ae:	2000      	movs	r0, #0
    21b0:	bd10      	pop	{r4, pc}
    21b2:	bf00      	nop
    21b4:	0000ca20 	.word	0x0000ca20
    21b8:	0000ca3f 	.word	0x0000ca3f
    21bc:	00002221 	.word	0x00002221

000021c0 <cmd_kernel_stacks>:
extern K_KERNEL_STACK_ARRAY_DEFINE(z_interrupt_stacks, CONFIG_MP_NUM_CPUS,
				   CONFIG_ISR_STACK_SIZE);

static int cmd_kernel_stacks(const struct shell *shell,
			     size_t argc, char **argv)
{
    21c0:	b530      	push	{r4, r5, lr}
	uint8_t *buf;
	size_t size, unused;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	k_thread_foreach(shell_stack_dump, (void *)shell);
    21c2:	4601      	mov	r1, r0
{
    21c4:	b087      	sub	sp, #28
    21c6:	4604      	mov	r4, r0
	k_thread_foreach(shell_stack_dump, (void *)shell);
    21c8:	4811      	ldr	r0, [pc, #68]	; (2210 <cmd_kernel_stacks+0x50>)
    21ca:	f006 f83d 	bl	8248 <k_thread_foreach>
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
		buf = Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]);
		size = K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]);

		unused = 0;
		for (size_t i = 0; i < size; i++) {
    21ce:	4a11      	ldr	r2, [pc, #68]	; (2214 <cmd_kernel_stacks+0x54>)
		unused = 0;
    21d0:	2300      	movs	r3, #0
			if (buf[i] == 0xAAU) {
    21d2:	f812 1b01 	ldrb.w	r1, [r2], #1
    21d6:	29aa      	cmp	r1, #170	; 0xaa
    21d8:	d103      	bne.n	21e2 <cmd_kernel_stacks+0x22>
				unused++;
    21da:	3301      	adds	r3, #1
		for (size_t i = 0; i < size; i++) {
    21dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    21e0:	d1f7      	bne.n	21d2 <cmd_kernel_stacks+0x12>
			} else {
				break;
			}
		}

		shell_print(shell,
    21e2:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
    21e6:	2264      	movs	r2, #100	; 0x64
    21e8:	434a      	muls	r2, r1
    21ea:	0ad2      	lsrs	r2, r2, #11
    21ec:	9205      	str	r2, [sp, #20]
    21ee:	2500      	movs	r5, #0
    21f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    21f4:	e9cd 1203 	strd	r1, r2, [sp, #12]
    21f8:	e9cd 2301 	strd	r2, r3, [sp, #4]
    21fc:	4620      	mov	r0, r4
    21fe:	4b06      	ldr	r3, [pc, #24]	; (2218 <cmd_kernel_stacks+0x58>)
    2200:	4a06      	ldr	r2, [pc, #24]	; (221c <cmd_kernel_stacks+0x5c>)
    2202:	9500      	str	r5, [sp, #0]
    2204:	2108      	movs	r1, #8
    2206:	f007 fabc 	bl	9782 <shell_fprintf>
			      size - unused, size,
			      ((size - unused) * 100U) / size);
	}

	return 0;
}
    220a:	4628      	mov	r0, r5
    220c:	b007      	add	sp, #28
    220e:	bd30      	pop	{r4, r5, pc}
    2210:	00002301 	.word	0x00002301
    2214:	200026a0 	.word	0x200026a0
    2218:	20002680 	.word	0x20002680
    221c:	0000ca49 	.word	0x0000ca49

00002220 <shell_tdata_dump>:
{
    2220:	b5f0      	push	{r4, r5, r6, r7, lr}
    2222:	b087      	sub	sp, #28
	size_t size = thread->stack_info.size;
    2224:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
{
    2228:	4604      	mov	r4, r0
    222a:	460d      	mov	r5, r1
	tname = k_thread_name_get(thread);
    222c:	f009 fbb1 	bl	b992 <k_thread_name_get>
    2230:	4606      	mov	r6, r0
	return z_impl_z_current_get();
    2232:	f005 ff21 	bl	8078 <z_impl_z_current_get>
	shell_print(shell, "%s%p %-10s",
    2236:	4b23      	ldr	r3, [pc, #140]	; (22c4 <shell_tdata_dump+0xa4>)
    2238:	4a23      	ldr	r2, [pc, #140]	; (22c8 <shell_tdata_dump+0xa8>)
    223a:	2e00      	cmp	r6, #0
    223c:	bf08      	it	eq
    223e:	461e      	moveq	r6, r3
    2240:	4b22      	ldr	r3, [pc, #136]	; (22cc <shell_tdata_dump+0xac>)
    2242:	e9cd 4600 	strd	r4, r6, [sp]
    2246:	4284      	cmp	r4, r0
    2248:	bf18      	it	ne
    224a:	4613      	movne	r3, r2
    224c:	2108      	movs	r1, #8
    224e:	4628      	mov	r0, r5
    2250:	4a1f      	ldr	r2, [pc, #124]	; (22d0 <shell_tdata_dump+0xb0>)
    2252:	f007 fa96 	bl	9782 <shell_fprintf>
	shell_print(shell, "\toptions: 0x%x, priority: %d timeout: %" PRId64,
    2256:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    225a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    225e:	f994 300e 	ldrsb.w	r3, [r4, #14]
    2262:	4a1c      	ldr	r2, [pc, #112]	; (22d4 <shell_tdata_dump+0xb4>)
    2264:	9300      	str	r3, [sp, #0]
    2266:	2108      	movs	r1, #8
    2268:	7b23      	ldrb	r3, [r4, #12]
    226a:	4628      	mov	r0, r5
    226c:	f007 fa89 	bl	9782 <shell_fprintf>
	shell_print(shell, "\tstate: %s, entry: %p", k_thread_state_str(thread),
    2270:	4620      	mov	r0, r4
    2272:	f006 f831 	bl	82d8 <k_thread_state_str>
    2276:	6e62      	ldr	r2, [r4, #100]	; 0x64
    2278:	9200      	str	r2, [sp, #0]
    227a:	4603      	mov	r3, r0
    227c:	4a16      	ldr	r2, [pc, #88]	; (22d8 <shell_tdata_dump+0xb8>)
    227e:	2108      	movs	r1, #8
    2280:	4628      	mov	r0, r5
    2282:	f007 fa7e 	bl	9782 <shell_fprintf>
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
    2286:	a905      	add	r1, sp, #20
    2288:	4620      	mov	r0, r4
    228a:	f009 fb86 	bl	b99a <z_impl_k_thread_stack_space_get>
	if (ret) {
    228e:	4603      	mov	r3, r0
    2290:	b130      	cbz	r0, 22a0 <shell_tdata_dump+0x80>
		shell_print(shell,
    2292:	4a12      	ldr	r2, [pc, #72]	; (22dc <shell_tdata_dump+0xbc>)
    2294:	2108      	movs	r1, #8
    2296:	4628      	mov	r0, r5
    2298:	f007 fa73 	bl	9782 <shell_fprintf>
}
    229c:	b007      	add	sp, #28
    229e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcnt = ((size - unused) * 100U) / size;
    22a0:	9a05      	ldr	r2, [sp, #20]
    22a2:	2364      	movs	r3, #100	; 0x64
    22a4:	1ab9      	subs	r1, r7, r2
		shell_print(shell,
    22a6:	e9cd 2100 	strd	r2, r1, [sp]
		pcnt = ((size - unused) * 100U) / size;
    22aa:	434b      	muls	r3, r1
		shell_print(shell,
    22ac:	4a0c      	ldr	r2, [pc, #48]	; (22e0 <shell_tdata_dump+0xc0>)
		pcnt = ((size - unused) * 100U) / size;
    22ae:	fbb3 f3f7 	udiv	r3, r3, r7
		shell_print(shell,
    22b2:	2108      	movs	r1, #8
    22b4:	e9cd 7302 	strd	r7, r3, [sp, #8]
    22b8:	4628      	mov	r0, r5
    22ba:	463b      	mov	r3, r7
    22bc:	f007 fa61 	bl	9782 <shell_fprintf>
}
    22c0:	e7ec      	b.n	229c <shell_tdata_dump+0x7c>
    22c2:	bf00      	nop
    22c4:	0000ca91 	.word	0x0000ca91
    22c8:	0000cfb6 	.word	0x0000cfb6
    22cc:	0000ca8f 	.word	0x0000ca8f
    22d0:	0000ca94 	.word	0x0000ca94
    22d4:	0000caa0 	.word	0x0000caa0
    22d8:	0000cacc 	.word	0x0000cacc
    22dc:	0000cae3 	.word	0x0000cae3
    22e0:	0000cb10 	.word	0x0000cb10

000022e4 <cmd_kernel_cycles>:
{
    22e4:	b510      	push	{r4, lr}
    22e6:	4604      	mov	r4, r0
    22e8:	f008 ffbe 	bl	b268 <sys_clock_cycle_get_32>
	shell_print(shell, "cycles: %u hw cycles", k_cycle_get_32());
    22ec:	4a03      	ldr	r2, [pc, #12]	; (22fc <cmd_kernel_cycles+0x18>)
    22ee:	4603      	mov	r3, r0
    22f0:	2108      	movs	r1, #8
    22f2:	4620      	mov	r0, r4
    22f4:	f007 fa45 	bl	9782 <shell_fprintf>
}
    22f8:	2000      	movs	r0, #0
    22fa:	bd10      	pop	{r4, pc}
    22fc:	0000cb47 	.word	0x0000cb47

00002300 <shell_stack_dump>:
{
    2300:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t size = thread->stack_info.size;
    2302:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
{
    2306:	b089      	sub	sp, #36	; 0x24
    2308:	4604      	mov	r4, r0
    230a:	460d      	mov	r5, r1
    230c:	a907      	add	r1, sp, #28
    230e:	f009 fb44 	bl	b99a <z_impl_k_thread_stack_space_get>
	if (ret) {
    2312:	4603      	mov	r3, r0
    2314:	b130      	cbz	r0, 2324 <shell_stack_dump+0x24>
		shell_print(shell,
    2316:	4a10      	ldr	r2, [pc, #64]	; (2358 <shell_stack_dump+0x58>)
    2318:	2108      	movs	r1, #8
    231a:	4628      	mov	r0, r5
    231c:	f007 fa31 	bl	9782 <shell_fprintf>
}
    2320:	b009      	add	sp, #36	; 0x24
    2322:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tname = k_thread_name_get((struct k_thread *)thread);
    2324:	4620      	mov	r0, r4
    2326:	f009 fb34 	bl	b992 <k_thread_name_get>
	shell_print((const struct shell *)user_data,
    232a:	4f0c      	ldr	r7, [pc, #48]	; (235c <shell_stack_dump+0x5c>)
	pcnt = ((size - unused) * 100U) / size;
    232c:	9a07      	ldr	r2, [sp, #28]
	shell_print((const struct shell *)user_data,
    232e:	2800      	cmp	r0, #0
    2330:	bf08      	it	eq
    2332:	4638      	moveq	r0, r7
	pcnt = ((size - unused) * 100U) / size;
    2334:	1ab1      	subs	r1, r6, r2
    2336:	2364      	movs	r3, #100	; 0x64
	shell_print((const struct shell *)user_data,
    2338:	e9cd 2102 	strd	r2, r1, [sp, #8]
    233c:	e9cd 0600 	strd	r0, r6, [sp]
	pcnt = ((size - unused) * 100U) / size;
    2340:	434b      	muls	r3, r1
	shell_print((const struct shell *)user_data,
    2342:	4a07      	ldr	r2, [pc, #28]	; (2360 <shell_stack_dump+0x60>)
	pcnt = ((size - unused) * 100U) / size;
    2344:	fbb3 f3f6 	udiv	r3, r3, r6
	shell_print((const struct shell *)user_data,
    2348:	2108      	movs	r1, #8
    234a:	e9cd 6304 	strd	r6, r3, [sp, #16]
    234e:	4628      	mov	r0, r5
    2350:	4623      	mov	r3, r4
    2352:	f007 fa16 	bl	9782 <shell_fprintf>
    2356:	e7e3      	b.n	2320 <shell_stack_dump+0x20>
    2358:	0000cae3 	.word	0x0000cae3
    235c:	0000ca91 	.word	0x0000ca91
    2360:	0000cb5d 	.word	0x0000cb5d

00002364 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    2364:	4801      	ldr	r0, [pc, #4]	; (236c <nrf_cc3xx_platform_abort_init+0x8>)
    2366:	f006 bbdf 	b.w	8b28 <nrf_cc3xx_platform_set_abort>
    236a:	bf00      	nop
    236c:	0000bff4 	.word	0x0000bff4

00002370 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2370:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2372:	b1d0      	cbz	r0, 23aa <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    2374:	6843      	ldr	r3, [r0, #4]
    2376:	2b04      	cmp	r3, #4
    2378:	d111      	bne.n	239e <mutex_unlock_platform+0x2e>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    237a:	2200      	movs	r2, #0
    237c:	6803      	ldr	r3, [r0, #0]
    237e:	f3bf 8f5b 	dmb	ish
    2382:	e853 1f00 	ldrex	r1, [r3]
    2386:	2901      	cmp	r1, #1
    2388:	d103      	bne.n	2392 <mutex_unlock_platform+0x22>
    238a:	e843 2000 	strex	r0, r2, [r3]
    238e:	2800      	cmp	r0, #0
    2390:	d1f7      	bne.n	2382 <mutex_unlock_platform+0x12>
    2392:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2396:	4807      	ldr	r0, [pc, #28]	; (23b4 <mutex_unlock_platform+0x44>)
    2398:	bf08      	it	eq
    239a:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    239c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    239e:	b13b      	cbz	r3, 23b0 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    23a0:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    23a2:	f005 fa99 	bl	78d8 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    23a6:	2000      	movs	r0, #0
    23a8:	e7f8      	b.n	239c <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    23aa:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    23ae:	e7f5      	b.n	239c <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    23b0:	4801      	ldr	r0, [pc, #4]	; (23b8 <mutex_unlock_platform+0x48>)
    23b2:	e7f3      	b.n	239c <mutex_unlock_platform+0x2c>
    23b4:	ffff8fe9 	.word	0xffff8fe9
    23b8:	ffff8fea 	.word	0xffff8fea

000023bc <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    23bc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    23be:	4604      	mov	r4, r0
    23c0:	b918      	cbnz	r0, 23ca <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    23c2:	4b0d      	ldr	r3, [pc, #52]	; (23f8 <mutex_free_platform+0x3c>)
    23c4:	480d      	ldr	r0, [pc, #52]	; (23fc <mutex_free_platform+0x40>)
    23c6:	685b      	ldr	r3, [r3, #4]
    23c8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    23ca:	6861      	ldr	r1, [r4, #4]
    23cc:	2908      	cmp	r1, #8
    23ce:	d00d      	beq.n	23ec <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    23d0:	f031 0304 	bics.w	r3, r1, #4
    23d4:	d00a      	beq.n	23ec <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    23d6:	f011 0102 	ands.w	r1, r1, #2
    23da:	d008      	beq.n	23ee <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    23dc:	4808      	ldr	r0, [pc, #32]	; (2400 <mutex_free_platform+0x44>)
    23de:	4621      	mov	r1, r4
    23e0:	f009 f85d 	bl	b49e <k_mem_slab_free>
        mutex->mutex = NULL;
    23e4:	2300      	movs	r3, #0
    23e6:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    23e8:	2300      	movs	r3, #0
    23ea:	6063      	str	r3, [r4, #4]
}
    23ec:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    23ee:	6820      	ldr	r0, [r4, #0]
    23f0:	2214      	movs	r2, #20
    23f2:	f008 f90a 	bl	a60a <memset>
    23f6:	e7f7      	b.n	23e8 <mutex_free_platform+0x2c>
    23f8:	200002b0 	.word	0x200002b0
    23fc:	0000cc67 	.word	0x0000cc67
    2400:	200006d4 	.word	0x200006d4

00002404 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2404:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2406:	4604      	mov	r4, r0
    2408:	b918      	cbnz	r0, 2412 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    240a:	4b16      	ldr	r3, [pc, #88]	; (2464 <mutex_init_platform+0x60>)
    240c:	4816      	ldr	r0, [pc, #88]	; (2468 <mutex_init_platform+0x64>)
    240e:	685b      	ldr	r3, [r3, #4]
    2410:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2412:	6863      	ldr	r3, [r4, #4]
    2414:	2b04      	cmp	r3, #4
    2416:	d023      	beq.n	2460 <mutex_init_platform+0x5c>
    2418:	2b08      	cmp	r3, #8
    241a:	d021      	beq.n	2460 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    241c:	b9cb      	cbnz	r3, 2452 <mutex_init_platform+0x4e>
    241e:	6823      	ldr	r3, [r4, #0]
    2420:	b9bb      	cbnz	r3, 2452 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2422:	4812      	ldr	r0, [pc, #72]	; (246c <mutex_init_platform+0x68>)
    2424:	f04f 32ff 	mov.w	r2, #4294967295
    2428:	f04f 33ff 	mov.w	r3, #4294967295
    242c:	4621      	mov	r1, r4
    242e:	f005 f9a5 	bl	777c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2432:	b908      	cbnz	r0, 2438 <mutex_init_platform+0x34>
    2434:	6823      	ldr	r3, [r4, #0]
    2436:	b91b      	cbnz	r3, 2440 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    2438:	4b0a      	ldr	r3, [pc, #40]	; (2464 <mutex_init_platform+0x60>)
    243a:	480d      	ldr	r0, [pc, #52]	; (2470 <mutex_init_platform+0x6c>)
    243c:	685b      	ldr	r3, [r3, #4]
    243e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2440:	6820      	ldr	r0, [r4, #0]
    2442:	2214      	movs	r2, #20
    2444:	2100      	movs	r1, #0
    2446:	f008 f8e0 	bl	a60a <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    244a:	6863      	ldr	r3, [r4, #4]
    244c:	f043 0302 	orr.w	r3, r3, #2
    2450:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    2452:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2454:	f009 f84d 	bl	b4f2 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2458:	6863      	ldr	r3, [r4, #4]
    245a:	f043 0301 	orr.w	r3, r3, #1
    245e:	6063      	str	r3, [r4, #4]
}
    2460:	bd10      	pop	{r4, pc}
    2462:	bf00      	nop
    2464:	200002b0 	.word	0x200002b0
    2468:	0000cc67 	.word	0x0000cc67
    246c:	200006d4 	.word	0x200006d4
    2470:	0000cc8d 	.word	0x0000cc8d

00002474 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2474:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    2476:	b308      	cbz	r0, 24bc <mutex_lock_platform+0x48>
    switch (mutex->flags) {
    2478:	6843      	ldr	r3, [r0, #4]
    247a:	2b04      	cmp	r3, #4
    247c:	d110      	bne.n	24a0 <mutex_lock_platform+0x2c>
    247e:	2201      	movs	r2, #1
    2480:	6803      	ldr	r3, [r0, #0]
    2482:	f3bf 8f5b 	dmb	ish
    2486:	e853 1f00 	ldrex	r1, [r3]
    248a:	2900      	cmp	r1, #0
    248c:	d103      	bne.n	2496 <mutex_lock_platform+0x22>
    248e:	e843 2000 	strex	r0, r2, [r3]
    2492:	2800      	cmp	r0, #0
    2494:	d1f7      	bne.n	2486 <mutex_lock_platform+0x12>
    2496:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    249a:	d10b      	bne.n	24b4 <mutex_lock_platform+0x40>
    249c:	2000      	movs	r0, #0
}
    249e:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    24a0:	b153      	cbz	r3, 24b8 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    24a2:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    24a4:	f04f 32ff 	mov.w	r2, #4294967295
    24a8:	f04f 33ff 	mov.w	r3, #4294967295
    24ac:	f005 f996 	bl	77dc <z_impl_k_mutex_lock>
        if (ret == 0) {
    24b0:	2800      	cmp	r0, #0
    24b2:	d0f3      	beq.n	249c <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    24b4:	4803      	ldr	r0, [pc, #12]	; (24c4 <mutex_lock_platform+0x50>)
    24b6:	e7f2      	b.n	249e <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    24b8:	4803      	ldr	r0, [pc, #12]	; (24c8 <mutex_lock_platform+0x54>)
    24ba:	e7f0      	b.n	249e <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    24bc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    24c0:	e7ed      	b.n	249e <mutex_lock_platform+0x2a>
    24c2:	bf00      	nop
    24c4:	ffff8fe9 	.word	0xffff8fe9
    24c8:	ffff8fea 	.word	0xffff8fea

000024cc <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    24cc:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    24ce:	4906      	ldr	r1, [pc, #24]	; (24e8 <nrf_cc3xx_platform_mutex_init+0x1c>)
    24d0:	4806      	ldr	r0, [pc, #24]	; (24ec <nrf_cc3xx_platform_mutex_init+0x20>)
    24d2:	2340      	movs	r3, #64	; 0x40
    24d4:	2214      	movs	r2, #20
    24d6:	f008 ffc7 	bl	b468 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    24da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    24de:	4904      	ldr	r1, [pc, #16]	; (24f0 <nrf_cc3xx_platform_mutex_init+0x24>)
    24e0:	4804      	ldr	r0, [pc, #16]	; (24f4 <nrf_cc3xx_platform_mutex_init+0x28>)
    24e2:	f006 bb83 	b.w	8bec <nrf_cc3xx_platform_set_mutexes>
    24e6:	bf00      	nop
    24e8:	200006f0 	.word	0x200006f0
    24ec:	200006d4 	.word	0x200006d4
    24f0:	0000c00c 	.word	0x0000c00c
    24f4:	0000bffc 	.word	0x0000bffc

000024f8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    24f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    24fc:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    2500:	f019 0808 	ands.w	r8, r9, #8
{
    2504:	4604      	mov	r4, r0
    2506:	4693      	mov	fp, r2
	if (processing) {
    2508:	d00d      	beq.n	2526 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    250a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    250c:	bf0c      	ite	eq
    250e:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    2512:	f049 0920 	orrne.w	r9, r9, #32
    2516:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    251a:	f38b 8811 	msr	BASEPRI, fp
    251e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    2522:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2526:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    252a:	2902      	cmp	r1, #2
    252c:	d107      	bne.n	253e <process_event+0x46>
			evt = process_recheck(mgr);
    252e:	4620      	mov	r0, r4
    2530:	f006 feb3 	bl	929a <process_recheck>
		if (evt == EVT_NOP) {
    2534:	2800      	cmp	r0, #0
    2536:	d0f0      	beq.n	251a <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    2538:	2801      	cmp	r0, #1
    253a:	8b23      	ldrh	r3, [r4, #24]
    253c:	d150      	bne.n	25e0 <process_event+0xe8>
			res = mgr->last_res;
    253e:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2540:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    2542:	2f00      	cmp	r7, #0
    2544:	da15      	bge.n	2572 <process_event+0x7a>
		*clients = mgr->clients;
    2546:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2548:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    254c:	e9c4 8800 	strd	r8, r8, [r4]
    2550:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    2554:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    2556:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2558:	8b21      	ldrh	r1, [r4, #24]
    255a:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    255e:	45ca      	cmp	sl, r9
    2560:	d002      	beq.n	2568 <process_event+0x70>
		if (do_monitors
    2562:	68a3      	ldr	r3, [r4, #8]
    2564:	2b00      	cmp	r3, #0
    2566:	d15c      	bne.n	2622 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    2568:	b90d      	cbnz	r5, 256e <process_event+0x76>
		    || (transit != NULL)) {
    256a:	2e00      	cmp	r6, #0
    256c:	d074      	beq.n	2658 <process_event+0x160>
    256e:	2300      	movs	r3, #0
    2570:	e058      	b.n	2624 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2572:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    2576:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    2578:	2a01      	cmp	r2, #1
    257a:	d820      	bhi.n	25be <process_event+0xc6>
		*clients = mgr->clients;
    257c:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    2580:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    2582:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    2584:	b289      	uxth	r1, r1
	list->tail = NULL;
    2586:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    258a:	d10c      	bne.n	25a6 <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    258c:	2d00      	cmp	r5, #0
    258e:	462b      	mov	r3, r5
    2590:	bf38      	it	cc
    2592:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    2594:	b12b      	cbz	r3, 25a2 <process_event+0xaa>
				mgr->refs += 1U;
    2596:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2598:	681b      	ldr	r3, [r3, #0]
    259a:	3201      	adds	r2, #1
    259c:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    259e:	2b00      	cmp	r3, #0
    25a0:	d1f8      	bne.n	2594 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    25a2:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    25a6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    25a8:	4620      	mov	r0, r4
    25aa:	f006 fe76 	bl	929a <process_recheck>
    25ae:	4606      	mov	r6, r0
    25b0:	2800      	cmp	r0, #0
    25b2:	d0d1      	beq.n	2558 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    25b4:	8b23      	ldrh	r3, [r4, #24]
    25b6:	f043 0320 	orr.w	r3, r3, #32
    25ba:	8323      	strh	r3, [r4, #24]
    25bc:	e7cb      	b.n	2556 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    25be:	2b04      	cmp	r3, #4
    25c0:	d10c      	bne.n	25dc <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    25c2:	f021 0107 	bic.w	r1, r1, #7
    25c6:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    25c8:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    25ca:	4620      	mov	r0, r4
    25cc:	f006 fe65 	bl	929a <process_recheck>
    25d0:	4605      	mov	r5, r0
    25d2:	2800      	cmp	r0, #0
    25d4:	d0bf      	beq.n	2556 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    25d6:	f041 0120 	orr.w	r1, r1, #32
    25da:	8321      	strh	r1, [r4, #24]
    25dc:	2500      	movs	r5, #0
    25de:	e7ba      	b.n	2556 <process_event+0x5e>
		} else if (evt == EVT_START) {
    25e0:	2803      	cmp	r0, #3
    25e2:	d109      	bne.n	25f8 <process_event+0x100>
			transit = mgr->transitions->start;
    25e4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    25e6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    25ea:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    25ec:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    25f0:	8323      	strh	r3, [r4, #24]
}
    25f2:	2500      	movs	r5, #0
		res = 0;
    25f4:	462f      	mov	r7, r5
    25f6:	e7af      	b.n	2558 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    25f8:	2804      	cmp	r0, #4
    25fa:	d106      	bne.n	260a <process_event+0x112>
			transit = mgr->transitions->stop;
    25fc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    25fe:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    2602:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2604:	f043 0304 	orr.w	r3, r3, #4
    2608:	e7f2      	b.n	25f0 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    260a:	2805      	cmp	r0, #5
    260c:	d106      	bne.n	261c <process_event+0x124>
			transit = mgr->transitions->reset;
    260e:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2610:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    2614:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2616:	f043 0305 	orr.w	r3, r3, #5
    261a:	e7e9      	b.n	25f0 <process_event+0xf8>
    261c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    261e:	462e      	mov	r6, r5
    2620:	e7e8      	b.n	25f4 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    2622:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2624:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    2628:	8321      	strh	r1, [r4, #24]
    262a:	f38b 8811 	msr	BASEPRI, fp
    262e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    2632:	bb03      	cbnz	r3, 2676 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    2634:	2d00      	cmp	r5, #0
    2636:	d133      	bne.n	26a0 <process_event+0x1a8>
			if (transit != NULL) {
    2638:	b116      	cbz	r6, 2640 <process_event+0x148>
				transit(mgr, transition_complete);
    263a:	4921      	ldr	r1, [pc, #132]	; (26c0 <process_event+0x1c8>)
    263c:	4620      	mov	r0, r4
    263e:	47b0      	blx	r6
	__asm__ volatile(
    2640:	f04f 0320 	mov.w	r3, #32
    2644:	f3ef 8b11 	mrs	fp, BASEPRI
    2648:	f383 8812 	msr	BASEPRI_MAX, r3
    264c:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    2650:	8b23      	ldrh	r3, [r4, #24]
    2652:	f023 0308 	bic.w	r3, r3, #8
    2656:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    2658:	8b23      	ldrh	r3, [r4, #24]
    265a:	06da      	lsls	r2, r3, #27
    265c:	d528      	bpl.n	26b0 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    265e:	f023 0310 	bic.w	r3, r3, #16
    2662:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    2664:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    2666:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    266a:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    266e:	2900      	cmp	r1, #0
    2670:	f47f af5b 	bne.w	252a <process_event+0x32>
out:
    2674:	e751      	b.n	251a <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2676:	68a1      	ldr	r1, [r4, #8]
    2678:	2900      	cmp	r1, #0
    267a:	d0db      	beq.n	2634 <process_event+0x13c>
	return node->next;
    267c:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    267e:	f8d1 b004 	ldr.w	fp, [r1, #4]
    2682:	2b00      	cmp	r3, #0
    2684:	bf38      	it	cc
    2686:	2300      	movcc	r3, #0
    2688:	4699      	mov	r9, r3
    268a:	4652      	mov	r2, sl
    268c:	463b      	mov	r3, r7
    268e:	4620      	mov	r0, r4
    2690:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2692:	f1b9 0f00 	cmp.w	r9, #0
    2696:	d0cd      	beq.n	2634 <process_event+0x13c>
    2698:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    269c:	4649      	mov	r1, r9
    269e:	e7ee      	b.n	267e <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    26a0:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    26a2:	463b      	mov	r3, r7
    26a4:	4652      	mov	r2, sl
    26a6:	4620      	mov	r0, r4
    26a8:	682d      	ldr	r5, [r5, #0]
    26aa:	f006 fe12 	bl	92d2 <notify_one>
    26ae:	e7c1      	b.n	2634 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    26b0:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    26b4:	bf1e      	ittt	ne
    26b6:	f023 0320 	bicne.w	r3, r3, #32
    26ba:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    26bc:	2102      	movne	r1, #2
    26be:	e7d2      	b.n	2666 <process_event+0x16e>
    26c0:	000092ff 	.word	0x000092ff

000026c4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    26c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    26c8:	4605      	mov	r5, r0
    26ca:	f04f 0320 	mov.w	r3, #32
    26ce:	f3ef 8611 	mrs	r6, BASEPRI
    26d2:	f383 8812 	msr	BASEPRI_MAX, r3
    26d6:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    26da:	4b10      	ldr	r3, [pc, #64]	; (271c <pm_state_notify+0x58>)
    26dc:	681c      	ldr	r4, [r3, #0]
    26de:	2c00      	cmp	r4, #0
    26e0:	bf38      	it	cc
    26e2:	2400      	movcc	r4, #0
    26e4:	b19c      	cbz	r4, 270e <pm_state_notify+0x4a>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
    26e6:	4f0e      	ldr	r7, [pc, #56]	; (2720 <pm_state_notify+0x5c>)
    26e8:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2724 <pm_state_notify+0x60>
    26ec:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    26f0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    26f4:	2d00      	cmp	r5, #0
    26f6:	bf08      	it	eq
    26f8:	4613      	moveq	r3, r2
		if (callback) {
    26fa:	b12b      	cbz	r3, 2708 <pm_state_notify+0x44>
			callback(z_power_states[_current_cpu->id].state);
    26fc:	f898 2014 	ldrb.w	r2, [r8, #20]
    2700:	fb09 f202 	mul.w	r2, r9, r2
    2704:	5cb8      	ldrb	r0, [r7, r2]
    2706:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2708:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    270a:	2c00      	cmp	r4, #0
    270c:	d1f0      	bne.n	26f0 <pm_state_notify+0x2c>
	__asm__ volatile(
    270e:	f386 8811 	msr	BASEPRI, r6
    2712:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    271a:	bf00      	nop
    271c:	20000bf0 	.word	0x20000bf0
    2720:	20000bfc 	.word	0x20000bfc
    2724:	2000122c 	.word	0x2000122c

00002728 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2728:	f000 031f 	and.w	r3, r0, #31
    272c:	2201      	movs	r2, #1
    272e:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2730:	4b0a      	ldr	r3, [pc, #40]	; (275c <atomic_test_and_set_bit.constprop.0+0x34>)
    2732:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    2736:	0940      	lsrs	r0, r0, #5
    2738:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    273c:	e850 3f00 	ldrex	r3, [r0]
    2740:	ea43 0102 	orr.w	r1, r3, r2
    2744:	e840 1c00 	strex	ip, r1, [r0]
    2748:	f1bc 0f00 	cmp.w	ip, #0
    274c:	d1f6      	bne.n	273c <atomic_test_and_set_bit.constprop.0+0x14>
    274e:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    2752:	421a      	tst	r2, r3
}
    2754:	bf14      	ite	ne
    2756:	2001      	movne	r0, #1
    2758:	2000      	moveq	r0, #0
    275a:	4770      	bx	lr
    275c:	20000c08 	.word	0x20000c08

00002760 <pm_system_resume>:

void pm_system_resume(void)
{
    2760:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    2762:	4b1d      	ldr	r3, [pc, #116]	; (27d8 <pm_system_resume+0x78>)
    2764:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2766:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    276a:	f005 031f 	and.w	r3, r5, #31
    276e:	2201      	movs	r2, #1
    2770:	409a      	lsls	r2, r3
    2772:	4b1a      	ldr	r3, [pc, #104]	; (27dc <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2774:	0969      	lsrs	r1, r5, #5
{
    2776:	b085      	sub	sp, #20
    2778:	43d0      	mvns	r0, r2
    277a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    277e:	e853 1f00 	ldrex	r1, [r3]
    2782:	ea01 0400 	and.w	r4, r1, r0
    2786:	e843 4c00 	strex	ip, r4, [r3]
    278a:	f1bc 0f00 	cmp.w	ip, #0
    278e:	d1f6      	bne.n	277e <pm_system_resume+0x1e>
    2790:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2794:	4211      	tst	r1, r2
    2796:	d017      	beq.n	27c8 <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
    2798:	4c11      	ldr	r4, [pc, #68]	; (27e0 <pm_system_resume+0x80>)
    279a:	220c      	movs	r2, #12
    279c:	fb02 4205 	mla	r2, r2, r5, r4
    27a0:	ca07      	ldmia	r2, {r0, r1, r2}
    27a2:	ab01      	add	r3, sp, #4
    27a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    27a8:	4a0e      	ldr	r2, [pc, #56]	; (27e4 <pm_system_resume+0x84>)
    27aa:	b17a      	cbz	r2, 27cc <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    27ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    27b0:	f008 f856 	bl	a860 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    27b4:	2000      	movs	r0, #0
    27b6:	f7ff ff85 	bl	26c4 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    27ba:	230c      	movs	r3, #12
    27bc:	436b      	muls	r3, r5
    27be:	2200      	movs	r2, #0
    27c0:	18e1      	adds	r1, r4, r3
    27c2:	50e2      	str	r2, [r4, r3]
    27c4:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
    27c8:	b005      	add	sp, #20
    27ca:	bd30      	pop	{r4, r5, pc}
    27cc:	f382 8811 	msr	BASEPRI, r2
    27d0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    27d4:	e7ee      	b.n	27b4 <pm_system_resume+0x54>
    27d6:	bf00      	nop
    27d8:	2000122c 	.word	0x2000122c
    27dc:	20000bf8 	.word	0x20000bf8
    27e0:	20000bfc 	.word	0x20000bfc
    27e4:	0000a861 	.word	0x0000a861

000027e8 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    27e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    27ec:	4b37      	ldr	r3, [pc, #220]	; (28cc <pm_system_suspend+0xe4>)
    27ee:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 28e4 <pm_system_suspend+0xfc>
    27f2:	7d1c      	ldrb	r4, [r3, #20]
{
    27f4:	b088      	sub	sp, #32
    27f6:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    27f8:	4620      	mov	r0, r4
    27fa:	f7ff ff95 	bl	2728 <atomic_test_and_set_bit.constprop.0>
    27fe:	b960      	cbnz	r0, 281a <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    2800:	466e      	mov	r6, sp
    2802:	463a      	mov	r2, r7
    2804:	4621      	mov	r1, r4
    2806:	4630      	mov	r0, r6
    2808:	f006 fe21 	bl	944e <pm_policy_next_state>
    280c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2810:	250c      	movs	r5, #12
    2812:	fb05 8504 	mla	r5, r5, r4, r8
    2816:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    281a:	230c      	movs	r3, #12
    281c:	4363      	muls	r3, r4
    281e:	eb08 0203 	add.w	r2, r8, r3
    2822:	f818 0003 	ldrb.w	r0, [r8, r3]
    2826:	0965      	lsrs	r5, r4, #5
    2828:	f004 061f 	and.w	r6, r4, #31
    282c:	b3c8      	cbz	r0, 28a2 <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    282e:	1c7b      	adds	r3, r7, #1
    2830:	d00f      	beq.n	2852 <pm_system_suspend+0x6a>
			return (uint32_t)((t * to_hz + off) / from_hz);
    2832:	f8d2 e008 	ldr.w	lr, [r2, #8]
    2836:	4826      	ldr	r0, [pc, #152]	; (28d0 <pm_system_suspend+0xe8>)
    2838:	4a26      	ldr	r2, [pc, #152]	; (28d4 <pm_system_suspend+0xec>)
    283a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    283e:	2100      	movs	r1, #0
    2840:	2300      	movs	r3, #0
    2842:	fbec 010e 	umlal	r0, r1, ip, lr
    2846:	f7fe f879 	bl	93c <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    284a:	2101      	movs	r1, #1
    284c:	1a38      	subs	r0, r7, r0
    284e:	f009 f8d8 	bl	ba02 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2852:	f005 f967 	bl	7b24 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    2856:	2001      	movs	r0, #1
    2858:	f7ff ff34 	bl	26c4 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    285c:	f3bf 8f5b 	dmb	ish
    2860:	4b1d      	ldr	r3, [pc, #116]	; (28d8 <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2862:	2201      	movs	r2, #1
    2864:	40b2      	lsls	r2, r6
    2866:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    286a:	e853 1f00 	ldrex	r1, [r3]
    286e:	4311      	orrs	r1, r2
    2870:	e843 1000 	strex	r0, r1, [r3]
    2874:	2800      	cmp	r0, #0
    2876:	d1f8      	bne.n	286a <pm_system_suspend+0x82>
    2878:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    287c:	230c      	movs	r3, #12
    287e:	fb03 8404 	mla	r4, r3, r4, r8
    2882:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    2886:	ab05      	add	r3, sp, #20
    2888:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    288c:	4a13      	ldr	r2, [pc, #76]	; (28dc <pm_system_suspend+0xf4>)
    288e:	b11a      	cbz	r2, 2898 <pm_system_suspend+0xb0>
		pm_power_state_set(info);
    2890:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2894:	f007 ffd1 	bl	a83a <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    2898:	f7ff ff62 	bl	2760 <pm_system_resume>
	k_sched_unlock();
    289c:	f005 fb1c 	bl	7ed8 <k_sched_unlock>
	bool ret = true;
    28a0:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    28a2:	4a0f      	ldr	r2, [pc, #60]	; (28e0 <pm_system_suspend+0xf8>)
    28a4:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    28a8:	2301      	movs	r3, #1
    28aa:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    28ac:	43db      	mvns	r3, r3
    28ae:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    28b2:	e855 2f00 	ldrex	r2, [r5]
    28b6:	401a      	ands	r2, r3
    28b8:	e845 2100 	strex	r1, r2, [r5]
    28bc:	2900      	cmp	r1, #0
    28be:	d1f8      	bne.n	28b2 <pm_system_suspend+0xca>
    28c0:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    28c4:	b008      	add	sp, #32
    28c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    28ca:	bf00      	nop
    28cc:	2000122c 	.word	0x2000122c
    28d0:	000f423f 	.word	0x000f423f
    28d4:	000f4240 	.word	0x000f4240
    28d8:	20000bf8 	.word	0x20000bf8
    28dc:	0000a83b 	.word	0x0000a83b
    28e0:	20000c08 	.word	0x20000c08
    28e4:	20000bfc 	.word	0x20000bfc

000028e8 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    28e8:	680b      	ldr	r3, [r1, #0]
    28ea:	3301      	adds	r3, #1
    28ec:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    28ee:	4b01      	ldr	r3, [pc, #4]	; (28f4 <char_out+0xc>)
    28f0:	681b      	ldr	r3, [r3, #0]
    28f2:	4718      	bx	r3
    28f4:	20000028 	.word	0x20000028

000028f8 <__printk_hook_install>:
	_char_out = fn;
    28f8:	4b01      	ldr	r3, [pc, #4]	; (2900 <__printk_hook_install+0x8>)
    28fa:	6018      	str	r0, [r3, #0]
}
    28fc:	4770      	bx	lr
    28fe:	bf00      	nop
    2900:	20000028 	.word	0x20000028

00002904 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    2904:	b507      	push	{r0, r1, r2, lr}
    2906:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    2908:	2100      	movs	r1, #0
{
    290a:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    290c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    290e:	4803      	ldr	r0, [pc, #12]	; (291c <vprintk+0x18>)
    2910:	a901      	add	r1, sp, #4
    2912:	f7fe faef 	bl	ef4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    2916:	b003      	add	sp, #12
    2918:	f85d fb04 	ldr.w	pc, [sp], #4
    291c:	000028e9 	.word	0x000028e9

00002920 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    2920:	b530      	push	{r4, r5, lr}
    2922:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    2924:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    2928:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    292a:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    292c:	a901      	add	r1, sp, #4
    292e:	4805      	ldr	r0, [pc, #20]	; (2944 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    2930:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    2932:	f7fe fadf 	bl	ef4 <cbvprintf>

	if (ctx.count < ctx.max) {
    2936:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    293a:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    293c:	bfb8      	it	lt
    293e:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    2940:	b005      	add	sp, #20
    2942:	bd30      	pop	{r4, r5, pc}
    2944:	000093f5 	.word	0x000093f5

00002948 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    2948:	b508      	push	{r3, lr}
	__asm__ volatile(
    294a:	f04f 0220 	mov.w	r2, #32
    294e:	f3ef 8311 	mrs	r3, BASEPRI
    2952:	f382 8812 	msr	BASEPRI_MAX, r2
    2956:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    295a:	f001 ffa3 	bl	48a4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    295e:	4803      	ldr	r0, [pc, #12]	; (296c <sys_reboot+0x24>)
    2960:	f006 fd5b 	bl	941a <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    2964:	f001 fbc0 	bl	40e8 <arch_cpu_idle>
    2968:	e7fc      	b.n	2964 <sys_reboot+0x1c>
    296a:	bf00      	nop
    296c:	0000ccba 	.word	0x0000ccba

00002970 <shell_internal_help_print>:
	shell->ctx->cmd_buff_pos = 0;
	shell->ctx->cmd_buff_len = 0;
}

static void shell_internal_help_print(const struct shell *shell)
{
    2970:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP)) {
		return;
	}

	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
    2972:	6881      	ldr	r1, [r0, #8]
{
    2974:	4604      	mov	r4, r0
	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
    2976:	3108      	adds	r1, #8
    2978:	f001 f8f0 	bl	3b5c <z_shell_help_cmd_print>
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
    297c:	68a1      	ldr	r1, [r4, #8]
    297e:	4a03      	ldr	r2, [pc, #12]	; (298c <shell_internal_help_print+0x1c>)
    2980:	4620      	mov	r0, r4
    2982:	3108      	adds	r1, #8
				  "Subcommands:\n");
}
    2984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
    2988:	f001 b88a 	b.w	3aa0 <z_shell_help_subcmd_print>
    298c:	0000cce3 	.word	0x0000cce3

00002990 <history_handle>:

	z_shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
    2990:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2992:	4604      	mov	r4, r0
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (z_flag_history_exit_get(shell)) {
    2994:	6880      	ldr	r0, [r0, #8]
	return ret;
}

static inline bool z_flag_history_exit_get(const struct shell *sh)
{
	return sh->ctx->ctx.flags.history_exit == 1;
    2996:	f8d0 33a4 	ldr.w	r3, [r0, #932]	; 0x3a4
    299a:	075a      	lsls	r2, r3, #29
{
    299c:	460d      	mov	r5, r1
	if (z_flag_history_exit_get(shell)) {
    299e:	d505      	bpl.n	29ac <history_handle+0x1c>
		z_flag_history_exit_set(shell, false);
    29a0:	2100      	movs	r1, #0
    29a2:	f006 fe85 	bl	96b0 <z_flag_history_exit_set.isra.0>
		z_shell_history_mode_exit(shell->history);
    29a6:	68e0      	ldr	r0, [r4, #12]
    29a8:	f006 ffd1 	bl	994e <z_shell_history_mode_exit>
	}

	/* Backup command if history is entered */
	if (!z_shell_history_active(shell->history)) {
    29ac:	68e3      	ldr	r3, [r4, #12]
    29ae:	68db      	ldr	r3, [r3, #12]
    29b0:	b96b      	cbnz	r3, 29ce <history_handle+0x3e>
		if (up) {
    29b2:	2d00      	cmp	r5, #0
    29b4:	d037      	beq.n	2a26 <history_handle+0x96>
			uint16_t cmd_len = z_shell_strlen(shell->ctx->cmd_buff);
    29b6:	68a0      	ldr	r0, [r4, #8]
    29b8:	3042      	adds	r0, #66	; 0x42
    29ba:	f006 fe66 	bl	968a <z_shell_strlen>

			if (cmd_len) {
    29be:	68a3      	ldr	r3, [r4, #8]
    29c0:	b398      	cbz	r0, 2a2a <history_handle+0x9a>
				strcpy(shell->ctx->temp_buff,
    29c2:	f103 0142 	add.w	r1, r3, #66	; 0x42
    29c6:	f503 70f1 	add.w	r0, r3, #482	; 0x1e2
    29ca:	f007 fd96 	bl	a4fa <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = z_shell_history_get(shell->history, up,
					   shell->ctx->cmd_buff, &len);
    29ce:	68a2      	ldr	r2, [r4, #8]
	history_mode = z_shell_history_get(shell->history, up,
    29d0:	68e0      	ldr	r0, [r4, #12]
    29d2:	f10d 0306 	add.w	r3, sp, #6
    29d6:	3242      	adds	r2, #66	; 0x42
    29d8:	4629      	mov	r1, r5
    29da:	f006 ffbb 	bl	9954 <z_shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
    29de:	b958      	cbnz	r0, 29f8 <history_handle+0x68>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
    29e0:	68a0      	ldr	r0, [r4, #8]
    29e2:	f500 71f1 	add.w	r1, r0, #482	; 0x1e2
    29e6:	3042      	adds	r0, #66	; 0x42
    29e8:	f007 fd87 	bl	a4fa <strcpy>
		len = z_shell_strlen(shell->ctx->cmd_buff);
    29ec:	68a0      	ldr	r0, [r4, #8]
    29ee:	3042      	adds	r0, #66	; 0x42
    29f0:	f006 fe4b 	bl	968a <z_shell_strlen>
    29f4:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	z_shell_op_cursor_home_move(shell);
    29f8:	4620      	mov	r0, r4
    29fa:	f007 f8e7 	bl	9bcc <z_shell_op_cursor_home_move>
/* Function sends VT100 command to clear the screen from cursor position to
 * end of the screen.
 */
static inline void z_clear_eos(const struct shell *sh)
{
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    29fe:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
    2a00:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    2a04:	069b      	lsls	r3, r3, #26
    2a06:	d503      	bpl.n	2a10 <history_handle+0x80>
    2a08:	4909      	ldr	r1, [pc, #36]	; (2a30 <history_handle+0xa0>)
    2a0a:	6960      	ldr	r0, [r4, #20]
    2a0c:	f006 fe43 	bl	9696 <z_shell_raw_fprintf>
	z_clear_eos(shell);
	z_shell_print_cmd(shell);
    2a10:	4620      	mov	r0, r4
    2a12:	f001 f951 	bl	3cb8 <z_shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
    2a16:	68a3      	ldr	r3, [r4, #8]
    2a18:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
	shell->ctx->cmd_buff_len = len;
    2a1e:	879a      	strh	r2, [r3, #60]	; 0x3c
	z_shell_op_cond_next_line(shell);
    2a20:	4620      	mov	r0, r4
    2a22:	f001 f90b 	bl	3c3c <z_shell_op_cond_next_line>
}
    2a26:	b003      	add	sp, #12
    2a28:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
    2a2a:	f883 01e2 	strb.w	r0, [r3, #482]	; 0x1e2
    2a2e:	e7ce      	b.n	29ce <history_handle+0x3e>
    2a30:	0000be10 	.word	0x0000be10

00002a34 <state_set.constprop.0>:
	shell->ctx->state = state;
    2a34:	6883      	ldr	r3, [r0, #8]
    2a36:	2202      	movs	r2, #2
static inline void state_set(const struct shell *shell, enum shell_state state)
    2a38:	b510      	push	{r4, lr}
	shell->ctx->state = state;
    2a3a:	711a      	strb	r2, [r3, #4]
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
    2a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
static inline void state_set(const struct shell *shell, enum shell_state state)
    2a3e:	4604      	mov	r4, r0
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
    2a40:	b9cb      	cbnz	r3, 2a76 <state_set.constprop.0+0x42>
		cmd_buffer_clear(shell);
    2a42:	6882      	ldr	r2, [r0, #8]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    2a44:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
    2a48:	63d3      	str	r3, [r2, #60]	; 0x3c
		if (z_flag_print_noinit_get(shell)) {
    2a4a:	6883      	ldr	r3, [r0, #8]
	return sh->ctx->ctx.flags.print_noinit == 1;
    2a4c:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
    2a50:	04db      	lsls	r3, r3, #19
    2a52:	d50b      	bpl.n	2a6c <state_set.constprop.0+0x38>
			z_shell_fprintf(shell, SHELL_WARNING, "%s",
    2a54:	2103      	movs	r1, #3
    2a56:	4b08      	ldr	r3, [pc, #32]	; (2a78 <state_set.constprop.0+0x44>)
    2a58:	4a08      	ldr	r2, [pc, #32]	; (2a7c <state_set.constprop.0+0x48>)
    2a5a:	f007 f967 	bl	9d2c <z_shell_fprintf>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
    2a5e:	68a0      	ldr	r0, [r4, #8]
    2a60:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    2a64:	f500 7069 	add.w	r0, r0, #932	; 0x3a4
    2a68:	f006 fdc3 	bl	95f2 <atomic_and>
		z_shell_print_prompt_and_cmd(shell);
    2a6c:	4620      	mov	r0, r4
}
    2a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_print_prompt_and_cmd(shell);
    2a72:	f001 ba3b 	b.w	3eec <z_shell_print_prompt_and_cmd>
}
    2a76:	bd10      	pop	{r4, pc}
    2a78:	0000ccf1 	.word	0x0000ccf1
    2a7c:	0000c7e7 	.word	0x0000c7e7

00002a80 <execute>:
 * the command handler without any preprocessing.
 * Because of that feature, command buffer is processed argument by argument and
 * decision on further processing is based on currently processed command.
 */
static int execute(const struct shell *shell)
{
    2a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct shell_static_entry dloc; /* Memory for dynamic commands. */
	const char *argv[CONFIG_SHELL_ARGC_MAX + 1]; /* +1 reserved for NULL */
	const struct shell_static_entry *parent = selected_cmd_get(shell);
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry help_entry;
	size_t cmd_lvl = 0;
    2a84:	2300      	movs	r3, #0
{
    2a86:	b0ad      	sub	sp, #180	; 0xb4
	size_t cmd_with_handler_lvl = 0;
	bool wildcard_found = false;
	size_t argc = 0, args_left = SIZE_MAX;
    2a88:	e9cd 3305 	strd	r3, r3, [sp, #20]
	char quote;
	const char **argvp;
	char *cmd_buf = shell->ctx->cmd_buff;
    2a8c:	6883      	ldr	r3, [r0, #8]
{
    2a8e:	4604      	mov	r4, r0
	char *cmd_buf = shell->ctx->cmd_buff;
    2a90:	3342      	adds	r3, #66	; 0x42
    2a92:	9303      	str	r3, [sp, #12]
	bool has_last_handler = false;

	z_shell_op_cursor_end_move(shell);
    2a94:	f007 f8a0 	bl	9bd8 <z_shell_op_cursor_end_move>
	if (!z_shell_cursor_in_empty_line(shell)) {
    2a98:	4620      	mov	r0, r4
    2a9a:	f007 f825 	bl	9ae8 <z_shell_cursor_in_empty_line>
    2a9e:	b918      	cbnz	r0, 2aa8 <execute+0x28>
/* Function forcing new line - cannot be replaced with function
 * cursor_down_move.
 */
static inline void z_cursor_next_line_move(const struct shell *sh)
{
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    2aa0:	499f      	ldr	r1, [pc, #636]	; (2d20 <execute+0x2a0>)
    2aa2:	6960      	ldr	r0, [r4, #20]
    2aa4:	f006 fdf7 	bl	9696 <z_shell_raw_fprintf>
		z_cursor_next_line_move(shell);
	}

	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));
    2aa8:	68a0      	ldr	r0, [r4, #8]
    2aaa:	2214      	movs	r2, #20
    2aac:	2100      	movs	r1, #0
    2aae:	3008      	adds	r0, #8
    2ab0:	f007 fdab 	bl	a60a <memset>

	if (IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		z_shell_cmd_trim(shell);
    2ab4:	4620      	mov	r0, r4
    2ab6:	f007 fc21 	bl	a2fc <z_shell_cmd_trim>
		history_put(shell, shell->ctx->cmd_buff,
    2aba:	68a1      	ldr	r1, [r4, #8]
	z_shell_history_put(shell->history, line, length);
    2abc:	68e0      	ldr	r0, [r4, #12]
    2abe:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
    2ac0:	3142      	adds	r1, #66	; 0x42
		argvp = &argv[1];
		active_cmd_prepare(parent, &shell->ctx->active_cmd, &help_entry,
				   &cmd_lvl, &cmd_with_handler_lvl, &args_left);
		cmd_lvl++;
	} else {
		help_entry.help = NULL;
    2ac2:	2600      	movs	r6, #0
	z_shell_history_put(shell->history, line, length);
    2ac4:	f006 ff7d 	bl	99c2 <z_shell_history_put>
		z_shell_wildcard_prepare(shell);
    2ac8:	4620      	mov	r0, r4
    2aca:	f007 fc91 	bl	a3f0 <z_shell_wildcard_prepare>
	size_t argc = 0, args_left = SIZE_MAX;
    2ace:	f04f 38ff 	mov.w	r8, #4294967295
	size_t cmd_with_handler_lvl = 0;
    2ad2:	46b1      	mov	r9, r6
		z_shell_wildcard_prepare(shell);
    2ad4:	46b2      	mov	sl, r6
    2ad6:	af11      	add	r7, sp, #68	; 0x44
    2ad8:	9602      	str	r6, [sp, #8]
    2ada:	4635      	mov	r5, r6
    2adc:	46b3      	mov	fp, r6
		argvp = &argv[0];
	}

	/* Below loop is analyzing subcommands of found root command. */
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
    2ade:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    2ae2:	2a01      	cmp	r2, #1
    2ae4:	f000 80d7 	beq.w	2c96 <execute+0x216>
    2ae8:	2b19      	cmp	r3, #25
    2aea:	f240 80af 	bls.w	2c4c <execute+0x1cc>
			cmd_lvl++;
		}

	}

	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
    2aee:	9b06      	ldr	r3, [sp, #24]
    2af0:	2b02      	cmp	r3, #2
    2af2:	f040 80af 	bne.w	2c54 <execute+0x1d4>
		/* argc == 2 indicates that when command string was parsed
		 * there was more characters remaining. It means that number of
		 * arguments exceeds the limit.
		 */
		z_shell_fprintf(shell, SHELL_ERROR, "%s\n",
    2af6:	4b8b      	ldr	r3, [pc, #556]	; (2d24 <execute+0x2a4>)
    2af8:	4a8b      	ldr	r2, [pc, #556]	; (2d28 <execute+0x2a8>)
    2afa:	2101      	movs	r1, #1
    2afc:	e014      	b.n	2b28 <execute+0xa8>
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
    2afe:	9a03      	ldr	r2, [sp, #12]
    2b00:	2302      	movs	r3, #2
    2b02:	4639      	mov	r1, r7
    2b04:	a806      	add	r0, sp, #24
    2b06:	f007 fa8a 	bl	a01e <z_shell_make_argv>
		if (argc == 0) {
    2b0a:	9906      	ldr	r1, [sp, #24]
		cmd_buf = (char *)argvp[1];
    2b0c:	687a      	ldr	r2, [r7, #4]
    2b0e:	9203      	str	r2, [sp, #12]
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
    2b10:	4603      	mov	r3, r0
		if (argc == 0) {
    2b12:	b929      	cbnz	r1, 2b20 <execute+0xa0>
			return -ENOEXEC;
    2b14:	f06f 0507 	mvn.w	r5, #7
	/* terminate arguments with NULL */
	argv[cmd_lvl] = NULL;
	/* Executing the deepest found handler. */
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
			&argv[cmd_with_handler_lvl], &help_entry);
}
    2b18:	4628      	mov	r0, r5
    2b1a:	b02d      	add	sp, #180	; 0xb4
    2b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ((argc == 1) && (quote != 0)) {
    2b20:	2901      	cmp	r1, #1
    2b22:	d105      	bne.n	2b30 <execute+0xb0>
    2b24:	b120      	cbz	r0, 2b30 <execute+0xb0>
			z_shell_fprintf(shell, SHELL_ERROR,
    2b26:	4a81      	ldr	r2, [pc, #516]	; (2d2c <execute+0x2ac>)
    2b28:	4620      	mov	r0, r4
    2b2a:	f007 f8ff 	bl	9d2c <z_shell_fprintf>
    2b2e:	e7f1      	b.n	2b14 <execute+0x94>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    2b30:	9b05      	ldr	r3, [sp, #20]
    2b32:	b34b      	cbz	r3, 2b88 <execute+0x108>
		    z_shell_help_request(argvp[0])) {
    2b34:	6838      	ldr	r0, [r7, #0]
    2b36:	f001 f835 	bl	3ba4 <z_shell_help_request>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    2b3a:	b198      	cbz	r0, 2b64 <execute+0xe4>
			if (help_entry.help) {
    2b3c:	b166      	cbz	r6, 2b58 <execute+0xd8>
				shell->ctx->active_cmd = help_entry;
    2b3e:	68a5      	ldr	r5, [r4, #8]
    2b40:	960d      	str	r6, [sp, #52]	; 0x34
    2b42:	3508      	adds	r5, #8
				shell->ctx->active_cmd = *help_entry;
    2b44:	ae0c      	add	r6, sp, #48	; 0x30
    2b46:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2b48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2b4a:	6833      	ldr	r3, [r6, #0]
    2b4c:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
    2b4e:	4620      	mov	r0, r4
    2b50:	f7ff ff0e 	bl	2970 <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
    2b54:	2501      	movs	r5, #1
    2b56:	e7df      	b.n	2b18 <execute+0x98>
			z_shell_fprintf(shell, SHELL_ERROR,
    2b58:	4a75      	ldr	r2, [pc, #468]	; (2d30 <execute+0x2b0>)
		z_shell_fprintf(shell, SHELL_ERROR,
    2b5a:	2101      	movs	r1, #1
    2b5c:	4620      	mov	r0, r4
    2b5e:	f007 f8e5 	bl	9d2c <z_shell_fprintf>
		return false;
    2b62:	e7d7      	b.n	2b14 <execute+0x94>
		if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && (cmd_lvl > 0)) {
    2b64:	9b05      	ldr	r3, [sp, #20]
    2b66:	b17b      	cbz	r3, 2b88 <execute+0x108>
			status = z_shell_wildcard_process(shell, entry,
    2b68:	683a      	ldr	r2, [r7, #0]
    2b6a:	4629      	mov	r1, r5
    2b6c:	4620      	mov	r0, r4
    2b6e:	f001 fa41 	bl	3ff4 <z_shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
    2b72:	2802      	cmp	r0, #2
    2b74:	f000 808f 	beq.w	2c96 <execute+0x216>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
    2b78:	2803      	cmp	r0, #3
    2b7a:	d005      	beq.n	2b88 <execute+0x108>
				++cmd_lvl;
    2b7c:	9b05      	ldr	r3, [sp, #20]
    2b7e:	3301      	adds	r3, #1
    2b80:	9305      	str	r3, [sp, #20]
				wildcard_found = true;
    2b82:	2301      	movs	r3, #1
    2b84:	9302      	str	r3, [sp, #8]
				continue;
    2b86:	e7aa      	b.n	2ade <execute+0x5e>
		if (has_last_handler == false) {
    2b88:	f1ba 0f00 	cmp.w	sl, #0
    2b8c:	d105      	bne.n	2b9a <execute+0x11a>
			entry = z_shell_find_cmd(parent, argvp[0], &dloc);
    2b8e:	6839      	ldr	r1, [r7, #0]
    2b90:	aa07      	add	r2, sp, #28
    2b92:	4658      	mov	r0, fp
    2b94:	f007 fb2e 	bl	a1f4 <z_shell_find_cmd>
    2b98:	4605      	mov	r5, r0
		argvp++;
    2b9a:	3704      	adds	r7, #4
		args_left--;
    2b9c:	f108 38ff 	add.w	r8, r8, #4294967295
		if (entry) {
    2ba0:	2d00      	cmp	r5, #0
    2ba2:	d041      	beq.n	2c28 <execute+0x1a8>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
    2ba4:	9b02      	ldr	r3, [sp, #8]
    2ba6:	b14b      	cbz	r3, 2bbc <execute+0x13c>
    2ba8:	68eb      	ldr	r3, [r5, #12]
    2baa:	b13b      	cbz	r3, 2bbc <execute+0x13c>
		z_shell_op_cursor_end_move(shell);
    2bac:	4620      	mov	r0, r4
    2bae:	f007 f813 	bl	9bd8 <z_shell_op_cursor_end_move>
		z_shell_op_cond_next_line(shell);
    2bb2:	4620      	mov	r0, r4
    2bb4:	f001 f842 	bl	3c3c <z_shell_op_cond_next_line>
		z_shell_fprintf(shell, SHELL_ERROR,
    2bb8:	4a5e      	ldr	r2, [pc, #376]	; (2d34 <execute+0x2b4>)
    2bba:	e7ce      	b.n	2b5a <execute+0xda>
	if (entry->handler) {
    2bbc:	68eb      	ldr	r3, [r5, #12]
    2bbe:	b1cb      	cbz	r3, 2bf4 <execute+0x174>
		*active_cmd = *entry;
    2bc0:	68a3      	ldr	r3, [r4, #8]
    2bc2:	f8dd 9014 	ldr.w	r9, [sp, #20]
    2bc6:	46ae      	mov	lr, r5
    2bc8:	f103 0c08 	add.w	ip, r3, #8
    2bcc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    2bd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2bd4:	f8de 3000 	ldr.w	r3, [lr]
    2bd8:	f8cc 3000 	str.w	r3, [ip]
		if ((entry->subcmd == NULL)
    2bdc:	68ab      	ldr	r3, [r5, #8]
    2bde:	b94b      	cbnz	r3, 2bf4 <execute+0x174>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
    2be0:	7c6b      	ldrb	r3, [r5, #17]
    2be2:	2bfe      	cmp	r3, #254	; 0xfe
			*args_left = entry->args.mandatory - 1;
    2be4:	bf01      	itttt	eq
    2be6:	f895 8010 	ldrbeq.w	r8, [r5, #16]
			*lvl = *lvl + 1;
    2bea:	f109 0301 	addeq.w	r3, r9, #1
			*args_left = entry->args.mandatory - 1;
    2bee:	f108 38ff 	addeq.w	r8, r8, #4294967295
			*lvl = *lvl + 1;
    2bf2:	9305      	streq	r3, [sp, #20]
	if (entry->help) {
    2bf4:	f8d5 c004 	ldr.w	ip, [r5, #4]
    2bf8:	f1bc 0f00 	cmp.w	ip, #0
    2bfc:	d008      	beq.n	2c10 <execute+0x190>
		*help_entry = *entry;
    2bfe:	46ae      	mov	lr, r5
    2c00:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    2c04:	ae0c      	add	r6, sp, #48	; 0x30
    2c06:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2c08:	f8de 3000 	ldr.w	r3, [lr]
    2c0c:	6033      	str	r3, [r6, #0]
    2c0e:	4666      	mov	r6, ip
    2c10:	46ab      	mov	fp, r5
		if (args_left || (argc == 2)) {
    2c12:	f1b8 0f00 	cmp.w	r8, #0
    2c16:	d103      	bne.n	2c20 <execute+0x1a0>
    2c18:	9b06      	ldr	r3, [sp, #24]
    2c1a:	2b02      	cmp	r3, #2
    2c1c:	f47f af5f 	bne.w	2ade <execute+0x5e>
			cmd_lvl++;
    2c20:	9b05      	ldr	r3, [sp, #20]
    2c22:	3301      	adds	r3, #1
    2c24:	9305      	str	r3, [sp, #20]
    2c26:	e75a      	b.n	2ade <execute+0x5e>
			if (cmd_lvl == 0 &&
    2c28:	9b05      	ldr	r3, [sp, #20]
    2c2a:	b963      	cbnz	r3, 2c46 <execute+0x1c6>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
}

static inline bool z_shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
    2c2c:	68a3      	ldr	r3, [r4, #8]
    2c2e:	69db      	ldr	r3, [r3, #28]
    2c30:	b10b      	cbz	r3, 2c36 <execute+0x1b6>
				(!z_shell_in_select_mode(shell) ||
    2c32:	68db      	ldr	r3, [r3, #12]
    2c34:	b93b      	cbnz	r3, 2c46 <execute+0x1c6>
				z_shell_fprintf(shell, SHELL_ERROR,
    2c36:	4b40      	ldr	r3, [pc, #256]	; (2d38 <execute+0x2b8>)
    2c38:	9300      	str	r3, [sp, #0]
    2c3a:	4a40      	ldr	r2, [pc, #256]	; (2d3c <execute+0x2bc>)
    2c3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2c3e:	2101      	movs	r1, #1
    2c40:	4620      	mov	r0, r4
    2c42:	f007 f873 	bl	9d2c <z_shell_fprintf>
			has_last_handler = true;
    2c46:	f04f 0a01 	mov.w	sl, #1
    2c4a:	e7e2      	b.n	2c12 <execute+0x192>
		&& args_left > 0) {
    2c4c:	f1b8 0f00 	cmp.w	r8, #0
    2c50:	f47f af55 	bne.w	2afe <execute+0x7e>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
    2c54:	9b02      	ldr	r3, [sp, #8]
    2c56:	b14b      	cbz	r3, 2c6c <execute+0x1ec>
		z_shell_wildcard_finalize(shell);
    2c58:	4620      	mov	r0, r4
    2c5a:	f007 fbee 	bl	a43a <z_shell_wildcard_finalize>
					shell->ctx->cmd_buff,
    2c5e:	68a2      	ldr	r2, [r4, #8]
		(void)z_shell_make_argv(&cmd_lvl,
    2c60:	231a      	movs	r3, #26
    2c62:	3242      	adds	r2, #66	; 0x42
    2c64:	a911      	add	r1, sp, #68	; 0x44
    2c66:	a805      	add	r0, sp, #20
    2c68:	f007 f9d9 	bl	a01e <z_shell_make_argv>
	argv[cmd_lvl] = NULL;
    2c6c:	9d05      	ldr	r5, [sp, #20]
	if (shell->ctx->active_cmd.handler == NULL) {
    2c6e:	68a0      	ldr	r0, [r4, #8]
	argv[cmd_lvl] = NULL;
    2c70:	ab2c      	add	r3, sp, #176	; 0xb0
    2c72:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    2c76:	2200      	movs	r2, #0
    2c78:	f843 2c6c 	str.w	r2, [r3, #-108]
	if (shell->ctx->active_cmd.handler == NULL) {
    2c7c:	6943      	ldr	r3, [r0, #20]
    2c7e:	b973      	cbnz	r3, 2c9e <execute+0x21e>
			if (help_entry->help == NULL) {
    2c80:	2e00      	cmp	r6, #0
    2c82:	f43f af47 	beq.w	2b14 <execute+0x94>
			if (help_entry->help != shell->ctx->active_cmd.help) {
    2c86:	68c3      	ldr	r3, [r0, #12]
    2c88:	42b3      	cmp	r3, r6
    2c8a:	f43f af60 	beq.w	2b4e <execute+0xce>
				shell->ctx->active_cmd = *help_entry;
    2c8e:	960d      	str	r6, [sp, #52]	; 0x34
    2c90:	f100 0508 	add.w	r5, r0, #8
    2c94:	e756      	b.n	2b44 <execute+0xc4>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
    2c96:	9b05      	ldr	r3, [sp, #20]
    2c98:	2b19      	cmp	r3, #25
    2c9a:	d9db      	bls.n	2c54 <execute+0x1d4>
    2c9c:	e727      	b.n	2aee <execute+0x6e>
	if (shell->ctx->active_cmd.args.mandatory) {
    2c9e:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
    2ca0:	eba5 0509 	sub.w	r5, r5, r9
	if (shell->ctx->active_cmd.args.mandatory) {
    2ca4:	b1b3      	cbz	r3, 2cd4 <execute+0x254>
		uint8_t opt8 = shell->ctx->active_cmd.args.optional;
    2ca6:	7e42      	ldrb	r2, [r0, #25]
				UINT16_MAX : opt8;
    2ca8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2cac:	2aff      	cmp	r2, #255	; 0xff
    2cae:	bf08      	it	eq
    2cb0:	460a      	moveq	r2, r1
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
    2cb2:	429d      	cmp	r5, r3
    2cb4:	d302      	bcc.n	2cbc <execute+0x23c>
    2cb6:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
    2cb8:	429d      	cmp	r5, r3
    2cba:	d90b      	bls.n	2cd4 <execute+0x254>
		z_shell_fprintf(shell, SHELL_ERROR,
    2cbc:	6883      	ldr	r3, [r0, #8]
    2cbe:	4a20      	ldr	r2, [pc, #128]	; (2d40 <execute+0x2c0>)
    2cc0:	2101      	movs	r1, #1
    2cc2:	4620      	mov	r0, r4
    2cc4:	f007 f832 	bl	9d2c <z_shell_fprintf>
			shell_internal_help_print(shell);
    2cc8:	4620      	mov	r0, r4
    2cca:	f7ff fe51 	bl	2970 <shell_internal_help_print>
		return -EINVAL;
    2cce:	f06f 0515 	mvn.w	r5, #21
    2cd2:	e721      	b.n	2b18 <execute+0x98>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, cmd_ctx, val, ret);
    2cd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2cd8:	f500 7069 	add.w	r0, r0, #932	; 0x3a4
    2cdc:	f006 fc7a 	bl	95d4 <atomic_or>
		k_mutex_unlock(&shell->ctx->wr_mtx);
    2ce0:	68a0      	ldr	r0, [r4, #8]
    2ce2:	f500 6087 	add.w	r0, r0, #1080	; 0x438
    2ce6:	f006 fcce 	bl	9686 <k_mutex_unlock>
		ret_val = shell->ctx->active_cmd.handler(shell, argc,
    2cea:	68a3      	ldr	r3, [r4, #8]
    2cec:	aa11      	add	r2, sp, #68	; 0x44
    2cee:	4629      	mov	r1, r5
    2cf0:	eb02 0289 	add.w	r2, r2, r9, lsl #2
    2cf4:	695b      	ldr	r3, [r3, #20]
    2cf6:	4620      	mov	r0, r4
    2cf8:	4798      	blx	r3
    2cfa:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    2cfc:	68a0      	ldr	r0, [r4, #8]
    2cfe:	f04f 32ff 	mov.w	r2, #4294967295
    2d02:	f04f 33ff 	mov.w	r3, #4294967295
    2d06:	f500 6087 	add.w	r0, r0, #1080	; 0x438
    2d0a:	f006 fcfb 	bl	9704 <k_mutex_lock.constprop.0>
    2d0e:	68a0      	ldr	r0, [r4, #8]
    2d10:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    2d14:	f500 7069 	add.w	r0, r0, #932	; 0x3a4
    2d18:	f006 fc6b 	bl	95f2 <atomic_and>
	return ret;
    2d1c:	e6fc      	b.n	2b18 <execute+0x98>
    2d1e:	bf00      	nop
    2d20:	0000cb45 	.word	0x0000cb45
    2d24:	0000cdaa 	.word	0x0000cdaa
    2d28:	0000c7ec 	.word	0x0000c7ec
    2d2c:	0000cd35 	.word	0x0000cd35
    2d30:	0000cd49 	.word	0x0000cd49
    2d34:	0000cd67 	.word	0x0000cd67
    2d38:	0000cd96 	.word	0x0000cd96
    2d3c:	0000cff7 	.word	0x0000cff7
    2d40:	0000cdce 	.word	0x0000cdce

00002d44 <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
    2d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d48:	4604      	mov	r4, r0
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, processing, val, ret);
    2d4a:	6880      	ldr	r0, [r0, #8]
    2d4c:	b0b9      	sub	sp, #228	; 0xe4
    2d4e:	2101      	movs	r1, #1
    2d50:	f500 7069 	add.w	r0, r0, #932	; 0x3a4
    2d54:	f006 fc3e 	bl	95d4 <atomic_or>
	__ASSERT_NO_MSG(shell->ctx);

	/* atomically set the processing flag */
	z_flag_processing_set(shell, true);

	switch (shell->ctx->state) {
    2d58:	68a3      	ldr	r3, [r4, #8]
    2d5a:	791b      	ldrb	r3, [r3, #4]
    2d5c:	2b02      	cmp	r3, #2
    2d5e:	d117      	bne.n	2d90 <shell_process+0x4c>
	size_t count = 0;
    2d60:	2300      	movs	r3, #0
    2d62:	930b      	str	r3, [sp, #44]	; 0x2c
		shell_bypass_cb_t bypass = shell->ctx->bypass;
    2d64:	68a3      	ldr	r3, [r4, #8]
    2d66:	6860      	ldr	r0, [r4, #4]
    2d68:	6b9e      	ldr	r6, [r3, #56]	; 0x38
		if (bypass) {
    2d6a:	6803      	ldr	r3, [r0, #0]
    2d6c:	691d      	ldr	r5, [r3, #16]
			(void)shell->iface->api->read(shell->iface, buf,
    2d6e:	ab0b      	add	r3, sp, #44	; 0x2c
		if (bypass) {
    2d70:	b1c6      	cbz	r6, 2da4 <shell_process+0x60>
			(void)shell->iface->api->read(shell->iface, buf,
    2d72:	2210      	movs	r2, #16
    2d74:	a91d      	add	r1, sp, #116	; 0x74
    2d76:	47a8      	blx	r5
			if (count) {
    2d78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2d7a:	b14a      	cbz	r2, 2d90 <shell_process+0x4c>
				bypass(shell, buf, count);
    2d7c:	a91d      	add	r1, sp, #116	; 0x74
    2d7e:	4620      	mov	r0, r4
    2d80:	47b0      	blx	r6
				if (!(volatile shell_bypass_cb_t *)shell->ctx->bypass) {
    2d82:	68a3      	ldr	r3, [r4, #8]
    2d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2d86:	2b00      	cmp	r3, #0
    2d88:	d1ec      	bne.n	2d64 <shell_process+0x20>
					state_set(shell, SHELL_STATE_ACTIVE);
    2d8a:	4620      	mov	r0, r4
    2d8c:	f7ff fe52 	bl	2a34 <state_set.constprop.0>
    2d90:	68a0      	ldr	r0, [r4, #8]
    2d92:	f06f 0101 	mvn.w	r1, #1
    2d96:	f500 7069 	add.w	r0, r0, #932	; 0x3a4
    2d9a:	f006 fc2a 	bl	95f2 <atomic_and>
		break;
	}

	/* atomically clear the processing flag */
	z_flag_processing_set(shell, false);
}
    2d9e:	b039      	add	sp, #228	; 0xe4
    2da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(void)shell->iface->api->read(shell->iface, &data,
    2da4:	2201      	movs	r2, #1
    2da6:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
    2daa:	47a8      	blx	r5
		if (count == 0) {
    2dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2dae:	2b00      	cmp	r3, #0
    2db0:	d0ee      	beq.n	2d90 <shell_process+0x4c>
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    2db2:	f99d 202b 	ldrsb.w	r2, [sp, #43]	; 0x2b
		if (ascii_filter(data) != 0) {
    2db6:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    2dba:	68a0      	ldr	r0, [r4, #8]
    2dbc:	2a00      	cmp	r2, #0
    2dbe:	dbd1      	blt.n	2d64 <shell_process+0x20>
		switch (shell->ctx->receive_state) {
    2dc0:	7942      	ldrb	r2, [r0, #5]
    2dc2:	2a03      	cmp	r2, #3
    2dc4:	f200 8301 	bhi.w	33ca <shell_process+0x686>
    2dc8:	e8df f012 	tbh	[pc, r2, lsl #1]
    2dcc:	02810004 	.word	0x02810004
    2dd0:	02ff0298 	.word	0x02ff0298
	if ((data != '\r') && (data != '\n')) {
    2dd4:	2b0d      	cmp	r3, #13
    2dd6:	d01a      	beq.n	2e0e <shell_process+0xca>
    2dd8:	2b0a      	cmp	r3, #10
    2dda:	d018      	beq.n	2e0e <shell_process+0xca>
	sh->ctx->ctx.flags.last_nl = val;
    2ddc:	f8b0 23a4 	ldrh.w	r2, [r0, #932]	; 0x3a4
    2de0:	f36f 02ca 	bfc	r2, #3, #8
    2de4:	f8a0 23a4 	strh.w	r2, [r0, #932]	; 0x3a4
			switch (data) {
    2de8:	2b09      	cmp	r3, #9
    2dea:	d04d      	beq.n	2e88 <shell_process+0x144>
    2dec:	d833      	bhi.n	2e56 <shell_process+0x112>
    2dee:	2b00      	cmp	r3, #0
    2df0:	d0b8      	beq.n	2d64 <shell_process+0x20>
    2df2:	2b08      	cmp	r3, #8
    2df4:	f000 81cd 	beq.w	3192 <shell_process+0x44e>
	return (int)((((unsigned)c) >= ' ') &&
    2df8:	f1a3 0220 	sub.w	r2, r3, #32
				if (isprint((int) data)) {
    2dfc:	2a5e      	cmp	r2, #94	; 0x5e
    2dfe:	f200 81d4 	bhi.w	31aa <shell_process+0x466>
					z_flag_history_exit_set(shell, true);
    2e02:	2101      	movs	r1, #1
    2e04:	f006 fc54 	bl	96b0 <z_flag_history_exit_set.isra.0>
					z_shell_op_char_insert(shell, data);
    2e08:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    2e0c:	e0eb      	b.n	2fe6 <shell_process+0x2a2>
	return sh->ctx->ctx.flags.last_nl;
    2e0e:	f8d0 23a4 	ldr.w	r2, [r0, #932]	; 0x3a4
    2e12:	f3c2 02c7 	ubfx	r2, r2, #3, #8
	if ((z_flag_last_nl_get(shell) == 0U) ||
    2e16:	b12a      	cbz	r2, 2e24 <shell_process+0xe0>
    2e18:	f8d0 23a4 	ldr.w	r2, [r0, #932]	; 0x3a4
    2e1c:	f3c2 02c7 	ubfx	r2, r2, #3, #8
    2e20:	4293      	cmp	r3, r2
    2e22:	d1e1      	bne.n	2de8 <shell_process+0xa4>
	sh->ctx->ctx.flags.last_nl = val;
    2e24:	f8b0 23a4 	ldrh.w	r2, [r0, #932]	; 0x3a4
				if (!shell->ctx->cmd_buff_len) {
    2e28:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
    2e2a:	f363 02ca 	bfi	r2, r3, #3, #8
    2e2e:	f8a0 23a4 	strh.w	r2, [r0, #932]	; 0x3a4
    2e32:	b961      	cbnz	r1, 2e4e <shell_process+0x10a>
	z_flag_history_exit_set(shell, false);
    2e34:	f006 fc3c 	bl	96b0 <z_flag_history_exit_set.isra.0>
	z_shell_history_mode_exit(shell->history);
    2e38:	68e0      	ldr	r0, [r4, #12]
    2e3a:	f006 fd88 	bl	994e <z_shell_history_mode_exit>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    2e3e:	49ae      	ldr	r1, [pc, #696]	; (30f8 <shell_process+0x3b4>)
    2e40:	6960      	ldr	r0, [r4, #20]
    2e42:	f006 fc28 	bl	9696 <z_shell_raw_fprintf>
		state_set(shell, SHELL_STATE_ACTIVE);
    2e46:	4620      	mov	r0, r4
    2e48:	f7ff fdf4 	bl	2a34 <state_set.constprop.0>
		break;
    2e4c:	e78a      	b.n	2d64 <shell_process+0x20>
					(void)execute(shell);
    2e4e:	4620      	mov	r0, r4
    2e50:	f7ff fe16 	bl	2a80 <execute>
				state_set(shell, SHELL_STATE_ACTIVE);
    2e54:	e7f7      	b.n	2e46 <shell_process+0x102>
    2e56:	2b1b      	cmp	r3, #27
    2e58:	d013      	beq.n	2e82 <shell_process+0x13e>
    2e5a:	2b7f      	cmp	r3, #127	; 0x7f
    2e5c:	d1cc      	bne.n	2df8 <shell_process+0xb4>
	return sh->ctx->cfg.flags.echo == 1;
    2e5e:	f8d0 33a0 	ldr.w	r3, [r0, #928]	; 0x3a0
				if (z_flag_echo_get(shell)) {
    2e62:	079d      	lsls	r5, r3, #30
    2e64:	f57f af7e 	bpl.w	2d64 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    2e68:	2101      	movs	r1, #1
    2e6a:	f006 fc21 	bl	96b0 <z_flag_history_exit_set.isra.0>
					if (z_flag_mode_delete_get(shell)) {
    2e6e:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.mode_delete == 1;
    2e70:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    2e74:	0719      	lsls	r1, r3, #28
    2e76:	f100 8194 	bmi.w	31a2 <shell_process+0x45e>
		z_shell_op_char_delete(shell);
    2e7a:	4620      	mov	r0, r4
    2e7c:	f006 ff98 	bl	9db0 <z_shell_op_char_delete>
		break;
    2e80:	e770      	b.n	2d64 <shell_process+0x20>
	shell->ctx->receive_state = state;
    2e82:	2301      	movs	r3, #1
    2e84:	7143      	strb	r3, [r0, #5]
}
    2e86:	e76d      	b.n	2d64 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    2e88:	f8d0 33a0 	ldr.w	r3, [r0, #928]	; 0x3a0
				if (z_flag_echo_get(shell) &&
    2e8c:	079b      	lsls	r3, r3, #30
    2e8e:	f57f af69 	bpl.w	2d64 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    2e92:	2101      	movs	r1, #1
    2e94:	f006 fc0c 	bl	96b0 <z_flag_history_exit_set.isra.0>
	uint16_t compl_space = completion_space_get(shell);
    2e98:	68a0      	ldr	r0, [r4, #8]
	if (compl_space == 0U) {
    2e9a:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    2e9c:	f240 139f 	movw	r3, #415	; 0x19f
    2ea0:	429a      	cmp	r2, r3
    2ea2:	f43f af5f 	beq.w	2d64 <shell_process+0x20>
	memcpy(shell->ctx->temp_buff, shell->ctx->cmd_buff,
    2ea6:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    2ea8:	f100 0142 	add.w	r1, r0, #66	; 0x42
    2eac:	f500 70f1 	add.w	r0, r0, #482	; 0x1e2
    2eb0:	f007 fba0 	bl	a5f4 <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
    2eb4:	68a2      	ldr	r2, [r4, #8]
    2eb6:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    2eb8:	4413      	add	r3, r2
    2eba:	2500      	movs	r5, #0
    2ebc:	f883 51e2 	strb.w	r5, [r3, #482]	; 0x1e2
	(void)z_shell_make_argv(argc, *argv, shell->ctx->temp_buff,
    2ec0:	a91d      	add	r1, sp, #116	; 0x74
    2ec2:	231a      	movs	r3, #26
    2ec4:	f502 72f1 	add.w	r2, r2, #482	; 0x1e2
    2ec8:	a80d      	add	r0, sp, #52	; 0x34
    2eca:	f007 f8a8 	bl	a01e <z_shell_make_argv>
	if (*argc > CONFIG_SHELL_ARGC_MAX) {
    2ece:	990d      	ldr	r1, [sp, #52]	; 0x34
    2ed0:	291a      	cmp	r1, #26
    2ed2:	f63f af47 	bhi.w	2d64 <shell_process+0x20>
	(*argv)[*argc] = NULL;
    2ed6:	ab38      	add	r3, sp, #224	; 0xe0
    2ed8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2edc:	f843 5c6c 	str.w	r5, [r3, #-108]
	int space = isspace((int)shell->ctx->cmd_buff[
    2ee0:	68a3      	ldr	r3, [r4, #8]
						shell->ctx->cmd_buff_pos - 1]);
    2ee2:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
	int space = isspace((int)shell->ctx->cmd_buff[
    2ee4:	4413      	add	r3, r2
    2ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    2eea:	2b20      	cmp	r3, #32
    2eec:	f000 826f 	beq.w	33ce <shell_process+0x68a>
    2ef0:	3b09      	subs	r3, #9
    2ef2:	2b04      	cmp	r3, #4
    2ef4:	f240 826b 	bls.w	33ce <shell_process+0x68a>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    2ef8:	2901      	cmp	r1, #1
    2efa:	d84f      	bhi.n	2f9c <shell_process+0x258>
		*complete_arg_idx = Z_SHELL_CMD_ROOT_LVL;
    2efc:	2500      	movs	r5, #0
    2efe:	950c      	str	r5, [sp, #48]	; 0x30
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    2f00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2f02:	aa38      	add	r2, sp, #224	; 0xe0
    2f04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	*cnt = 0;
    2f08:	2600      	movs	r6, #0
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    2f0a:	f853 ac6c 	ldr.w	sl, [r3, #-108]
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
    2f0e:	4650      	mov	r0, sl
    2f10:	f006 fbbb 	bl	968a <z_shell_strlen>
	size_t first = 0;
    2f14:	46b0      	mov	r8, r6
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
    2f16:	4681      	mov	r9, r0
	*longest = 0U;
    2f18:	9604      	str	r6, [sp, #16]
	size_t idx = 0;
    2f1a:	4637      	mov	r7, r6
	while ((candidate = z_shell_cmd_get(cmd, idx, &dloc)) != NULL) {
    2f1c:	aa18      	add	r2, sp, #96	; 0x60
    2f1e:	4639      	mov	r1, r7
    2f20:	4628      	mov	r0, r5
    2f22:	f001 f841 	bl	3fa8 <z_shell_cmd_get>
    2f26:	4683      	mov	fp, r0
    2f28:	2800      	cmp	r0, #0
    2f2a:	d144      	bne.n	2fb6 <shell_process+0x272>
	if (cnt == 1) {
    2f2c:	2e01      	cmp	r6, #1
    2f2e:	d163      	bne.n	2ff8 <shell_process+0x2b4>
		autocomplete(shell, cmd, argv[arg_idx], first);
    2f30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2f32:	aa38      	add	r2, sp, #224	; 0xe0
    2f34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = z_shell_strlen(arg);
    2f38:	f853 0c6c 	ldr.w	r0, [r3, #-108]
    2f3c:	f006 fba5 	bl	968a <z_shell_strlen>
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
    2f40:	68a2      	ldr	r2, [r4, #8]
	uint16_t arg_len = z_shell_strlen(arg);
    2f42:	4606      	mov	r6, r0
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
    2f44:	3208      	adds	r2, #8
    2f46:	4641      	mov	r1, r8
    2f48:	4628      	mov	r0, r5
    2f4a:	f001 f82d 	bl	3fa8 <z_shell_cmd_get>
    2f4e:	4605      	mov	r5, r0
	cmd_len = z_shell_strlen(match->syntax);
    2f50:	6800      	ldr	r0, [r0, #0]
    2f52:	f006 fb9a 	bl	968a <z_shell_strlen>
	if (cmd_len != arg_len) {
    2f56:	4286      	cmp	r6, r0
    2f58:	d006      	beq.n	2f68 <shell_process+0x224>
		z_shell_op_completion_insert(shell,
    2f5a:	6829      	ldr	r1, [r5, #0]
    2f5c:	1b82      	subs	r2, r0, r6
    2f5e:	b292      	uxth	r2, r2
    2f60:	4431      	add	r1, r6
    2f62:	4620      	mov	r0, r4
    2f64:	f006 ff22 	bl	9dac <z_shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
    2f68:	68a0      	ldr	r0, [r4, #8]
					shell->ctx->cmd_buff_pos])) {
    2f6a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
	if (!isspace((int) shell->ctx->cmd_buff[
    2f6c:	4403      	add	r3, r0
    2f6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    2f72:	2b20      	cmp	r3, #32
    2f74:	d03b      	beq.n	2fee <shell_process+0x2aa>
    2f76:	3b09      	subs	r3, #9
    2f78:	2b04      	cmp	r3, #4
    2f7a:	d938      	bls.n	2fee <shell_process+0x2aa>
	return sh->ctx->cfg.flags.insert_mode == 1;
    2f7c:	f8d0 33a0 	ldr.w	r3, [r0, #928]	; 0x3a0
		if (z_flag_insert_mode_get(shell)) {
    2f80:	07df      	lsls	r7, r3, #31
    2f82:	d52f      	bpl.n	2fe4 <shell_process+0x2a0>
			z_flag_insert_mode_set(shell, false);
    2f84:	2100      	movs	r1, #0
    2f86:	f006 fba3 	bl	96d0 <z_flag_insert_mode_set.isra.0>
			z_shell_op_char_insert(shell, ' ');
    2f8a:	2120      	movs	r1, #32
    2f8c:	4620      	mov	r0, r4
    2f8e:	f000 ff75 	bl	3e7c <z_shell_op_char_insert>
			z_flag_insert_mode_set(shell, true);
    2f92:	68a0      	ldr	r0, [r4, #8]
    2f94:	2101      	movs	r1, #1
				z_flag_insert_mode_set(shell, !status);
    2f96:	f006 fb9b 	bl	96d0 <z_flag_insert_mode_set.isra.0>
				break;
    2f9a:	e6e3      	b.n	2d64 <shell_process+0x20>
	search_argc = space ? *argc : *argc - 1;
    2f9c:	3901      	subs	r1, #1
	*cmd = z_shell_get_last_command(selected_cmd_get(shell), search_argc,
    2f9e:	2000      	movs	r0, #0
    2fa0:	ab0e      	add	r3, sp, #56	; 0x38
    2fa2:	9300      	str	r3, [sp, #0]
    2fa4:	9001      	str	r0, [sp, #4]
    2fa6:	ab0c      	add	r3, sp, #48	; 0x30
    2fa8:	aa1d      	add	r2, sp, #116	; 0x74
    2faa:	f007 f943 	bl	a234 <z_shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
    2fae:	4605      	mov	r5, r0
    2fb0:	2800      	cmp	r0, #0
    2fb2:	d1a5      	bne.n	2f00 <shell_process+0x1bc>
    2fb4:	e6d6      	b.n	2d64 <shell_process+0x20>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    2fb6:	f8db 0000 	ldr.w	r0, [fp]
    2fba:	464a      	mov	r2, r9
    2fbc:	4651      	mov	r1, sl
    2fbe:	f007 fae3 	bl	a588 <strncmp>
		if (is_candidate) {
    2fc2:	b968      	cbnz	r0, 2fe0 <shell_process+0x29c>
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
    2fc4:	f8db 0000 	ldr.w	r0, [fp]
    2fc8:	f007 fac2 	bl	a550 <strlen>
    2fcc:	9b04      	ldr	r3, [sp, #16]
    2fce:	4283      	cmp	r3, r0
    2fd0:	bf38      	it	cc
    2fd2:	4603      	movcc	r3, r0
    2fd4:	b29b      	uxth	r3, r3
				*first_idx = idx;
    2fd6:	2e00      	cmp	r6, #0
    2fd8:	bf08      	it	eq
    2fda:	46b8      	moveq	r8, r7
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
    2fdc:	9304      	str	r3, [sp, #16]
			(*cnt)++;
    2fde:	3601      	adds	r6, #1
		idx++;
    2fe0:	3701      	adds	r7, #1
    2fe2:	e79b      	b.n	2f1c <shell_process+0x1d8>
			z_shell_op_char_insert(shell, ' ');
    2fe4:	2120      	movs	r1, #32
					z_shell_op_char_insert(shell, data);
    2fe6:	4620      	mov	r0, r4
    2fe8:	f000 ff48 	bl	3e7c <z_shell_op_char_insert>
    2fec:	e6ba      	b.n	2d64 <shell_process+0x20>
		z_shell_op_cursor_move(shell, 1);
    2fee:	2101      	movs	r1, #1
    2ff0:	4620      	mov	r0, r4
    2ff2:	f006 fd8d 	bl	9b10 <z_shell_op_cursor_move>
    2ff6:	e6b5      	b.n	2d64 <shell_process+0x20>
	} else if (cnt > 1) {
    2ff8:	f67f aeb4 	bls.w	2d64 <shell_process+0x20>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
    2ffc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2ffe:	aa38      	add	r2, sp, #224	; 0xe0
    3000:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3004:	f853 ac6c 	ldr.w	sl, [r3, #-108]
	size_t str_len = z_shell_strlen(str);
    3008:	4650      	mov	r0, sl
    300a:	f006 fb3e 	bl	968a <z_shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    300e:	68a3      	ldr	r3, [r4, #8]
	size_t str_len = z_shell_strlen(str);
    3010:	9006      	str	r0, [sp, #24]
		shell->ctx->vt100_ctx.printed_cmd = 0;
    3012:	f8a3 b030 	strh.w	fp, [r3, #48]	; 0x30
	longest_option += z_shell_strlen(tab);
    3016:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 30fc <shell_process+0x3b8>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    301a:	9605      	str	r6, [sp, #20]
    301c:	f8cd 800c 	str.w	r8, [sp, #12]
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
    3020:	68a2      	ldr	r2, [r4, #8]
    3022:	9903      	ldr	r1, [sp, #12]
    3024:	3208      	adds	r2, #8
    3026:	4628      	mov	r0, r5
    3028:	f000 ffbe 	bl	3fa8 <z_shell_cmd_get>
		idx++;
    302c:	9b03      	ldr	r3, [sp, #12]
    302e:	3301      	adds	r3, #1
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
    3030:	4607      	mov	r7, r0
		idx++;
    3032:	9303      	str	r3, [sp, #12]
		if (str && match->syntax &&
    3034:	f1ba 0f00 	cmp.w	sl, #0
    3038:	d154      	bne.n	30e4 <shell_process+0x3a0>
		tab_item_print(shell, match->syntax, longest);
    303a:	683b      	ldr	r3, [r7, #0]
	if (option == NULL) {
    303c:	2b00      	cmp	r3, #0
    303e:	d15f      	bne.n	3100 <shell_process+0x3bc>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    3040:	68a2      	ldr	r2, [r4, #8]
    3042:	8613      	strh	r3, [r2, #48]	; 0x30
	while (cnt) {
    3044:	9b05      	ldr	r3, [sp, #20]
    3046:	3b01      	subs	r3, #1
    3048:	9305      	str	r3, [sp, #20]
    304a:	d1e9      	bne.n	3020 <shell_process+0x2dc>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    304c:	492a      	ldr	r1, [pc, #168]	; (30f8 <shell_process+0x3b4>)
    304e:	6960      	ldr	r0, [r4, #20]
    3050:	f006 fb21 	bl	9696 <z_shell_raw_fprintf>
	z_shell_print_prompt_and_cmd(shell);
    3054:	4620      	mov	r0, r4
    3056:	f000 ff49 	bl	3eec <z_shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
    305a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    305c:	aa38      	add	r2, sp, #224	; 0xe0
    305e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	size_t idx = first + 1;
    3062:	f108 0901 	add.w	r9, r8, #1
	uint16_t arg_len = z_shell_strlen(arg);
    3066:	f853 0c6c 	ldr.w	r0, [r3, #-108]
    306a:	f006 fb0e 	bl	968a <z_shell_strlen>
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
    306e:	4641      	mov	r1, r8
    3070:	aa13      	add	r2, sp, #76	; 0x4c
	uint16_t arg_len = z_shell_strlen(arg);
    3072:	4607      	mov	r7, r0
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
    3074:	4628      	mov	r0, r5
    3076:	f000 ff97 	bl	3fa8 <z_shell_cmd_get>
    307a:	4680      	mov	r8, r0
	strncpy(shell->ctx->temp_buff, match->syntax,
    307c:	68a0      	ldr	r0, [r4, #8]
    307e:	f8d8 1000 	ldr.w	r1, [r8]
    3082:	f240 129f 	movw	r2, #415	; 0x19f
    3086:	f500 70f1 	add.w	r0, r0, #482	; 0x1e2
    308a:	f007 fa40 	bl	a50e <strncpy>
	*str = match->syntax;
    308e:	f8d8 a000 	ldr.w	sl, [r8]
	uint16_t common = UINT16_MAX;
    3092:	f64f 78ff 	movw	r8, #65535	; 0xffff
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
    3096:	aa18      	add	r2, sp, #96	; 0x60
    3098:	4649      	mov	r1, r9
    309a:	4628      	mov	r0, r5
    309c:	f109 0b01 	add.w	fp, r9, #1
    30a0:	f000 ff82 	bl	3fa8 <z_shell_cmd_get>
		if (match2 == NULL) {
    30a4:	2800      	cmp	r0, #0
    30a6:	d067      	beq.n	3178 <shell_process+0x434>
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
    30a8:	68a3      	ldr	r3, [r4, #8]
    30aa:	6800      	ldr	r0, [r0, #0]
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    30ac:	f503 73f1 	add.w	r3, r3, #482	; 0x1e2
	size_t common = 0;
    30b0:	2200      	movs	r2, #0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    30b2:	f813 cb01 	ldrb.w	ip, [r3], #1
    30b6:	5c81      	ldrb	r1, [r0, r2]
    30b8:	4561      	cmp	r1, ip
    30ba:	d105      	bne.n	30c8 <shell_process+0x384>
    30bc:	b121      	cbz	r1, 30c8 <shell_process+0x384>
		common++;
    30be:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    30c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    30c4:	428a      	cmp	r2, r1
    30c6:	d1f4      	bne.n	30b2 <shell_process+0x36e>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
    30c8:	b10f      	cbz	r7, 30ce <shell_process+0x38a>
    30ca:	42ba      	cmp	r2, r7
    30cc:	db08      	blt.n	30e0 <shell_process+0x39c>
			common = (curr_common < common) ? curr_common : common;
    30ce:	4590      	cmp	r8, r2
			--cnt;
    30d0:	f106 36ff 	add.w	r6, r6, #4294967295
			common = (curr_common < common) ? curr_common : common;
    30d4:	bfa8      	it	ge
    30d6:	4690      	movge	r8, r2
	while (cnt > 1) {
    30d8:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
    30da:	fa1f f888 	uxth.w	r8, r8
	while (cnt > 1) {
    30de:	d04b      	beq.n	3178 <shell_process+0x434>
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
    30e0:	46d9      	mov	r9, fp
    30e2:	e7d8      	b.n	3096 <shell_process+0x352>
		if (str && match->syntax &&
    30e4:	6800      	ldr	r0, [r0, #0]
    30e6:	2800      	cmp	r0, #0
    30e8:	d0a7      	beq.n	303a <shell_process+0x2f6>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    30ea:	9a06      	ldr	r2, [sp, #24]
    30ec:	4651      	mov	r1, sl
    30ee:	f007 fa4b 	bl	a588 <strncmp>
		if (str && match->syntax &&
    30f2:	2800      	cmp	r0, #0
    30f4:	d0a1      	beq.n	303a <shell_process+0x2f6>
    30f6:	e793      	b.n	3020 <shell_process+0x2dc>
    30f8:	0000cb45 	.word	0x0000cb45
    30fc:	0000cfb5 	.word	0x0000cfb5
	longest_option += z_shell_strlen(tab);
    3100:	4658      	mov	r0, fp
    3102:	9307      	str	r3, [sp, #28]
    3104:	f006 fac1 	bl	968a <z_shell_strlen>
    3108:	9b04      	ldr	r3, [sp, #16]
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    310a:	68a1      	ldr	r1, [r4, #8]
	longest_option += z_shell_strlen(tab);
    310c:	18c2      	adds	r2, r0, r3
    310e:	b292      	uxth	r2, r2
			- z_shell_strlen(tab)) / longest_option;
    3110:	4658      	mov	r0, fp
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    3112:	8d4f      	ldrh	r7, [r1, #42]	; 0x2a
	longest_option += z_shell_strlen(tab);
    3114:	9209      	str	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
    3116:	f006 fab8 	bl	968a <z_shell_strlen>
	diff = longest_option - z_shell_strlen(option);
    311a:	9b07      	ldr	r3, [sp, #28]
			- z_shell_strlen(tab)) / longest_option;
    311c:	9008      	str	r0, [sp, #32]
	diff = longest_option - z_shell_strlen(option);
    311e:	4618      	mov	r0, r3
    3120:	f006 fab3 	bl	968a <z_shell_strlen>
    3124:	9a09      	ldr	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
    3126:	9908      	ldr	r1, [sp, #32]
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    3128:	9b07      	ldr	r3, [sp, #28]
	diff = longest_option - z_shell_strlen(option);
    312a:	eba2 0900 	sub.w	r9, r2, r0
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    312e:	68a0      	ldr	r0, [r4, #8]
    3130:	f8b0 c030 	ldrh.w	ip, [r0, #48]	; 0x30
			- z_shell_strlen(tab)) / longest_option;
    3134:	1a7f      	subs	r7, r7, r1
    3136:	fb97 f2f2 	sdiv	r2, r7, r2
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    313a:	b292      	uxth	r2, r2
    313c:	fbbc f1f2 	udiv	r1, ip, r2
    3140:	fb02 c211 	mls	r2, r2, r1, ip
    3144:	f10c 0e01 	add.w	lr, ip, #1
    3148:	b292      	uxth	r2, r2
	diff = longest_option - z_shell_strlen(option);
    314a:	fa1f f989 	uxth.w	r9, r9
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    314e:	f8a0 e030 	strh.w	lr, [r0, #48]	; 0x30
    3152:	b95a      	cbnz	r2, 316c <shell_process+0x428>
		z_shell_fprintf(shell, SHELL_OPTION, "\n%s%s", tab, option);
    3154:	9300      	str	r3, [sp, #0]
    3156:	4aa0      	ldr	r2, [pc, #640]	; (33d8 <shell_process+0x694>)
    3158:	465b      	mov	r3, fp
    315a:	2106      	movs	r1, #6
    315c:	4620      	mov	r0, r4
    315e:	f006 fde5 	bl	9d2c <z_shell_fprintf>
	z_shell_op_cursor_horiz_move(shell, diff);
    3162:	4649      	mov	r1, r9
    3164:	4620      	mov	r0, r4
    3166:	f000 fd53 	bl	3c10 <z_shell_op_cursor_horiz_move>
    316a:	e76b      	b.n	3044 <shell_process+0x300>
		z_shell_fprintf(shell, SHELL_OPTION, "%s", option);
    316c:	4a9b      	ldr	r2, [pc, #620]	; (33dc <shell_process+0x698>)
    316e:	2106      	movs	r1, #6
    3170:	4620      	mov	r0, r4
    3172:	f006 fddb 	bl	9d2c <z_shell_fprintf>
    3176:	e7f4      	b.n	3162 <shell_process+0x41e>
	if (common) {
    3178:	f1b8 0f00 	cmp.w	r8, #0
    317c:	f43f adf2 	beq.w	2d64 <shell_process+0x20>
		z_shell_op_completion_insert(shell, &completion[arg_len],
    3180:	eba8 0207 	sub.w	r2, r8, r7
    3184:	b292      	uxth	r2, r2
    3186:	eb0a 0107 	add.w	r1, sl, r7
    318a:	4620      	mov	r0, r4
    318c:	f006 fe0e 	bl	9dac <z_shell_op_completion_insert>
    3190:	e5e8      	b.n	2d64 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    3192:	f8d0 33a0 	ldr.w	r3, [r0, #928]	; 0x3a0
				if (z_flag_echo_get(shell)) {
    3196:	079e      	lsls	r6, r3, #30
    3198:	f57f ade4 	bpl.w	2d64 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    319c:	2101      	movs	r1, #1
    319e:	f006 fa87 	bl	96b0 <z_flag_history_exit_set.isra.0>
						z_shell_op_char_backspace(shell);
    31a2:	4620      	mov	r0, r4
    31a4:	f006 fe1f 	bl	9de6 <z_shell_op_char_backspace>
    31a8:	e5dc      	b.n	2d64 <shell_process+0x20>
    31aa:	f8d0 23a0 	ldr.w	r2, [r0, #928]	; 0x3a0
				} else if (z_flag_echo_get(shell)) {
    31ae:	0792      	lsls	r2, r2, #30
    31b0:	f57f add8 	bpl.w	2d64 <shell_process+0x20>
	switch (data) {
    31b4:	3b01      	subs	r3, #1
    31b6:	2b16      	cmp	r3, #22
    31b8:	f63f add4 	bhi.w	2d64 <shell_process+0x20>
    31bc:	a201      	add	r2, pc, #4	; (adr r2, 31c4 <shell_process+0x480>)
    31be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    31c2:	bf00      	nop
    31c4:	0000339d 	.word	0x0000339d
    31c8:	00003221 	.word	0x00003221
    31cc:	00003229 	.word	0x00003229
    31d0:	00002e7b 	.word	0x00002e7b
    31d4:	00003391 	.word	0x00003391
    31d8:	00003249 	.word	0x00003249
    31dc:	00002d65 	.word	0x00002d65
    31e0:	00002d65 	.word	0x00002d65
    31e4:	00002d65 	.word	0x00002d65
    31e8:	00002d65 	.word	0x00002d65
    31ec:	00003251 	.word	0x00003251
    31f0:	00003259 	.word	0x00003259
    31f4:	00002d65 	.word	0x00002d65
    31f8:	00003283 	.word	0x00003283
    31fc:	00002d65 	.word	0x00002d65
    3200:	0000328d 	.word	0x0000328d
    3204:	00002d65 	.word	0x00002d65
    3208:	00002d65 	.word	0x00002d65
    320c:	00002d65 	.word	0x00002d65
    3210:	00002d65 	.word	0x00002d65
    3214:	00003291 	.word	0x00003291
    3218:	00002d65 	.word	0x00002d65
    321c:	000032bf 	.word	0x000032bf
		z_shell_op_left_arrow(shell);
    3220:	4620      	mov	r0, r4
    3222:	f006 fce0 	bl	9be6 <z_shell_op_left_arrow>
		break;
    3226:	e59d      	b.n	2d64 <shell_process+0x20>
		z_shell_op_cursor_end_move(shell);
    3228:	4620      	mov	r0, r4
    322a:	f006 fcd5 	bl	9bd8 <z_shell_op_cursor_end_move>
		if (!z_shell_cursor_in_empty_line(shell)) {
    322e:	4620      	mov	r0, r4
    3230:	f006 fc5a 	bl	9ae8 <z_shell_cursor_in_empty_line>
    3234:	b918      	cbnz	r0, 323e <shell_process+0x4fa>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    3236:	496a      	ldr	r1, [pc, #424]	; (33e0 <shell_process+0x69c>)
    3238:	6960      	ldr	r0, [r4, #20]
    323a:	f006 fa2c 	bl	9696 <z_shell_raw_fprintf>
		z_flag_history_exit_set(shell, true);
    323e:	68a0      	ldr	r0, [r4, #8]
    3240:	2101      	movs	r1, #1
    3242:	f006 fa35 	bl	96b0 <z_flag_history_exit_set.isra.0>
    3246:	e5fe      	b.n	2e46 <shell_process+0x102>
		z_shell_op_right_arrow(shell);
    3248:	4620      	mov	r0, r4
    324a:	f006 fcd4 	bl	9bf6 <z_shell_op_right_arrow>
		break;
    324e:	e589      	b.n	2d64 <shell_process+0x20>
		z_shell_op_delete_from_cursor(shell);
    3250:	4620      	mov	r0, r4
    3252:	f006 fcd9 	bl	9c08 <z_shell_op_delete_from_cursor>
		break;
    3256:	e585      	b.n	2d64 <shell_process+0x20>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    3258:	f8d0 33a0 	ldr.w	r3, [r0, #928]	; 0x3a0
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    325c:	069f      	lsls	r7, r3, #26
    325e:	d503      	bpl.n	3268 <shell_process+0x524>
    3260:	4960      	ldr	r1, [pc, #384]	; (33e4 <shell_process+0x6a0>)
    3262:	6960      	ldr	r0, [r4, #20]
    3264:	f006 fa17 	bl	9696 <z_shell_raw_fprintf>
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    3268:	68a3      	ldr	r3, [r4, #8]
    326a:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    326e:	069e      	lsls	r6, r3, #26
    3270:	d503      	bpl.n	327a <shell_process+0x536>
    3272:	495d      	ldr	r1, [pc, #372]	; (33e8 <shell_process+0x6a4>)
    3274:	6960      	ldr	r0, [r4, #20]
    3276:	f006 fa0e 	bl	9696 <z_shell_raw_fprintf>
		z_shell_print_prompt_and_cmd(shell);
    327a:	4620      	mov	r0, r4
    327c:	f000 fe36 	bl	3eec <z_shell_print_prompt_and_cmd>
		break;
    3280:	e570      	b.n	2d64 <shell_process+0x20>
		history_handle(shell, false);
    3282:	2100      	movs	r1, #0
		history_handle(shell, true);
    3284:	4620      	mov	r0, r4
    3286:	f7ff fb83 	bl	2990 <history_handle>
		break;
    328a:	e56b      	b.n	2d64 <shell_process+0x20>
		history_handle(shell, true);
    328c:	2101      	movs	r1, #1
    328e:	e7f9      	b.n	3284 <shell_process+0x540>
		z_shell_op_cursor_home_move(shell);
    3290:	4620      	mov	r0, r4
    3292:	f006 fc9b 	bl	9bcc <z_shell_op_cursor_home_move>
		cmd_buffer_clear(shell);
    3296:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    3298:	2200      	movs	r2, #0
    329a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
    329e:	63da      	str	r2, [r3, #60]	; 0x3c
		z_flag_history_exit_set(shell, true);
    32a0:	68a0      	ldr	r0, [r4, #8]
    32a2:	2101      	movs	r1, #1
    32a4:	f006 fa04 	bl	96b0 <z_flag_history_exit_set.isra.0>
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    32a8:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
    32aa:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    32ae:	069d      	lsls	r5, r3, #26
    32b0:	f57f ad58 	bpl.w	2d64 <shell_process+0x20>
    32b4:	494d      	ldr	r1, [pc, #308]	; (33ec <shell_process+0x6a8>)
    32b6:	6960      	ldr	r0, [r4, #20]
    32b8:	f006 f9ed 	bl	9696 <z_shell_raw_fprintf>
}
    32bc:	e552      	b.n	2d64 <shell_process+0x20>
		z_shell_op_word_remove(shell);
    32be:	4620      	mov	r0, r4
    32c0:	f000 fd40 	bl	3d44 <z_shell_op_word_remove>
		z_flag_history_exit_set(shell, true);
    32c4:	68a0      	ldr	r0, [r4, #8]
    32c6:	2101      	movs	r1, #1
    32c8:	f006 f9f2 	bl	96b0 <z_flag_history_exit_set.isra.0>
		break;
    32cc:	e54a      	b.n	2d64 <shell_process+0x20>
			if (data == '[') {
    32ce:	2b5b      	cmp	r3, #91	; 0x5b
    32d0:	d101      	bne.n	32d6 <shell_process+0x592>
	shell->ctx->receive_state = state;
    32d2:	2302      	movs	r3, #2
    32d4:	e5d6      	b.n	2e84 <shell_process+0x140>
	return sh->ctx->cfg.flags.echo == 1;
    32d6:	f8d0 23a0 	ldr.w	r2, [r0, #928]	; 0x3a0
			} else if (z_flag_echo_get(shell)) {
    32da:	0790      	lsls	r0, r2, #30
    32dc:	d506      	bpl.n	32ec <shell_process+0x5a8>
	if (data == SHELL_VT100_ASCII_ALT_B) {
    32de:	2b62      	cmp	r3, #98	; 0x62
    32e0:	d108      	bne.n	32f4 <shell_process+0x5b0>
		z_shell_op_cursor_word_move(shell, -1);
    32e2:	f04f 31ff 	mov.w	r1, #4294967295
		z_shell_op_cursor_word_move(shell, 1);
    32e6:	4620      	mov	r0, r4
    32e8:	f006 fc36 	bl	9b58 <z_shell_op_cursor_word_move>
			receive_state_change(shell, SHELL_RECEIVE_DEFAULT);
    32ec:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->receive_state = state;
    32ee:	2200      	movs	r2, #0
    32f0:	715a      	strb	r2, [r3, #5]
}
    32f2:	e537      	b.n	2d64 <shell_process+0x20>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
    32f4:	2b66      	cmp	r3, #102	; 0x66
    32f6:	d1f9      	bne.n	32ec <shell_process+0x5a8>
		z_shell_op_cursor_word_move(shell, 1);
    32f8:	2101      	movs	r1, #1
    32fa:	e7f4      	b.n	32e6 <shell_process+0x5a2>
	shell->ctx->receive_state = state;
    32fc:	2200      	movs	r2, #0
    32fe:	7142      	strb	r2, [r0, #5]
			if (!z_flag_echo_get(shell)) {
    3300:	68a2      	ldr	r2, [r4, #8]
    3302:	f8d2 13a0 	ldr.w	r1, [r2, #928]	; 0x3a0
    3306:	0789      	lsls	r1, r1, #30
    3308:	f57f ad2c 	bpl.w	2d64 <shell_process+0x20>
			switch (data) {
    330c:	3b31      	subs	r3, #49	; 0x31
    330e:	2b1b      	cmp	r3, #27
    3310:	f63f ad28 	bhi.w	2d64 <shell_process+0x20>
    3314:	a101      	add	r1, pc, #4	; (adr r1, 331c <shell_process+0x5d8>)
    3316:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    331a:	bf00      	nop
    331c:	00003399 	.word	0x00003399
    3320:	000033a5 	.word	0x000033a5
    3324:	000033b9 	.word	0x000033b9
    3328:	0000338d 	.word	0x0000338d
    332c:	00002d65 	.word	0x00002d65
    3330:	00002d65 	.word	0x00002d65
    3334:	00002d65 	.word	0x00002d65
    3338:	00002d65 	.word	0x00002d65
    333c:	00002d65 	.word	0x00002d65
    3340:	00002d65 	.word	0x00002d65
    3344:	00002d65 	.word	0x00002d65
    3348:	00002d65 	.word	0x00002d65
    334c:	00002d65 	.word	0x00002d65
    3350:	00002d65 	.word	0x00002d65
    3354:	00002d65 	.word	0x00002d65
    3358:	00002d65 	.word	0x00002d65
    335c:	0000328d 	.word	0x0000328d
    3360:	00003283 	.word	0x00003283
    3364:	00003249 	.word	0x00003249
    3368:	00003221 	.word	0x00003221
    336c:	00002d65 	.word	0x00002d65
    3370:	00003391 	.word	0x00003391
    3374:	00002d65 	.word	0x00002d65
    3378:	0000339d 	.word	0x0000339d
    337c:	00002d65 	.word	0x00002d65
    3380:	00002d65 	.word	0x00002d65
    3384:	00002d65 	.word	0x00002d65
    3388:	000033a9 	.word	0x000033a9
	shell->ctx->receive_state = state;
    338c:	2303      	movs	r3, #3
    338e:	7153      	strb	r3, [r2, #5]
		z_shell_op_cursor_end_move(shell);
    3390:	4620      	mov	r0, r4
    3392:	f006 fc21 	bl	9bd8 <z_shell_op_cursor_end_move>
		break;
    3396:	e4e5      	b.n	2d64 <shell_process+0x20>
	shell->ctx->receive_state = state;
    3398:	2303      	movs	r3, #3
    339a:	7153      	strb	r3, [r2, #5]
		z_shell_op_cursor_home_move(shell);
    339c:	4620      	mov	r0, r4
    339e:	f006 fc15 	bl	9bcc <z_shell_op_cursor_home_move>
		break;
    33a2:	e4df      	b.n	2d64 <shell_process+0x20>
	shell->ctx->receive_state = state;
    33a4:	2303      	movs	r3, #3
    33a6:	7153      	strb	r3, [r2, #5]
				bool status = z_flag_insert_mode_get(shell);
    33a8:	68a0      	ldr	r0, [r4, #8]
	return sh->ctx->cfg.flags.insert_mode == 1;
    33aa:	f8d0 13a0 	ldr.w	r1, [r0, #928]	; 0x3a0
    33ae:	f001 0101 	and.w	r1, r1, #1
				z_flag_insert_mode_set(shell, !status);
    33b2:	f081 0101 	eor.w	r1, r1, #1
    33b6:	e5ee      	b.n	2f96 <shell_process+0x252>
	shell->ctx->receive_state = state;
    33b8:	2303      	movs	r3, #3
    33ba:	7153      	strb	r3, [r2, #5]
				if (z_flag_echo_get(shell)) {
    33bc:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.echo == 1;
    33be:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    33c2:	079b      	lsls	r3, r3, #30
    33c4:	f57f acce 	bpl.w	2d64 <shell_process+0x20>
    33c8:	e557      	b.n	2e7a <shell_process+0x136>
	shell->ctx->receive_state = state;
    33ca:	2300      	movs	r3, #0
    33cc:	e55a      	b.n	2e84 <shell_process+0x140>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    33ce:	2900      	cmp	r1, #0
    33d0:	f43f ad94 	beq.w	2efc <shell_process+0x1b8>
    33d4:	e5e3      	b.n	2f9e <shell_process+0x25a>
    33d6:	bf00      	nop
    33d8:	0000cde9 	.word	0x0000cde9
    33dc:	0000c7e7 	.word	0x0000c7e7
    33e0:	0000cb45 	.word	0x0000cb45
    33e4:	0000be15 	.word	0x0000be15
    33e8:	0000be1a 	.word	0x0000be1a
    33ec:	0000be10 	.word	0x0000be10

000033f0 <shell_init>:
{
    33f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    33f4:	4604      	mov	r4, r0
	if (shell->ctx->tid) {
    33f6:	6880      	ldr	r0, [r0, #8]
{
    33f8:	4688      	mov	r8, r1
	if (shell->ctx->tid) {
    33fa:	f8d0 144c 	ldr.w	r1, [r0, #1100]	; 0x44c
{
    33fe:	b089      	sub	sp, #36	; 0x24
    3400:	4615      	mov	r5, r2
    3402:	461f      	mov	r7, r3
	if (shell->ctx->tid) {
    3404:	2900      	cmp	r1, #0
    3406:	d161      	bne.n	34cc <shell_init+0xdc>
	memset(sh->ctx, 0, sizeof(*sh->ctx));
    3408:	f44f 628a 	mov.w	r2, #1104	; 0x450
    340c:	f007 f8fd 	bl	a60a <memset>
	sh->ctx->prompt = sh->default_prompt;
    3410:	68a3      	ldr	r3, [r4, #8]
    3412:	6822      	ldr	r2, [r4, #0]
	z_shell_history_init(shell->history);
    3414:	68e0      	ldr	r0, [r4, #12]
	sh->ctx->prompt = sh->default_prompt;
    3416:	601a      	str	r2, [r3, #0]
	z_shell_history_init(shell->history);
    3418:	f006 fb3f 	bl	9a9a <z_shell_history_init>
	k_mutex_init(&sh->ctx->wr_mtx);
    341c:	68a0      	ldr	r0, [r4, #8]
    341e:	f500 6087 	add.w	r0, r0, #1080	; 0x438
	return z_impl_k_mutex_init(mutex);
    3422:	f008 f866 	bl	b4f2 <z_impl_k_mutex_init>
    3426:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
    342a:	f44f 766a 	mov.w	r6, #936	; 0x3a8
		k_poll_signal_init(&sh->ctx->signals[i]);
    342e:	68a0      	ldr	r0, [r4, #8]
    3430:	4430      	add	r0, r6
		arch_syscall_invoke1(*(uintptr_t *)&sig, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
    3432:	f008 f9b7 	bl	b7a4 <z_impl_k_poll_signal_init>
		k_poll_event_init(&sh->ctx->events[i],
    3436:	68a0      	ldr	r0, [r4, #8]
    3438:	2200      	movs	r2, #0
    343a:	1983      	adds	r3, r0, r6
    343c:	2101      	movs	r1, #1
    343e:	4448      	add	r0, r9
    3440:	3610      	adds	r6, #16
    3442:	f008 f992 	bl	b76a <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    3446:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
    344a:	f109 0914 	add.w	r9, r9, #20
    344e:	d1ee      	bne.n	342e <shell_init+0x3e>
		sh->stats->log_lost_cnt = 0;
    3450:	69a3      	ldr	r3, [r4, #24]
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, tx_rdy, val, ret);
    3452:	68a0      	ldr	r0, [r4, #8]
    3454:	2600      	movs	r6, #0
    3456:	2102      	movs	r1, #2
    3458:	601e      	str	r6, [r3, #0]
    345a:	f500 7069 	add.w	r0, r0, #932	; 0x3a4
    345e:	f006 f8b9 	bl	95d4 <atomic_or>
	sh->ctx->vt100_ctx.cons.terminal_wid =
    3462:	68a3      	ldr	r3, [r4, #8]
	sh->ctx->vt100_ctx.cons.terminal_hei =
    3464:	4a1b      	ldr	r2, [pc, #108]	; (34d4 <shell_init+0xe4>)
    3466:	629a      	str	r2, [r3, #40]	; 0x28
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
    3468:	6818      	ldr	r0, [r3, #0]
    346a:	f006 f90e 	bl	968a <z_shell_strlen>
    346e:	68a3      	ldr	r3, [r4, #8]
	int ret = sh->iface->api->init(sh->iface, transport_config,
    3470:	4a19      	ldr	r2, [pc, #100]	; (34d8 <shell_init+0xe8>)
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
    3472:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	int ret = sh->iface->api->init(sh->iface, transport_config,
    3476:	6860      	ldr	r0, [r4, #4]
	sh->ctx->cfg.flags = cfg_flags;
    3478:	f366 0582 	bfi	r5, r6, #2, #1
    347c:	f8c3 53a0 	str.w	r5, [r3, #928]	; 0x3a0
	int ret = sh->iface->api->init(sh->iface, transport_config,
    3480:	6803      	ldr	r3, [r0, #0]
    3482:	4641      	mov	r1, r8
    3484:	681d      	ldr	r5, [r3, #0]
    3486:	4623      	mov	r3, r4
    3488:	47a8      	blx	r5
	if (ret == 0) {
    348a:	4605      	mov	r5, r0
    348c:	b9d0      	cbnz	r0, 34c4 <shell_init+0xd4>
	shell->ctx->state = state;
    348e:	68a3      	ldr	r3, [r4, #8]
    3490:	2201      	movs	r2, #1
    3492:	711a      	strb	r2, [r3, #4]
	k_tid_t tid = k_thread_create(shell->thread,
    3494:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    3498:	2200      	movs	r2, #0
    349a:	2300      	movs	r3, #0
    349c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    34a0:	230e      	movs	r3, #14
    34a2:	9303      	str	r3, [sp, #12]
    34a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    34a6:	9504      	str	r5, [sp, #16]
    34a8:	e9cd 7301 	strd	r7, r3, [sp, #4]
    34ac:	9400      	str	r4, [sp, #0]
    34ae:	4b0b      	ldr	r3, [pc, #44]	; (34dc <shell_init+0xec>)
    34b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    34b4:	f004 ffb2 	bl	841c <z_impl_k_thread_create>
	shell->ctx->tid = tid;
    34b8:	68a3      	ldr	r3, [r4, #8]
	k_thread_name_set(tid, shell->thread_name);
    34ba:	6a21      	ldr	r1, [r4, #32]
	shell->ctx->tid = tid;
    34bc:	f8c3 044c 	str.w	r0, [r3, #1100]	; 0x44c
	return z_impl_k_thread_name_set(thread, str);
    34c0:	f004 fefa 	bl	82b8 <z_impl_k_thread_name_set>
}
    34c4:	4628      	mov	r0, r5
    34c6:	b009      	add	sp, #36	; 0x24
    34c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EALREADY;
    34cc:	f06f 0577 	mvn.w	r5, #119	; 0x77
    34d0:	e7f8      	b.n	34c4 <shell_init+0xd4>
    34d2:	bf00      	nop
    34d4:	00500018 	.word	0x00500018
    34d8:	000096f1 	.word	0x000096f1
    34dc:	0000352d 	.word	0x0000352d

000034e0 <shell_start>:
{
    34e0:	b510      	push	{r4, lr}
    34e2:	4604      	mov	r4, r0
	if (state_get(shell) != SHELL_STATE_INITIALIZED) {
    34e4:	6880      	ldr	r0, [r0, #8]
    34e6:	7903      	ldrb	r3, [r0, #4]
    34e8:	2b01      	cmp	r3, #1
    34ea:	d119      	bne.n	3520 <shell_start+0x40>
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    34ec:	f04f 32ff 	mov.w	r2, #4294967295
    34f0:	f04f 33ff 	mov.w	r3, #4294967295
    34f4:	f500 6087 	add.w	r0, r0, #1080	; 0x438
    34f8:	f006 f904 	bl	9704 <k_mutex_lock.constprop.0>
		z_shell_vt100_color_set(shell, SHELL_NORMAL);
    34fc:	2108      	movs	r1, #8
    34fe:	4620      	mov	r0, r4
    3500:	f000 fbe2 	bl	3cc8 <z_shell_vt100_color_set>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
    3504:	4908      	ldr	r1, [pc, #32]	; (3528 <shell_start+0x48>)
    3506:	6960      	ldr	r0, [r4, #20]
    3508:	f006 f8c5 	bl	9696 <z_shell_raw_fprintf>
	state_set(shell, SHELL_STATE_ACTIVE);
    350c:	4620      	mov	r0, r4
    350e:	f7ff fa91 	bl	2a34 <state_set.constprop.0>
	k_mutex_unlock(&shell->ctx->wr_mtx);
    3512:	68a0      	ldr	r0, [r4, #8]
    3514:	f500 6087 	add.w	r0, r0, #1080	; 0x438
    3518:	f006 f8b5 	bl	9686 <k_mutex_unlock>
	return 0;
    351c:	2000      	movs	r0, #0
}
    351e:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    3520:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3524:	e7fb      	b.n	351e <shell_start+0x3e>
    3526:	bf00      	nop
    3528:	0000cb44 	.word	0x0000cb44

0000352c <shell_thread>:
{
    352c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    352e:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
    3530:	6840      	ldr	r0, [r0, #4]
    3532:	6803      	ldr	r3, [r0, #0]
    3534:	2100      	movs	r1, #0
    3536:	689b      	ldr	r3, [r3, #8]
    3538:	4798      	blx	r3
	if (err != 0) {
    353a:	2800      	cmp	r0, #0
    353c:	d13f      	bne.n	35be <shell_thread+0x92>
	err = shell_start(shell);
    353e:	4620      	mov	r0, r4
    3540:	f7ff ffce 	bl	34e0 <shell_start>
	if (err != 0) {
    3544:	2800      	cmp	r0, #0
    3546:	d13a      	bne.n	35be <shell_thread+0x92>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
    3548:	4f1d      	ldr	r7, [pc, #116]	; (35c0 <shell_thread+0x94>)
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
    354a:	4e1e      	ldr	r6, [pc, #120]	; (35c4 <shell_thread+0x98>)
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
    354c:	68a0      	ldr	r0, [r4, #8]
    354e:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
	return z_impl_k_poll(events, num_events, timeout);
    3552:	f04f 32ff 	mov.w	r2, #4294967295
    3556:	f04f 33ff 	mov.w	r3, #4294967295
    355a:	2103      	movs	r1, #3
    355c:	f004 fa04 	bl	7968 <z_impl_k_poll>
		if (err != 0) {
    3560:	4605      	mov	r5, r0
    3562:	68a0      	ldr	r0, [r4, #8]
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    3564:	f04f 32ff 	mov.w	r2, #4294967295
    3568:	f04f 33ff 	mov.w	r3, #4294967295
    356c:	f500 6087 	add.w	r0, r0, #1080	; 0x438
		if (err != 0) {
    3570:	b175      	cbz	r5, 3590 <shell_thread+0x64>
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    3572:	f006 f8c7 	bl	9704 <k_mutex_lock.constprop.0>
			z_shell_fprintf(shell, SHELL_ERROR,
    3576:	4620      	mov	r0, r4
    3578:	462b      	mov	r3, r5
    357a:	4a13      	ldr	r2, [pc, #76]	; (35c8 <shell_thread+0x9c>)
    357c:	2101      	movs	r1, #1
    357e:	f006 fbd5 	bl	9d2c <z_shell_fprintf>
			k_mutex_unlock(&shell->ctx->wr_mtx);
    3582:	68a0      	ldr	r0, [r4, #8]
}
    3584:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			k_mutex_unlock(&shell->ctx->wr_mtx);
    3588:	f500 6087 	add.w	r0, r0, #1080	; 0x438
    358c:	f006 b87b 	b.w	9686 <k_mutex_unlock>
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    3590:	f006 f8b8 	bl	9704 <k_mutex_lock.constprop.0>
		if (shell->iface->api->update) {
    3594:	6860      	ldr	r0, [r4, #4]
    3596:	6803      	ldr	r3, [r0, #0]
    3598:	695b      	ldr	r3, [r3, #20]
    359a:	b103      	cbz	r3, 359e <shell_thread+0x72>
			shell->iface->api->update(shell->iface);
    359c:	4798      	blx	r3
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
    359e:	463a      	mov	r2, r7
    35a0:	4620      	mov	r0, r4
    35a2:	2102      	movs	r1, #2
    35a4:	f006 f859 	bl	965a <shell_signal_handle>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
    35a8:	4620      	mov	r0, r4
    35aa:	4632      	mov	r2, r6
    35ac:	2100      	movs	r1, #0
    35ae:	f006 f854 	bl	965a <shell_signal_handle>
		k_mutex_unlock(&shell->ctx->wr_mtx);
    35b2:	68a0      	ldr	r0, [r4, #8]
    35b4:	f500 6087 	add.w	r0, r0, #1080	; 0x438
    35b8:	f006 f865 	bl	9686 <k_mutex_unlock>
    35bc:	e7c6      	b.n	354c <shell_thread+0x20>
}
    35be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35c0:	00009611 	.word	0x00009611
    35c4:	00002d45 	.word	0x00002d45
    35c8:	0000cdef 	.word	0x0000cdef

000035cc <cmd_help>:
{
	sh->ctx->bypass = bypass;
}

static int cmd_help(const struct shell *shell, size_t argc, char **argv)
{
    35cc:	b510      	push	{r4, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

#if defined(CONFIG_SHELL_TAB)
	shell_print(shell, "Please press the <Tab> button to see all available "
    35ce:	4a0d      	ldr	r2, [pc, #52]	; (3604 <cmd_help+0x38>)
{
    35d0:	4604      	mov	r4, r0
	shell_print(shell, "Please press the <Tab> button to see all available "
    35d2:	2108      	movs	r1, #8
    35d4:	f006 f8d5 	bl	9782 <shell_fprintf>
			   "commands.");
#endif

#if defined(CONFIG_SHELL_TAB_AUTOCOMPLETION)
	shell_print(shell,
    35d8:	4620      	mov	r0, r4
    35da:	4a0b      	ldr	r2, [pc, #44]	; (3608 <cmd_help+0x3c>)
    35dc:	2108      	movs	r1, #8
    35de:	f006 f8d0 	bl	9782 <shell_fprintf>
		"You can also use the <Tab> button to prompt or auto-complete"
		" all commands or its subcommands.");
#endif

#if defined(CONFIG_SHELL_HELP)
	shell_print(shell,
    35e2:	4620      	mov	r0, r4
    35e4:	4a09      	ldr	r2, [pc, #36]	; (360c <cmd_help+0x40>)
    35e6:	2108      	movs	r1, #8
    35e8:	f006 f8cb 	bl	9782 <shell_fprintf>
		"You can try to call commands with <-h> or <--help> parameter"
		" for more information.");
#endif

#if defined(CONFIG_SHELL_METAKEYS)
	shell_print(shell,
    35ec:	4620      	mov	r0, r4
    35ee:	4a08      	ldr	r2, [pc, #32]	; (3610 <cmd_help+0x44>)
    35f0:	2108      	movs	r1, #8
    35f2:	f006 f8c6 	bl	9782 <shell_fprintf>
		"Please refer to shell documentation for more details.");
#endif

	if (IS_ENABLED(CONFIG_SHELL_HELP)) {
		/* For NULL argument function will print all root commands */
		z_shell_help_subcmd_print(shell, NULL,
    35f6:	4620      	mov	r0, r4
    35f8:	4a06      	ldr	r2, [pc, #24]	; (3614 <cmd_help+0x48>)
    35fa:	2100      	movs	r1, #0
    35fc:	f000 fa50 	bl	3aa0 <z_shell_help_subcmd_print>
			shell_print(shell, "  %s", entry->syntax);
		}
	}

	return 0;
}
    3600:	2000      	movs	r0, #0
    3602:	bd10      	pop	{r4, pc}
    3604:	0000ce06 	.word	0x0000ce06
    3608:	0000ce44 	.word	0x0000ce44
    360c:	0000cea3 	.word	0x0000cea3
    3610:	0000cef7 	.word	0x0000cef7
    3614:	0000cf91 	.word	0x0000cf91

00003618 <shell_hexdump_line>:
{
    3618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    361c:	4616      	mov	r6, r2
    361e:	461f      	mov	r7, r3
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
    3620:	4a2a      	ldr	r2, [pc, #168]	; (36cc <shell_hexdump_line+0xb4>)
			shell_fprintf(shell, SHELL_NORMAL, "   ");
    3622:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 36d8 <shell_hexdump_line+0xc0>
			shell_fprintf(shell, SHELL_NORMAL, "%02x ",
    3626:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 36dc <shell_hexdump_line+0xc4>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    362a:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 36e0 <shell_hexdump_line+0xc8>
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
    362e:	460b      	mov	r3, r1
    3630:	2108      	movs	r1, #8
{
    3632:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
    3634:	f006 f8a5 	bl	9782 <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    3638:	2500      	movs	r5, #0
		if (i < len) {
    363a:	42af      	cmp	r7, r5
    363c:	d931      	bls.n	36a2 <shell_hexdump_line+0x8a>
			shell_fprintf(shell, SHELL_NORMAL, "%02x ",
    363e:	5d73      	ldrb	r3, [r6, r5]
    3640:	464a      	mov	r2, r9
    3642:	2108      	movs	r1, #8
    3644:	4620      	mov	r0, r4
    3646:	f006 f89c 	bl	9782 <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    364a:	3501      	adds	r5, #1
    364c:	2d10      	cmp	r5, #16
    364e:	d120      	bne.n	3692 <shell_hexdump_line+0x7a>
	shell_fprintf(shell, SHELL_NORMAL, "|");
    3650:	4a1f      	ldr	r2, [pc, #124]	; (36d0 <shell_hexdump_line+0xb8>)
			shell_fprintf(shell, SHELL_NORMAL, " ");
    3652:	f8df 808c 	ldr.w	r8, [pc, #140]	; 36e0 <shell_hexdump_line+0xc8>
			shell_fprintf(shell, SHELL_NORMAL, "%c",
    3656:	f8df 908c 	ldr.w	r9, [pc, #140]	; 36e4 <shell_hexdump_line+0xcc>
	shell_fprintf(shell, SHELL_NORMAL, "|");
    365a:	2108      	movs	r1, #8
    365c:	4620      	mov	r0, r4
    365e:	f006 f890 	bl	9782 <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    3662:	2500      	movs	r5, #0
		if (i < len) {
    3664:	42af      	cmp	r7, r5
    3666:	d92a      	bls.n	36be <shell_hexdump_line+0xa6>
			char c = data[i];
    3668:	5d73      	ldrb	r3, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    366a:	f1a3 0220 	sub.w	r2, r3, #32
    366e:	2a5f      	cmp	r2, #95	; 0x5f
			shell_fprintf(shell, SHELL_NORMAL, "%c",
    3670:	bf28      	it	cs
    3672:	232e      	movcs	r3, #46	; 0x2e
    3674:	464a      	mov	r2, r9
    3676:	2108      	movs	r1, #8
    3678:	4620      	mov	r0, r4
    367a:	f006 f882 	bl	9782 <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    367e:	3501      	adds	r5, #1
    3680:	2d10      	cmp	r5, #16
    3682:	d114      	bne.n	36ae <shell_hexdump_line+0x96>
	shell_print(shell, "|");
    3684:	4620      	mov	r0, r4
    3686:	4a13      	ldr	r2, [pc, #76]	; (36d4 <shell_hexdump_line+0xbc>)
}
    3688:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	shell_print(shell, "|");
    368c:	2108      	movs	r1, #8
    368e:	f006 b878 	b.w	9782 <shell_fprintf>
		if (i > 0 && !(i % 8)) {
    3692:	076a      	lsls	r2, r5, #29
    3694:	d1d1      	bne.n	363a <shell_hexdump_line+0x22>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    3696:	4652      	mov	r2, sl
    3698:	2108      	movs	r1, #8
    369a:	4620      	mov	r0, r4
    369c:	f006 f871 	bl	9782 <shell_fprintf>
    36a0:	e7cb      	b.n	363a <shell_hexdump_line+0x22>
			shell_fprintf(shell, SHELL_NORMAL, "   ");
    36a2:	4642      	mov	r2, r8
    36a4:	2108      	movs	r1, #8
    36a6:	4620      	mov	r0, r4
    36a8:	f006 f86b 	bl	9782 <shell_fprintf>
    36ac:	e7cd      	b.n	364a <shell_hexdump_line+0x32>
		if (i > 0 && !(i % 8)) {
    36ae:	076b      	lsls	r3, r5, #29
    36b0:	d1d8      	bne.n	3664 <shell_hexdump_line+0x4c>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    36b2:	4642      	mov	r2, r8
    36b4:	2108      	movs	r1, #8
    36b6:	4620      	mov	r0, r4
    36b8:	f006 f863 	bl	9782 <shell_fprintf>
    36bc:	e7d2      	b.n	3664 <shell_hexdump_line+0x4c>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    36be:	4642      	mov	r2, r8
    36c0:	2108      	movs	r1, #8
    36c2:	4620      	mov	r0, r4
    36c4:	f006 f85d 	bl	9782 <shell_fprintf>
    36c8:	e7d9      	b.n	367e <shell_hexdump_line+0x66>
    36ca:	bf00      	nop
    36cc:	0000cfa7 	.word	0x0000cfa7
    36d0:	0000cfb8 	.word	0x0000cfb8
    36d4:	0000cfba 	.word	0x0000cfba
    36d8:	0000cfb4 	.word	0x0000cfb4
    36dc:	0000cfae 	.word	0x0000cfae
    36e0:	0000cfb6 	.word	0x0000cfb6
    36e4:	0000d445 	.word	0x0000d445

000036e8 <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
    36e8:	b510      	push	{r4, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    36ea:	6883      	ldr	r3, [r0, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
    36ec:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    36f0:	069b      	lsls	r3, r3, #26
{
    36f2:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    36f4:	d503      	bpl.n	36fe <cmd_resize_default+0x16>
    36f6:	4904      	ldr	r1, [pc, #16]	; (3708 <cmd_resize_default+0x20>)
    36f8:	6940      	ldr	r0, [r0, #20]
    36fa:	f006 f86e 	bl	97da <z_shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
    36fe:	68a3      	ldr	r3, [r4, #8]
    3700:	4a02      	ldr	r2, [pc, #8]	; (370c <cmd_resize_default+0x24>)
    3702:	629a      	str	r2, [r3, #40]	; 0x28

	return 0;
}
    3704:	2000      	movs	r0, #0
    3706:	bd10      	pop	{r4, pc}
    3708:	0000be20 	.word	0x0000be20
    370c:	00500018 	.word	0x00500018

00003710 <cmd_shell_stats_show>:
{
    3710:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %lu", shell->stats->log_lost_cnt);
    3712:	6983      	ldr	r3, [r0, #24]
    3714:	4a03      	ldr	r2, [pc, #12]	; (3724 <cmd_shell_stats_show+0x14>)
    3716:	681b      	ldr	r3, [r3, #0]
    3718:	2108      	movs	r1, #8
    371a:	f006 f832 	bl	9782 <shell_fprintf>
}
    371e:	2000      	movs	r0, #0
    3720:	bd08      	pop	{r3, pc}
    3722:	bf00      	nop
    3724:	0000cfd6 	.word	0x0000cfd6

00003728 <cmd_history>:
{
    3728:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			shell_print(shell, "[%3d] %s",
    372a:	4e0f      	ldr	r6, [pc, #60]	; (3768 <cmd_history+0x40>)
{
    372c:	4604      	mov	r4, r0
    372e:	2500      	movs	r5, #0
				    shell->ctx->temp_buff, &len);
    3730:	68a2      	ldr	r2, [r4, #8]
		z_shell_history_get(shell->history, true,
    3732:	68e0      	ldr	r0, [r4, #12]
    3734:	f10d 030e 	add.w	r3, sp, #14
    3738:	f502 72f1 	add.w	r2, r2, #482	; 0x1e2
    373c:	2101      	movs	r1, #1
    373e:	f006 f909 	bl	9954 <z_shell_history_get>
		if (len) {
    3742:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    3746:	68a3      	ldr	r3, [r4, #8]
    3748:	b150      	cbz	r0, 3760 <cmd_history+0x38>
			shell_print(shell, "[%3d] %s",
    374a:	f503 73f1 	add.w	r3, r3, #482	; 0x1e2
    374e:	9300      	str	r3, [sp, #0]
    3750:	4632      	mov	r2, r6
    3752:	462b      	mov	r3, r5
    3754:	2108      	movs	r1, #8
    3756:	4620      	mov	r0, r4
    3758:	f006 f813 	bl	9782 <shell_fprintf>
	while (1) {
    375c:	3501      	adds	r5, #1
		z_shell_history_get(shell->history, true,
    375e:	e7e7      	b.n	3730 <cmd_history+0x8>
	shell->ctx->temp_buff[0] = '\0';
    3760:	f883 01e2 	strb.w	r0, [r3, #482]	; 0x1e2
}
    3764:	b004      	add	sp, #16
    3766:	bd70      	pop	{r4, r5, r6, pc}
    3768:	0000cfe6 	.word	0x0000cfe6

0000376c <cmd_clear>:
{
    376c:	b510      	push	{r4, lr}
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    376e:	6883      	ldr	r3, [r0, #8]
    3770:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    3774:	069a      	lsls	r2, r3, #26
{
    3776:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    3778:	d503      	bpl.n	3782 <cmd_clear+0x16>
    377a:	4907      	ldr	r1, [pc, #28]	; (3798 <cmd_clear+0x2c>)
    377c:	6940      	ldr	r0, [r0, #20]
    377e:	f006 f82c 	bl	97da <z_shell_raw_fprintf>
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    3782:	68a3      	ldr	r3, [r4, #8]
    3784:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    3788:	069b      	lsls	r3, r3, #26
    378a:	d503      	bpl.n	3794 <cmd_clear+0x28>
    378c:	4903      	ldr	r1, [pc, #12]	; (379c <cmd_clear+0x30>)
    378e:	6960      	ldr	r0, [r4, #20]
    3790:	f006 f823 	bl	97da <z_shell_raw_fprintf>
}
    3794:	2000      	movs	r0, #0
    3796:	bd10      	pop	{r4, pc}
    3798:	0000be27 	.word	0x0000be27
    379c:	0000be2c 	.word	0x0000be2c

000037a0 <cmd_echo>:
	if (argc == 2) {
    37a0:	2902      	cmp	r1, #2
{
    37a2:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
    37a4:	d10d      	bne.n	37c2 <cmd_echo+0x22>
		shell_error(shell, "%s:%s%s", argv[0],
    37a6:	6853      	ldr	r3, [r2, #4]
    37a8:	9301      	str	r3, [sp, #4]
    37aa:	4b0e      	ldr	r3, [pc, #56]	; (37e4 <cmd_echo+0x44>)
    37ac:	9300      	str	r3, [sp, #0]
    37ae:	6813      	ldr	r3, [r2, #0]
    37b0:	4a0d      	ldr	r2, [pc, #52]	; (37e8 <cmd_echo+0x48>)
    37b2:	2101      	movs	r1, #1
    37b4:	f005 ffe5 	bl	9782 <shell_fprintf>
    37b8:	f06f 0015 	mvn.w	r0, #21
}
    37bc:	b003      	add	sp, #12
    37be:	f85d fb04 	ldr.w	pc, [sp], #4
	shell_print(shell, "Echo status: %s",
    37c2:	6883      	ldr	r3, [r0, #8]
    37c4:	4a09      	ldr	r2, [pc, #36]	; (37ec <cmd_echo+0x4c>)
	return sh->ctx->cfg.flags.echo == 1;
    37c6:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    37ca:	f013 0f02 	tst.w	r3, #2
    37ce:	f04f 0108 	mov.w	r1, #8
    37d2:	4b07      	ldr	r3, [pc, #28]	; (37f0 <cmd_echo+0x50>)
    37d4:	bf18      	it	ne
    37d6:	4613      	movne	r3, r2
    37d8:	4a06      	ldr	r2, [pc, #24]	; (37f4 <cmd_echo+0x54>)
    37da:	f005 ffd2 	bl	9782 <shell_fprintf>
	return 0;
    37de:	2000      	movs	r0, #0
    37e0:	e7ec      	b.n	37bc <cmd_echo+0x1c>
    37e2:	bf00      	nop
    37e4:	0000cffd 	.word	0x0000cffd
    37e8:	0000cff4 	.word	0x0000cff4
    37ec:	0000cc30 	.word	0x0000cc30
    37f0:	0000cff0 	.word	0x0000cff0
    37f4:	0000d012 	.word	0x0000d012

000037f8 <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
    37f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
    37fa:	2901      	cmp	r1, #1
{
    37fc:	b085      	sub	sp, #20
    37fe:	4604      	mov	r4, r0
	if (argc != 1) {
    3800:	d00d      	beq.n	381e <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
    3802:	6853      	ldr	r3, [r2, #4]
    3804:	9301      	str	r3, [sp, #4]
    3806:	4b58      	ldr	r3, [pc, #352]	; (3968 <cmd_resize+0x170>)
    3808:	9300      	str	r3, [sp, #0]
    380a:	6813      	ldr	r3, [r2, #0]
    380c:	4a57      	ldr	r2, [pc, #348]	; (396c <cmd_resize+0x174>)
    380e:	2101      	movs	r1, #1
    3810:	f005 ffb7 	bl	9782 <shell_fprintf>
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
    3814:	f06f 0515 	mvn.w	r5, #21
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
    3818:	4628      	mov	r0, r5
    381a:	b005      	add	sp, #20
    381c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    381e:	6883      	ldr	r3, [r0, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
    3820:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    3824:	069a      	lsls	r2, r3, #26
    3826:	d503      	bpl.n	3830 <cmd_resize+0x38>
    3828:	4951      	ldr	r1, [pc, #324]	; (3970 <cmd_resize+0x178>)
    382a:	6940      	ldr	r0, [r0, #20]
    382c:	f005 ffd5 	bl	97da <z_shell_raw_fprintf>
	z_shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
    3830:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
    3834:	4620      	mov	r0, r4
    3836:	f000 f9d5 	bl	3be4 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
    383a:	21fa      	movs	r1, #250	; 0xfa
    383c:	4620      	mov	r0, r4
    383e:	f000 f9e7 	bl	3c10 <z_shell_op_cursor_horiz_move>
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    3842:	68a0      	ldr	r0, [r4, #8]
	char c = 0;
    3844:	2500      	movs	r5, #0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    3846:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    384a:	4629      	mov	r1, r5
    384c:	f500 70f1 	add.w	r0, r0, #482	; 0x1e2
	char c = 0;
    3850:	f88d 500b 	strb.w	r5, [sp, #11]
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    3854:	f006 fed9 	bl	a60a <memset>
	z_shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
    3858:	4946      	ldr	r1, [pc, #280]	; (3974 <cmd_resize+0x17c>)
    385a:	6960      	ldr	r0, [r4, #20]
    385c:	f005 ffbd 	bl	97da <z_shell_raw_fprintf>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
    3860:	6960      	ldr	r0, [r4, #20]
    3862:	f006 f82d 	bl	98c0 <z_shell_fprintf_buffer_flush>
    3866:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
    386a:	6860      	ldr	r0, [r4, #4]
    386c:	6803      	ldr	r3, [r0, #0]
    386e:	2201      	movs	r2, #1
    3870:	691f      	ldr	r7, [r3, #16]
    3872:	f10d 010b 	add.w	r1, sp, #11
    3876:	ab03      	add	r3, sp, #12
    3878:	47b8      	blx	r7
			if (cnt == 0) {
    387a:	9b03      	ldr	r3, [sp, #12]
    387c:	b953      	cbnz	r3, 3894 <cmd_resize+0x9c>
	z_impl_k_busy_wait(usec_to_wait);
    387e:	3e01      	subs	r6, #1
    3880:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    3884:	b2b6      	uxth	r6, r6
    3886:	f008 f8dc 	bl	ba42 <z_impl_k_busy_wait>
	for (uint16_t i = 0; i < 1000; i++) {
    388a:	2e00      	cmp	r6, #0
    388c:	d1ed      	bne.n	386a <cmd_resize+0x72>
		ret_val = -ENOTSUP;
    388e:	f06f 0585 	mvn.w	r5, #133	; 0x85
    3892:	e031      	b.n	38f8 <cmd_resize+0x100>
			if ((c != SHELL_VT100_ASCII_ESC) &&
    3894:	f89d 300b 	ldrb.w	r3, [sp, #11]
    3898:	68a2      	ldr	r2, [r4, #8]
    389a:	2b1b      	cmp	r3, #27
    389c:	d058      	beq.n	3950 <cmd_resize+0x158>
    389e:	f892 11e2 	ldrb.w	r1, [r2, #482]	; 0x1e2
    38a2:	291b      	cmp	r1, #27
    38a4:	d1e1      	bne.n	386a <cmd_resize+0x72>
			if (c == 'R') { /* End of response from the terminal. */
    38a6:	2b52      	cmp	r3, #82	; 0x52
    38a8:	d152      	bne.n	3950 <cmd_resize+0x158>
				shell->ctx->temp_buff[buff_idx] = '\0';
    38aa:	4415      	add	r5, r2
    38ac:	2300      	movs	r3, #0
    38ae:	f885 31e2 	strb.w	r3, [r5, #482]	; 0x1e2
				if (shell->ctx->temp_buff[1] != '[') {
    38b2:	f892 11e3 	ldrb.w	r1, [r2, #483]	; 0x1e3
    38b6:	295b      	cmp	r1, #91	; 0x5b
    38b8:	d152      	bne.n	3960 <cmd_resize+0x168>
    38ba:	f502 70f2 	add.w	r0, r2, #484	; 0x1e4
	*y = 0U;
    38be:	461f      	mov	r7, r3
				buff_idx = 2U;
    38c0:	2602      	movs	r6, #2
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    38c2:	f810 1b01 	ldrb.w	r1, [r0], #1
    38c6:	3601      	adds	r6, #1
    38c8:	293b      	cmp	r1, #59	; 0x3b
    38ca:	b2b6      	uxth	r6, r6
    38cc:	d12a      	bne.n	3924 <cmd_resize+0x12c>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    38ce:	f5b6 7fd0 	cmp.w	r6, #416	; 0x1a0
    38d2:	d0dc      	beq.n	388e <cmd_resize+0x96>
    38d4:	f506 70f1 	add.w	r0, r6, #482	; 0x1e2
    38d8:	4410      	add	r0, r2
	*x = 0U;
    38da:	2300      	movs	r3, #0
				while (shell->ctx->temp_buff[buff_idx]
    38dc:	f810 5b01 	ldrb.w	r5, [r0], #1
    38e0:	bb55      	cbnz	r5, 3938 <cmd_resize+0x140>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    38e2:	2bfa      	cmp	r3, #250	; 0xfa
    38e4:	bf28      	it	cs
    38e6:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    38e8:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    38ea:	8553      	strh	r3, [r2, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    38ec:	463b      	mov	r3, r7
    38ee:	bf28      	it	cs
    38f0:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
    38f2:	f882 51e2 	strb.w	r5, [r2, #482]	; 0x1e2
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    38f6:	8513      	strh	r3, [r2, #40]	; 0x28
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    38f8:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
    38fa:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    38fe:	069b      	lsls	r3, r3, #26
    3900:	d503      	bpl.n	390a <cmd_resize+0x112>
    3902:	491d      	ldr	r1, [pc, #116]	; (3978 <cmd_resize+0x180>)
    3904:	6960      	ldr	r0, [r4, #20]
    3906:	f005 ff68 	bl	97da <z_shell_raw_fprintf>
	if (err != 0) {
    390a:	2d00      	cmp	r5, #0
    390c:	d084      	beq.n	3818 <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
    390e:	68a3      	ldr	r3, [r4, #8]
    3910:	4a1a      	ldr	r2, [pc, #104]	; (397c <cmd_resize+0x184>)
    3912:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
    3914:	2103      	movs	r1, #3
    3916:	4a1a      	ldr	r2, [pc, #104]	; (3980 <cmd_resize+0x188>)
    3918:	4620      	mov	r0, r4
    391a:	f005 ff32 	bl	9782 <shell_fprintf>
    391e:	f06f 0507 	mvn.w	r5, #7
    3922:	e779      	b.n	3818 <cmd_resize+0x20>
					*y = *y * 10U +
    3924:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    3928:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    392c:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
    392e:	f5b6 7fd0 	cmp.w	r6, #416	; 0x1a0
					*y = *y * 10U +
    3932:	b29f      	uxth	r7, r3
					if (buff_idx >=
    3934:	d1c5      	bne.n	38c2 <cmd_resize+0xca>
    3936:	e7aa      	b.n	388e <cmd_resize+0x96>
					*x = *x * 10U +
    3938:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
    393c:	3601      	adds	r6, #1
					*x = *x * 10U +
    393e:	eb05 0543 	add.w	r5, r5, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
    3942:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
    3944:	3d30      	subs	r5, #48	; 0x30
					if (buff_idx >=
    3946:	f5b6 7fd0 	cmp.w	r6, #416	; 0x1a0
					*x = *x * 10U +
    394a:	b2ab      	uxth	r3, r5
					if (buff_idx >=
    394c:	d3c6      	bcc.n	38dc <cmd_resize+0xe4>
    394e:	e79e      	b.n	388e <cmd_resize+0x96>
			shell->ctx->temp_buff[buff_idx] = c;
    3950:	1951      	adds	r1, r2, r5
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    3952:	3501      	adds	r5, #1
    3954:	b2ad      	uxth	r5, r5
    3956:	2d09      	cmp	r5, #9
			shell->ctx->temp_buff[buff_idx] = c;
    3958:	f881 31e2 	strb.w	r3, [r1, #482]	; 0x1e2
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    395c:	d985      	bls.n	386a <cmd_resize+0x72>
				shell->ctx->temp_buff[0] = 0;
    395e:	2300      	movs	r3, #0
    3960:	f882 31e2 	strb.w	r3, [r2, #482]	; 0x1e2
				return -ENOMEM;
    3964:	e793      	b.n	388e <cmd_resize+0x96>
    3966:	bf00      	nop
    3968:	0000cffd 	.word	0x0000cffd
    396c:	0000cff4 	.word	0x0000cff4
    3970:	0000be32 	.word	0x0000be32
    3974:	0000d421 	.word	0x0000d421
    3978:	0000be36 	.word	0x0000be36
    397c:	00500018 	.word	0x00500018
    3980:	0000d023 	.word	0x0000d023

00003984 <z_shell_fprintf_fmt>:
	return 0;
}

void z_shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
			 const char *fmt, va_list args)
{
    3984:	b510      	push	{r4, lr}
    3986:	4604      	mov	r4, r0
    3988:	4613      	mov	r3, r2
	(void)cbvprintf(out_func, (void *)sh_fprintf, fmt, args);
    398a:	460a      	mov	r2, r1
    398c:	4601      	mov	r1, r0
    398e:	4806      	ldr	r0, [pc, #24]	; (39a8 <z_shell_fprintf_fmt+0x24>)
    3990:	f7fd fab0 	bl	ef4 <cbvprintf>

	if (sh_fprintf->ctrl_blk->autoflush) {
    3994:	6923      	ldr	r3, [r4, #16]
    3996:	791b      	ldrb	r3, [r3, #4]
    3998:	b123      	cbz	r3, 39a4 <z_shell_fprintf_fmt+0x20>
		z_shell_fprintf_buffer_flush(sh_fprintf);
    399a:	4620      	mov	r0, r4
	}
}
    399c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_fprintf_buffer_flush(sh_fprintf);
    39a0:	f005 bf8e 	b.w	98c0 <z_shell_fprintf_buffer_flush>
}
    39a4:	bd10      	pop	{r4, pc}
    39a6:	bf00      	nop
    39a8:	000098d9 	.word	0x000098d9

000039ac <formatted_text_print.constprop.0>:
 *   shell		Pointer to shell instance.
 *   p_str		Pointer to string to be printed.
 *   terminal_offset	Requested left margin.
 *   offset_first_line	Add margin to the first printed line.
 */
static void formatted_text_print(const struct shell *shell, const char *str,
    39ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    39b0:	4604      	mov	r4, r0
    39b2:	4690      	mov	r8, r2
				 size_t terminal_offset, bool offset_first_line)
{
	size_t offset = 0;
	size_t length;

	if (str == NULL) {
    39b4:	460e      	mov	r6, r1
    39b6:	2900      	cmp	r1, #0
    39b8:	d06e      	beq.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
    39ba:	2500      	movs	r5, #0
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
	}


	/* Skipping whitespace. */
	while (isspace((int) *(str + offset))) {
    39bc:	5d73      	ldrb	r3, [r6, r5]
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    39be:	2b20      	cmp	r3, #32
    39c0:	d025      	beq.n	3a0e <formatted_text_print.constprop.0+0x62>
    39c2:	3b09      	subs	r3, #9
    39c4:	2b04      	cmp	r3, #4
    39c6:	d922      	bls.n	3a0e <formatted_text_print.constprop.0+0x62>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    39c8:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>
	return str == NULL ? 0U : (uint16_t)strlen(str);
    39cc:	4630      	mov	r0, r6
    39ce:	f006 fdbf 	bl	a550 <strlen>
		size_t idx = 0;

		length = z_shell_strlen(str) - offset;

		if (length <=
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    39d2:	68a3      	ldr	r3, [r4, #8]
    39d4:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
		length = z_shell_strlen(str) - offset;
    39d6:	b280      	uxth	r0, r0
    39d8:	1b40      	subs	r0, r0, r5
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    39da:	eba1 0308 	sub.w	r3, r1, r8
		if (length <=
    39de:	4298      	cmp	r0, r3
    39e0:	eb06 0a05 	add.w	sl, r6, r5
    39e4:	d915      	bls.n	3a12 <formatted_text_print.constprop.0+0x66>
    39e6:	4650      	mov	r0, sl
		size_t idx = 0;
    39e8:	2700      	movs	r7, #0
		length = shell->ctx->vt100_ctx.cons.terminal_wid
				- terminal_offset;

		while (true) {
			/* Determining line break. */
			if (isspace((int) (*(str + offset + idx)))) {
    39ea:	f810 2b01 	ldrb.w	r2, [r0], #1
    39ee:	2a20      	cmp	r2, #32
    39f0:	d006      	beq.n	3a00 <formatted_text_print.constprop.0+0x54>
    39f2:	f1a2 0c09 	sub.w	ip, r2, #9
    39f6:	f1bc 0f04 	cmp.w	ip, #4
    39fa:	d802      	bhi.n	3a02 <formatted_text_print.constprop.0+0x56>
				length = idx;
				if (*(str + offset + idx) == '\n') {
    39fc:	2a0a      	cmp	r2, #10
    39fe:	d031      	beq.n	3a64 <formatted_text_print.constprop.0+0xb8>
    3a00:	463b      	mov	r3, r7
					break;
				}
			}

			if ((idx + terminal_offset) >=
    3a02:	eb08 0207 	add.w	r2, r8, r7
    3a06:	4291      	cmp	r1, r2
    3a08:	d92b      	bls.n	3a62 <formatted_text_print.constprop.0+0xb6>
			    shell->ctx->vt100_ctx.cons.terminal_wid) {
				/* End of line reached. */
				break;
			}

			++idx;
    3a0a:	3701      	adds	r7, #1
			if (isspace((int) (*(str + offset + idx)))) {
    3a0c:	e7ed      	b.n	39ea <formatted_text_print.constprop.0+0x3e>
		++offset;
    3a0e:	3501      	adds	r5, #1
    3a10:	e7d4      	b.n	39bc <formatted_text_print.constprop.0+0x10>
    3a12:	4653      	mov	r3, sl
			for (idx = 0; idx < length; idx++) {
    3a14:	2700      	movs	r7, #0
    3a16:	42b8      	cmp	r0, r7
    3a18:	d017      	beq.n	3a4a <formatted_text_print.constprop.0+0x9e>
				if (*(str + offset + idx) == '\n') {
    3a1a:	f813 2b01 	ldrb.w	r2, [r3], #1
    3a1e:	2a0a      	cmp	r2, #10
    3a20:	eb05 0907 	add.w	r9, r5, r7
    3a24:	d11b      	bne.n	3a5e <formatted_text_print.constprop.0+0xb2>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
    3a26:	6960      	ldr	r0, [r4, #20]
    3a28:	f005 ff4a 	bl	98c0 <z_shell_fprintf_buffer_flush>
					z_shell_write(shell, str + offset, idx);
    3a2c:	463a      	mov	r2, r7
    3a2e:	4651      	mov	r1, sl
    3a30:	4620      	mov	r0, r4
    3a32:	f006 f90c 	bl	9c4e <z_shell_write>
    3a36:	4919      	ldr	r1, [pc, #100]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
    3a38:	6960      	ldr	r0, [r4, #20]
    3a3a:	f005 ff69 	bl	9910 <z_shell_raw_fprintf>
					z_shell_op_cursor_horiz_move(shell,
    3a3e:	4641      	mov	r1, r8
    3a40:	4620      	mov	r0, r4
					offset += idx + 1;
    3a42:	f109 0501 	add.w	r5, r9, #1
					z_shell_op_cursor_horiz_move(shell,
    3a46:	f000 f8e3 	bl	3c10 <z_shell_op_cursor_horiz_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, str + offset);
    3a4a:	6960      	ldr	r0, [r4, #20]
    3a4c:	1971      	adds	r1, r6, r5
    3a4e:	f005 ff5f 	bl	9910 <z_shell_raw_fprintf>
    3a52:	6960      	ldr	r0, [r4, #20]
    3a54:	4911      	ldr	r1, [pc, #68]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
		z_cursor_next_line_move(shell);
		z_shell_op_cursor_horiz_move(shell, terminal_offset);

	}
	z_cursor_next_line_move(shell);
}
    3a56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3a5a:	f005 bf59 	b.w	9910 <z_shell_raw_fprintf>
			for (idx = 0; idx < length; idx++) {
    3a5e:	3701      	adds	r7, #1
    3a60:	e7d9      	b.n	3a16 <formatted_text_print.constprop.0+0x6a>
    3a62:	461f      	mov	r7, r3
    3a64:	6960      	ldr	r0, [r4, #20]
    3a66:	f005 ff2b 	bl	98c0 <z_shell_fprintf_buffer_flush>
		z_shell_write(shell, str + offset, length);
    3a6a:	463a      	mov	r2, r7
    3a6c:	4651      	mov	r1, sl
    3a6e:	4620      	mov	r0, r4
    3a70:	f006 f8ed 	bl	9c4e <z_shell_write>
		offset += length;
    3a74:	443d      	add	r5, r7
		while (isspace((int) (*(str + offset)))) {
    3a76:	5d73      	ldrb	r3, [r6, r5]
    3a78:	2b20      	cmp	r3, #32
    3a7a:	d00b      	beq.n	3a94 <formatted_text_print.constprop.0+0xe8>
    3a7c:	3b09      	subs	r3, #9
    3a7e:	2b04      	cmp	r3, #4
    3a80:	d908      	bls.n	3a94 <formatted_text_print.constprop.0+0xe8>
    3a82:	6960      	ldr	r0, [r4, #20]
    3a84:	4649      	mov	r1, r9
    3a86:	f005 ff43 	bl	9910 <z_shell_raw_fprintf>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
    3a8a:	4641      	mov	r1, r8
    3a8c:	4620      	mov	r0, r4
    3a8e:	f000 f8bf 	bl	3c10 <z_shell_op_cursor_horiz_move>
	while (true) {
    3a92:	e79b      	b.n	39cc <formatted_text_print.constprop.0+0x20>
			++offset;
    3a94:	3501      	adds	r5, #1
    3a96:	e7ee      	b.n	3a76 <formatted_text_print.constprop.0+0xca>
}
    3a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3a9c:	0000cb45 	.word	0x0000cb45

00003aa0 <z_shell_help_subcmd_print>:
 * help string
 */
void z_shell_help_subcmd_print(const struct shell *shell,
			       const struct shell_static_entry *parent,
			       const char *description)
{
    3aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3aa4:	460e      	mov	r6, r1
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry dloc;
	uint16_t longest = 0U;
	size_t idx = 0;
    3aa6:	2100      	movs	r1, #0
{
    3aa8:	b08d      	sub	sp, #52	; 0x34
    3aaa:	4604      	mov	r4, r0
    3aac:	4617      	mov	r7, r2
	uint16_t longest = 0U;
    3aae:	460d      	mov	r5, r1

	/* Searching for the longest subcommand to print. */
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    3ab0:	aa07      	add	r2, sp, #28
    3ab2:	4630      	mov	r0, r6
    3ab4:	f101 0801 	add.w	r8, r1, #1
    3ab8:	f000 fa76 	bl	3fa8 <z_shell_cmd_get>
    3abc:	b9b8      	cbnz	r0, 3aee <z_shell_help_subcmd_print+0x4e>
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
	}

	/* No help to print */
	if (longest == 0) {
    3abe:	b19d      	cbz	r5, 3ae8 <z_shell_help_subcmd_print+0x48>
		return;
	}

	if (description != NULL) {
    3ac0:	b127      	cbz	r7, 3acc <z_shell_help_subcmd_print+0x2c>
		z_shell_fprintf(shell, SHELL_NORMAL, description);
    3ac2:	463a      	mov	r2, r7
    3ac4:	2108      	movs	r1, #8
    3ac6:	4620      	mov	r0, r4
    3ac8:	f006 f930 	bl	9d2c <z_shell_fprintf>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    3acc:	f8df 8080 	ldr.w	r8, [pc, #128]	; 3b50 <z_shell_help_subcmd_print+0xb0>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:", tabulator,
    3ad0:	f8df a080 	ldr.w	sl, [pc, #128]	; 3b54 <z_shell_help_subcmd_print+0xb4>
    3ad4:	f8df b080 	ldr.w	fp, [pc, #128]	; 3b58 <z_shell_help_subcmd_print+0xb8>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    3ad8:	2100      	movs	r1, #0
	}

	/* Printing subcommands and help string (if exists). */
	idx = 0;

	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    3ada:	1c4b      	adds	r3, r1, #1
    3adc:	aa07      	add	r2, sp, #28
    3ade:	4630      	mov	r0, r6
    3ae0:	9304      	str	r3, [sp, #16]
    3ae2:	f000 fa61 	bl	3fa8 <z_shell_cmd_get>
    3ae6:	b960      	cbnz	r0, 3b02 <z_shell_help_subcmd_print+0x62>
		help_item_print(shell, entry->syntax, longest, entry->help);
	}
}
    3ae8:	b00d      	add	sp, #52	; 0x34
    3aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
    3aee:	6800      	ldr	r0, [r0, #0]
	return str == NULL ? 0U : (uint16_t)strlen(str);
    3af0:	b110      	cbz	r0, 3af8 <z_shell_help_subcmd_print+0x58>
    3af2:	f006 fd2d 	bl	a550 <strlen>
    3af6:	b280      	uxth	r0, r0
    3af8:	4285      	cmp	r5, r0
    3afa:	bf38      	it	cc
    3afc:	4605      	movcc	r5, r0
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    3afe:	4641      	mov	r1, r8
    3b00:	e7d6      	b.n	3ab0 <z_shell_help_subcmd_print+0x10>
		help_item_print(shell, entry->syntax, longest, entry->help);
    3b02:	6803      	ldr	r3, [r0, #0]
    3b04:	f8d0 9004 	ldr.w	r9, [r0, #4]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    3b08:	4811      	ldr	r0, [pc, #68]	; (3b50 <z_shell_help_subcmd_print+0xb0>)
		help_item_print(shell, entry->syntax, longest, entry->help);
    3b0a:	9305      	str	r3, [sp, #20]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    3b0c:	f006 fd20 	bl	a550 <strlen>
	if ((item_name == NULL) || (item_name[0] == '\0')) {
    3b10:	9b05      	ldr	r3, [sp, #20]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    3b12:	4607      	mov	r7, r0
	if ((item_name == NULL) || (item_name[0] == '\0')) {
    3b14:	b18b      	cbz	r3, 3b3a <z_shell_help_subcmd_print+0x9a>
    3b16:	781a      	ldrb	r2, [r3, #0]
    3b18:	b17a      	cbz	r2, 3b3a <z_shell_help_subcmd_print+0x9a>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:", tabulator,
    3b1a:	e9cd 3801 	strd	r3, r8, [sp, #4]
    3b1e:	9500      	str	r5, [sp, #0]
    3b20:	4643      	mov	r3, r8
    3b22:	4652      	mov	r2, sl
    3b24:	2108      	movs	r1, #8
    3b26:	4620      	mov	r0, r4
    3b28:	f006 f900 	bl	9d2c <z_shell_fprintf>
	if (item_help == NULL) {
    3b2c:	f1b9 0f00 	cmp.w	r9, #0
    3b30:	d105      	bne.n	3b3e <z_shell_help_subcmd_print+0x9e>
    3b32:	6960      	ldr	r0, [r4, #20]
    3b34:	4659      	mov	r1, fp
    3b36:	f005 feeb 	bl	9910 <z_shell_raw_fprintf>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    3b3a:	9904      	ldr	r1, [sp, #16]
    3b3c:	e7cd      	b.n	3ada <z_shell_help_subcmd_print+0x3a>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    3b3e:	1c6a      	adds	r2, r5, #1
    3b40:	eb02 0247 	add.w	r2, r2, r7, lsl #1
	formatted_text_print(shell, item_help, offset, false);
    3b44:	b292      	uxth	r2, r2
    3b46:	4649      	mov	r1, r9
    3b48:	4620      	mov	r0, r4
    3b4a:	f7ff ff2f 	bl	39ac <formatted_text_print.constprop.0>
    3b4e:	e7f4      	b.n	3b3a <z_shell_help_subcmd_print+0x9a>
    3b50:	0000d43e 	.word	0x0000d43e
    3b54:	0000d426 	.word	0x0000d426
    3b58:	0000cb45 	.word	0x0000cb45

00003b5c <z_shell_help_cmd_print>:

void z_shell_help_cmd_print(const struct shell *shell,
			    const struct shell_static_entry *cmd)
{
    3b5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3b5e:	4606      	mov	r6, r0
	static const char cmd_sep[] = " - "; /* commands separator */
	uint16_t field_width;

	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    3b60:	6808      	ldr	r0, [r1, #0]
{
    3b62:	460d      	mov	r5, r1
    3b64:	b1b8      	cbz	r0, 3b96 <z_shell_help_cmd_print+0x3a>
    3b66:	f006 fcf3 	bl	a550 <strlen>
    3b6a:	b284      	uxth	r4, r0
    3b6c:	4f0b      	ldr	r7, [pc, #44]	; (3b9c <z_shell_help_cmd_print+0x40>)
    3b6e:	4638      	mov	r0, r7
    3b70:	f006 fcee 	bl	a550 <strlen>

	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
    3b74:	682b      	ldr	r3, [r5, #0]
    3b76:	4a0a      	ldr	r2, [pc, #40]	; (3ba0 <z_shell_help_cmd_print+0x44>)
    3b78:	9700      	str	r7, [sp, #0]
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    3b7a:	4404      	add	r4, r0
	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
    3b7c:	2108      	movs	r1, #8
    3b7e:	4630      	mov	r0, r6
    3b80:	f006 f8d4 	bl	9d2c <z_shell_fprintf>
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    3b84:	b2a4      	uxth	r4, r4

	formatted_text_print(shell, cmd->help, field_width, false);
    3b86:	6869      	ldr	r1, [r5, #4]
    3b88:	4622      	mov	r2, r4
    3b8a:	4630      	mov	r0, r6
}
    3b8c:	b003      	add	sp, #12
    3b8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	formatted_text_print(shell, cmd->help, field_width, false);
    3b92:	f7ff bf0b 	b.w	39ac <formatted_text_print.constprop.0>
    3b96:	4604      	mov	r4, r0
    3b98:	e7e8      	b.n	3b6c <z_shell_help_cmd_print+0x10>
    3b9a:	bf00      	nop
    3b9c:	0000d43a 	.word	0x0000d43a
    3ba0:	0000cdea 	.word	0x0000cdea

00003ba4 <z_shell_help_request>:

bool z_shell_help_request(const char *str)
{
    3ba4:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP_OPT_PARSE)) {
		return false;
	}

	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
    3ba6:	4907      	ldr	r1, [pc, #28]	; (3bc4 <z_shell_help_request+0x20>)
{
    3ba8:	4604      	mov	r4, r0
	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
    3baa:	f006 fce1 	bl	a570 <strcmp>
    3bae:	b138      	cbz	r0, 3bc0 <z_shell_help_request+0x1c>
    3bb0:	4905      	ldr	r1, [pc, #20]	; (3bc8 <z_shell_help_request+0x24>)
    3bb2:	4620      	mov	r0, r4
    3bb4:	f006 fcdc 	bl	a570 <strcmp>
    3bb8:	fab0 f080 	clz	r0, r0
    3bbc:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
    3bbe:	bd10      	pop	{r4, pc}
		return true;
    3bc0:	2001      	movs	r0, #1
    3bc2:	e7fc      	b.n	3bbe <z_shell_help_request+0x1a>
    3bc4:	0000d430 	.word	0x0000d430
    3bc8:	0000d433 	.word	0x0000d433

00003bcc <z_clear_eos>:
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    3bcc:	6883      	ldr	r3, [r0, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
    3bce:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    3bd2:	069b      	lsls	r3, r3, #26
    3bd4:	d503      	bpl.n	3bde <z_clear_eos+0x12>
    3bd6:	4902      	ldr	r1, [pc, #8]	; (3be0 <z_clear_eos+0x14>)
    3bd8:	6940      	ldr	r0, [r0, #20]
    3bda:	f005 bf64 	b.w	9aa6 <z_shell_raw_fprintf>
}
    3bde:	4770      	bx	lr
    3be0:	0000be3a 	.word	0x0000be3a

00003be4 <z_shell_op_cursor_vert_move>:
#include "shell_ops.h"

#define CMD_CURSOR_LEN 8
void z_shell_op_cursor_vert_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'A' : 'B';
    3be4:	1e0a      	subs	r2, r1, #0
    3be6:	dc0d      	bgt.n	3c04 <z_shell_op_cursor_vert_move+0x20>

	if (delta == 0) {
    3be8:	d00e      	beq.n	3c08 <z_shell_op_cursor_vert_move+0x24>
	char dir = delta > 0 ? 'A' : 'B';
    3bea:	2342      	movs	r3, #66	; 0x42

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
    3bec:	6881      	ldr	r1, [r0, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
    3bee:	f8d1 13a0 	ldr.w	r1, [r1, #928]	; 0x3a0
    3bf2:	0689      	lsls	r1, r1, #26
    3bf4:	d508      	bpl.n	3c08 <z_shell_op_cursor_vert_move+0x24>
    3bf6:	2a00      	cmp	r2, #0
    3bf8:	4904      	ldr	r1, [pc, #16]	; (3c0c <z_shell_op_cursor_vert_move+0x28>)
    3bfa:	6940      	ldr	r0, [r0, #20]
    3bfc:	bfb8      	it	lt
    3bfe:	4252      	neglt	r2, r2
    3c00:	f005 bf51 	b.w	9aa6 <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'A' : 'B';
    3c04:	2341      	movs	r3, #65	; 0x41
    3c06:	e7f1      	b.n	3bec <z_shell_op_cursor_vert_move+0x8>
}
    3c08:	4770      	bx	lr
    3c0a:	bf00      	nop
    3c0c:	0000d441 	.word	0x0000d441

00003c10 <z_shell_op_cursor_horiz_move>:

void z_shell_op_cursor_horiz_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'C' : 'D';
    3c10:	1e0a      	subs	r2, r1, #0
    3c12:	dc0d      	bgt.n	3c30 <z_shell_op_cursor_horiz_move+0x20>

	if (delta == 0) {
    3c14:	d00e      	beq.n	3c34 <z_shell_op_cursor_horiz_move+0x24>
	char dir = delta > 0 ? 'C' : 'D';
    3c16:	2344      	movs	r3, #68	; 0x44

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
    3c18:	6881      	ldr	r1, [r0, #8]
    3c1a:	f8d1 13a0 	ldr.w	r1, [r1, #928]	; 0x3a0
    3c1e:	0689      	lsls	r1, r1, #26
    3c20:	d508      	bpl.n	3c34 <z_shell_op_cursor_horiz_move+0x24>
    3c22:	2a00      	cmp	r2, #0
    3c24:	4904      	ldr	r1, [pc, #16]	; (3c38 <z_shell_op_cursor_horiz_move+0x28>)
    3c26:	6940      	ldr	r0, [r0, #20]
    3c28:	bfb8      	it	lt
    3c2a:	4252      	neglt	r2, r2
    3c2c:	f005 bf3b 	b.w	9aa6 <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'C' : 'D';
    3c30:	2343      	movs	r3, #67	; 0x43
    3c32:	e7f1      	b.n	3c18 <z_shell_op_cursor_horiz_move+0x8>
}
    3c34:	4770      	bx	lr
    3c36:	bf00      	nop
    3c38:	0000d441 	.word	0x0000d441

00003c3c <z_shell_op_cond_next_line>:
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
}

void z_shell_op_cond_next_line(const struct shell *shell)
{
    3c3c:	b510      	push	{r4, lr}
    3c3e:	4604      	mov	r4, r0
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
    3c40:	f005 ff52 	bl	9ae8 <z_shell_cursor_in_empty_line>
    3c44:	b128      	cbz	r0, 3c52 <z_shell_op_cond_next_line+0x16>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    3c46:	6960      	ldr	r0, [r4, #20]
    3c48:	4905      	ldr	r1, [pc, #20]	; (3c60 <z_shell_op_cond_next_line+0x24>)
		z_cursor_next_line_move(shell);
	}
}
    3c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3c4e:	f005 bf2a 	b.w	9aa6 <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
    3c52:	f104 0008 	add.w	r0, r4, #8
    3c56:	f005 ff33 	bl	9ac0 <full_line_cmd.isra.0>
    3c5a:	2800      	cmp	r0, #0
    3c5c:	d1f3      	bne.n	3c46 <z_shell_op_cond_next_line+0xa>
}
    3c5e:	bd10      	pop	{r4, pc}
    3c60:	0000cb45 	.word	0x0000cb45

00003c64 <z_shell_op_cursor_position_synchronize>:

void z_shell_op_cursor_position_synchronize(const struct shell *shell)
{
    3c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    3c68:	4606      	mov	r6, r0
{
    3c6a:	4605      	mov	r5, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    3c6c:	f856 4f08 	ldr.w	r4, [r6, #8]!
	bool last_line;

	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    3c70:	f104 0020 	add.w	r0, r4, #32
    3c74:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    3c76:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
    3c78:	f006 f9bb 	bl	9ff2 <z_shell_multiline_data_calc>
	last_line = (cons->cur_y == cons->cur_y_end);

	/* In case cursor reaches the bottom line of a terminal, it will
	 * be moved to the next line.
	 */
	if (full_line_cmd(shell)) {
    3c7c:	4630      	mov	r0, r6
	last_line = (cons->cur_y == cons->cur_y_end);
    3c7e:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
    3c82:	8ce7      	ldrh	r7, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
    3c84:	f005 ff1c 	bl	9ac0 <full_line_cmd.isra.0>
    3c88:	b118      	cbz	r0, 3c92 <z_shell_op_cursor_position_synchronize+0x2e>
    3c8a:	490a      	ldr	r1, [pc, #40]	; (3cb4 <z_shell_op_cursor_position_synchronize+0x50>)
    3c8c:	6968      	ldr	r0, [r5, #20]
    3c8e:	f005 ff0a 	bl	9aa6 <z_shell_raw_fprintf>
		z_cursor_next_line_move(shell);
	}

	if (last_line) {
    3c92:	45b8      	cmp	r8, r7
    3c94:	d107      	bne.n	3ca6 <z_shell_op_cursor_position_synchronize+0x42>
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
							       cons->cur_x_end);
	} else {
		z_shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
    3c96:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
    3c98:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
    3c9a:	4628      	mov	r0, r5
    3c9c:	1ac9      	subs	r1, r1, r3
	}
}
    3c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
    3ca2:	f7ff bfb5 	b.w	3c10 <z_shell_op_cursor_horiz_move>
		z_shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
    3ca6:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
    3ca8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    3caa:	4628      	mov	r0, r5
    3cac:	1ac9      	subs	r1, r1, r3
    3cae:	f7ff ff99 	bl	3be4 <z_shell_op_cursor_vert_move>
    3cb2:	e7f0      	b.n	3c96 <z_shell_op_cursor_position_synchronize+0x32>
    3cb4:	0000cb45 	.word	0x0000cb45

00003cb8 <z_shell_print_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void z_shell_print_cmd(const struct shell *shell)
{
	z_shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
    3cb8:	6882      	ldr	r2, [r0, #8]
    3cba:	4902      	ldr	r1, [pc, #8]	; (3cc4 <z_shell_print_cmd+0xc>)
    3cbc:	6940      	ldr	r0, [r0, #20]
    3cbe:	3242      	adds	r2, #66	; 0x42
    3cc0:	f005 bef1 	b.w	9aa6 <z_shell_raw_fprintf>
    3cc4:	0000c7e7 	.word	0x0000c7e7

00003cc8 <z_shell_vt100_color_set>:
{
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	if (color >= VT100_COLOR_END) {
    3cc8:	2908      	cmp	r1, #8
{
    3cca:	460a      	mov	r2, r1
	if (color >= VT100_COLOR_END) {
    3ccc:	d817      	bhi.n	3cfe <z_shell_vt100_color_set+0x36>
		return;
	}

	if (shell->ctx->vt100_ctx.col.col == color) {
    3cce:	6883      	ldr	r3, [r0, #8]
    3cd0:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
    3cd4:	4291      	cmp	r1, r2
    3cd6:	d012      	beq.n	3cfe <z_shell_vt100_color_set+0x36>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;
    3cd8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	if (color != SHELL_NORMAL) {
    3cdc:	6883      	ldr	r3, [r0, #8]
    3cde:	2a08      	cmp	r2, #8
	return sh->ctx->cfg.flags.use_vt100 == 1;
    3ce0:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    3ce4:	d005      	beq.n	3cf2 <z_shell_vt100_color_set+0x2a>
		Z_SHELL_VT100_CMD(shell, "\e[1;3%dm", color);
    3ce6:	0699      	lsls	r1, r3, #26
    3ce8:	d509      	bpl.n	3cfe <z_shell_vt100_color_set+0x36>
    3cea:	4905      	ldr	r1, [pc, #20]	; (3d00 <z_shell_vt100_color_set+0x38>)
    3cec:	6940      	ldr	r0, [r0, #20]
    3cee:	f005 beda 	b.w	9aa6 <z_shell_raw_fprintf>
	} else {
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_MODESOFF);
    3cf2:	069b      	lsls	r3, r3, #26
    3cf4:	d503      	bpl.n	3cfe <z_shell_vt100_color_set+0x36>
    3cf6:	4903      	ldr	r1, [pc, #12]	; (3d04 <z_shell_vt100_color_set+0x3c>)
    3cf8:	6940      	ldr	r0, [r0, #20]
    3cfa:	f005 bed4 	b.w	9aa6 <z_shell_raw_fprintf>
	}
}
    3cfe:	4770      	bx	lr
    3d00:	0000d448 	.word	0x0000d448
    3d04:	0000be3f 	.word	0x0000be3f

00003d08 <z_shell_vt100_colors_restore>:

void z_shell_vt100_colors_restore(const struct shell *shell,
				  const struct shell_vt100_colors *color)
{
    3d08:	b538      	push	{r3, r4, r5, lr}
    3d0a:	460d      	mov	r5, r1
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	z_shell_vt100_color_set(shell, color->col);
    3d0c:	7809      	ldrb	r1, [r1, #0]
{
    3d0e:	4604      	mov	r4, r0
	z_shell_vt100_color_set(shell, color->col);
    3d10:	f7ff ffda 	bl	3cc8 <z_shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
    3d14:	786a      	ldrb	r2, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
    3d16:	2a07      	cmp	r2, #7
    3d18:	d811      	bhi.n	3d3e <z_shell_vt100_colors_restore+0x36>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
    3d1a:	68a3      	ldr	r3, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
    3d1c:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
    3d20:	4291      	cmp	r1, r2
    3d22:	d00c      	beq.n	3d3e <z_shell_vt100_colors_restore+0x36>
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
    3d24:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
    3d28:	68a3      	ldr	r3, [r4, #8]
    3d2a:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    3d2e:	069b      	lsls	r3, r3, #26
    3d30:	d505      	bpl.n	3d3e <z_shell_vt100_colors_restore+0x36>
    3d32:	6960      	ldr	r0, [r4, #20]
    3d34:	4902      	ldr	r1, [pc, #8]	; (3d40 <z_shell_vt100_colors_restore+0x38>)
}
    3d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
    3d3a:	f005 beb4 	b.w	9aa6 <z_shell_raw_fprintf>
}
    3d3e:	bd38      	pop	{r3, r4, r5, pc}
    3d40:	0000d451 	.word	0x0000d451

00003d44 <z_shell_op_word_remove>:
{
    3d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    3d46:	6883      	ldr	r3, [r0, #8]
	if ((shell->ctx->cmd_buff_len == 0) ||
    3d48:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
    3d4a:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    3d4c:	2a00      	cmp	r2, #0
    3d4e:	d04e      	beq.n	3dee <z_shell_op_word_remove+0xaa>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    3d50:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
	if ((shell->ctx->cmd_buff_len == 0) ||
    3d52:	2800      	cmp	r0, #0
    3d54:	d04b      	beq.n	3dee <z_shell_op_word_remove+0xaa>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    3d56:	3041      	adds	r0, #65	; 0x41
    3d58:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
    3d5a:	f103 0642 	add.w	r6, r3, #66	; 0x42
    3d5e:	4603      	mov	r3, r0
    3d60:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
    3d62:	42b3      	cmp	r3, r6
    3d64:	b2a4      	uxth	r4, r4
    3d66:	4619      	mov	r1, r3
    3d68:	d30d      	bcc.n	3d86 <z_shell_op_word_remove+0x42>
    3d6a:	f811 7901 	ldrb.w	r7, [r1], #-1
    3d6e:	2f20      	cmp	r7, #32
    3d70:	d03b      	beq.n	3dea <z_shell_op_word_remove+0xa6>
    3d72:	4619      	mov	r1, r3
    3d74:	3b01      	subs	r3, #1
	while ((str >= str_start) && (*str != ' ')) {
    3d76:	7808      	ldrb	r0, [r1, #0]
    3d78:	2820      	cmp	r0, #32
    3d7a:	d004      	beq.n	3d86 <z_shell_op_word_remove+0x42>
		++chars_to_delete;
    3d7c:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
    3d7e:	429e      	cmp	r6, r3
		++chars_to_delete;
    3d80:	b2a4      	uxth	r4, r4
		--str;
    3d82:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
    3d84:	d9f5      	bls.n	3d72 <z_shell_op_word_remove+0x2e>
	memmove(str + 1, str + 1 + chars_to_delete,
    3d86:	1c63      	adds	r3, r4, #1
    3d88:	1c4e      	adds	r6, r1, #1
    3d8a:	1b12      	subs	r2, r2, r4
    3d8c:	4419      	add	r1, r3
    3d8e:	4630      	mov	r0, r6
    3d90:	f006 fc19 	bl	a5c6 <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
    3d94:	68a9      	ldr	r1, [r5, #8]
    3d96:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
    3d98:	1b12      	subs	r2, r2, r4
    3d9a:	b292      	uxth	r2, r2
    3d9c:	878a      	strh	r2, [r1, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    3d9e:	440a      	add	r2, r1
    3da0:	2300      	movs	r3, #0
	z_shell_op_cursor_move(shell, -chars_to_delete);
    3da2:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    3da4:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
	z_shell_op_cursor_move(shell, -chars_to_delete);
    3da8:	b209      	sxth	r1, r1
    3daa:	4628      	mov	r0, r5
    3dac:	f005 feb0 	bl	9b10 <z_shell_op_cursor_move>
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    3db0:	68ab      	ldr	r3, [r5, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
    3db2:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    3db6:	069a      	lsls	r2, r3, #26
    3db8:	d503      	bpl.n	3dc2 <z_shell_op_word_remove+0x7e>
    3dba:	490d      	ldr	r1, [pc, #52]	; (3df0 <z_shell_op_word_remove+0xac>)
    3dbc:	6968      	ldr	r0, [r5, #20]
    3dbe:	f005 fe72 	bl	9aa6 <z_shell_raw_fprintf>
	z_shell_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
    3dc2:	4633      	mov	r3, r6
    3dc4:	4a0b      	ldr	r2, [pc, #44]	; (3df4 <z_shell_op_word_remove+0xb0>)
    3dc6:	2108      	movs	r1, #8
    3dc8:	4628      	mov	r0, r5
    3dca:	f005 ffaf 	bl	9d2c <z_shell_fprintf>
	z_clear_eos(shell);
    3dce:	4628      	mov	r0, r5
    3dd0:	f7ff fefc 	bl	3bcc <z_clear_eos>
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    3dd4:	68ab      	ldr	r3, [r5, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
    3dd6:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    3dda:	069b      	lsls	r3, r3, #26
    3ddc:	d507      	bpl.n	3dee <z_shell_op_word_remove+0xaa>
    3dde:	6968      	ldr	r0, [r5, #20]
    3de0:	4905      	ldr	r1, [pc, #20]	; (3df8 <z_shell_op_word_remove+0xb4>)
}
    3de2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3de6:	f005 be5e 	b.w	9aa6 <z_shell_raw_fprintf>
    3dea:	460b      	mov	r3, r1
    3dec:	e7b8      	b.n	3d60 <z_shell_op_word_remove+0x1c>
    3dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3df0:	0000be44 	.word	0x0000be44
    3df4:	0000c7e7 	.word	0x0000c7e7
    3df8:	0000be48 	.word	0x0000be48

00003dfc <reprint_from_cursor>:
{
    3dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e00:	4604      	mov	r4, r0
    3e02:	460d      	mov	r5, r1
	if (data_removed) {
    3e04:	4617      	mov	r7, r2
    3e06:	b10a      	cbz	r2, 3e0c <reprint_from_cursor+0x10>
		z_clear_eos(shell);
    3e08:	f7ff fee0 	bl	3bcc <z_clear_eos>
	if (z_flag_obscure_get(shell)) {
    3e0c:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.obscure == 1;
    3e0e:	f8d3 23a0 	ldr.w	r2, [r3, #928]	; 0x3a0
    3e12:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
    3e14:	0752      	lsls	r2, r2, #29
    3e16:	f100 0042 	add.w	r0, r0, #66	; 0x42
    3e1a:	4403      	add	r3, r0
    3e1c:	d521      	bpl.n	3e62 <reprint_from_cursor+0x66>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    3e1e:	4618      	mov	r0, r3
    3e20:	f006 fb96 	bl	a550 <strlen>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
    3e24:	f8df 8050 	ldr.w	r8, [pc, #80]	; 3e78 <reprint_from_cursor+0x7c>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    3e28:	4606      	mov	r6, r0
		while (len--) {
    3e2a:	3e01      	subs	r6, #1
    3e2c:	d214      	bcs.n	3e58 <reprint_from_cursor+0x5c>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    3e2e:	4620      	mov	r0, r4
    3e30:	f850 3f08 	ldr.w	r3, [r0, #8]!
    3e34:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    3e36:	87da      	strh	r2, [r3, #62]	; 0x3e
	if (full_line_cmd(shell)) {
    3e38:	f005 fe42 	bl	9ac0 <full_line_cmd.isra.0>
    3e3c:	b128      	cbz	r0, 3e4a <reprint_from_cursor+0x4e>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
    3e3e:	b107      	cbz	r7, 3e42 <reprint_from_cursor+0x46>
    3e40:	b11d      	cbz	r5, 3e4a <reprint_from_cursor+0x4e>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    3e42:	490b      	ldr	r1, [pc, #44]	; (3e70 <reprint_from_cursor+0x74>)
    3e44:	6960      	ldr	r0, [r4, #20]
    3e46:	f005 fe2e 	bl	9aa6 <z_shell_raw_fprintf>
	z_shell_op_cursor_move(shell, -diff);
    3e4a:	4269      	negs	r1, r5
    3e4c:	4620      	mov	r0, r4
    3e4e:	b209      	sxth	r1, r1
}
    3e50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_shell_op_cursor_move(shell, -diff);
    3e54:	f005 be5c 	b.w	9b10 <z_shell_op_cursor_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
    3e58:	6960      	ldr	r0, [r4, #20]
    3e5a:	4641      	mov	r1, r8
    3e5c:	f005 fe23 	bl	9aa6 <z_shell_raw_fprintf>
    3e60:	e7e3      	b.n	3e2a <reprint_from_cursor+0x2e>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s",
    3e62:	4a04      	ldr	r2, [pc, #16]	; (3e74 <reprint_from_cursor+0x78>)
    3e64:	2108      	movs	r1, #8
    3e66:	4620      	mov	r0, r4
    3e68:	f005 ff60 	bl	9d2c <z_shell_fprintf>
    3e6c:	e7df      	b.n	3e2e <reprint_from_cursor+0x32>
    3e6e:	bf00      	nop
    3e70:	0000cb45 	.word	0x0000cb45
    3e74:	0000c7e7 	.word	0x0000c7e7
    3e78:	0000ca8f 	.word	0x0000ca8f

00003e7c <z_shell_op_char_insert>:
{
    3e7c:	b513      	push	{r0, r1, r4, lr}
	if (z_flag_insert_mode_get(shell) &&
    3e7e:	6883      	ldr	r3, [r0, #8]
{
    3e80:	f88d 1007 	strb.w	r1, [sp, #7]
	return sh->ctx->cfg.flags.insert_mode == 1;
    3e84:	f8d3 23a0 	ldr.w	r2, [r3, #928]	; 0x3a0
    3e88:	4604      	mov	r4, r0
	if (z_flag_insert_mode_get(shell) &&
    3e8a:	07d0      	lsls	r0, r2, #31
    3e8c:	d523      	bpl.n	3ed6 <z_shell_op_char_insert+0x5a>
	    (shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
    3e8e:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
	if (z_flag_insert_mode_get(shell) &&
    3e90:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    3e92:	428a      	cmp	r2, r1
    3e94:	d01f      	beq.n	3ed6 <z_shell_op_char_insert+0x5a>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    3e96:	1c48      	adds	r0, r1, #1
    3e98:	87d8      	strh	r0, [r3, #62]	; 0x3e
    3e9a:	440b      	add	r3, r1
		char_replace(shell, data);
    3e9c:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    3ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	if (!z_flag_echo_get(shell)) {
    3ea4:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.echo == 1;
    3ea6:	f8d3 13a0 	ldr.w	r1, [r3, #928]	; 0x3a0
    3eaa:	0789      	lsls	r1, r1, #30
    3eac:	d511      	bpl.n	3ed2 <z_shell_op_char_insert+0x56>
	return sh->ctx->cfg.flags.obscure == 1;
    3eae:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    3eb2:	6960      	ldr	r0, [r4, #20]
    3eb4:	490b      	ldr	r1, [pc, #44]	; (3ee4 <z_shell_op_char_insert+0x68>)
		data = '*';
    3eb6:	f013 0f04 	tst.w	r3, #4
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    3eba:	bf18      	it	ne
    3ebc:	222a      	movne	r2, #42	; 0x2a
    3ebe:	f005 fdf2 	bl	9aa6 <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(shell)) {
    3ec2:	4620      	mov	r0, r4
    3ec4:	f005 fe10 	bl	9ae8 <z_shell_cursor_in_empty_line>
    3ec8:	b118      	cbz	r0, 3ed2 <z_shell_op_char_insert+0x56>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    3eca:	4907      	ldr	r1, [pc, #28]	; (3ee8 <z_shell_op_char_insert+0x6c>)
    3ecc:	6960      	ldr	r0, [r4, #20]
    3ece:	f005 fdea 	bl	9aa6 <z_shell_raw_fprintf>
}
    3ed2:	b002      	add	sp, #8
    3ed4:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
    3ed6:	2201      	movs	r2, #1
    3ed8:	f10d 0107 	add.w	r1, sp, #7
    3edc:	4620      	mov	r0, r4
    3ede:	f005 ff32 	bl	9d46 <data_insert>
}
    3ee2:	e7f6      	b.n	3ed2 <z_shell_op_char_insert+0x56>
    3ee4:	0000d445 	.word	0x0000d445
    3ee8:	0000cb45 	.word	0x0000cb45

00003eec <z_shell_print_prompt_and_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    3eec:	6883      	ldr	r3, [r0, #8]
    3eee:	4a0a      	ldr	r2, [pc, #40]	; (3f18 <z_shell_print_prompt_and_cmd+0x2c>)
    3ef0:	681b      	ldr	r3, [r3, #0]
{
    3ef2:	b510      	push	{r4, lr}
    3ef4:	4604      	mov	r4, r0
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    3ef6:	2102      	movs	r1, #2
    3ef8:	f005 ff18 	bl	9d2c <z_shell_fprintf>
	if (z_flag_echo_get(shell)) {
    3efc:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.echo == 1;
    3efe:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    3f02:	079b      	lsls	r3, r3, #30
    3f04:	d507      	bpl.n	3f16 <z_shell_print_prompt_and_cmd+0x2a>
		z_shell_print_cmd(shell);
    3f06:	4620      	mov	r0, r4
    3f08:	f7ff fed6 	bl	3cb8 <z_shell_print_cmd>
		z_shell_op_cursor_position_synchronize(shell);
    3f0c:	4620      	mov	r0, r4
}
    3f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_op_cursor_position_synchronize(shell);
    3f12:	f7ff bea7 	b.w	3c64 <z_shell_op_cursor_position_synchronize>
}
    3f16:	bd10      	pop	{r4, pc}
    3f18:	0000c7e7 	.word	0x0000c7e7

00003f1c <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(const struct device *arg)
{
    3f1c:	b513      	push	{r0, r1, r4, lr}
    3f1e:	4809      	ldr	r0, [pc, #36]	; (3f44 <enable_shell_uart+0x28>)
    3f20:	f007 fa5e 	bl	b3e0 <z_device_ready>
    3f24:	b158      	cbz	r0, 3f3e <enable_shell_uart+0x22>

	if (IS_ENABLED(CONFIG_MCUMGR_SMP_SHELL)) {
		smp_shell_init();
	}

	shell_init(&shell_uart, dev, cfg_flags, log_backend, level);
    3f26:	4a08      	ldr	r2, [pc, #32]	; (3f48 <enable_shell_uart+0x2c>)
    3f28:	4906      	ldr	r1, [pc, #24]	; (3f44 <enable_shell_uart+0x28>)
    3f2a:	6812      	ldr	r2, [r2, #0]
    3f2c:	4807      	ldr	r0, [pc, #28]	; (3f4c <enable_shell_uart+0x30>)
    3f2e:	2400      	movs	r4, #0
    3f30:	9400      	str	r4, [sp, #0]
    3f32:	2301      	movs	r3, #1
    3f34:	f7ff fa5c 	bl	33f0 <shell_init>

	return 0;
    3f38:	4620      	mov	r0, r4
}
    3f3a:	b002      	add	sp, #8
    3f3c:	bd10      	pop	{r4, pc}
		return -ENODEV;
    3f3e:	f06f 0012 	mvn.w	r0, #18
    3f42:	e7fa      	b.n	3f3a <enable_shell_uart+0x1e>
    3f44:	0000bb80 	.word	0x0000bb80
    3f48:	0000c230 	.word	0x0000c230
    3f4c:	0000bd48 	.word	0x0000bd48

00003f50 <init>:
{
    3f50:	b570      	push	{r4, r5, r6, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    3f52:	6846      	ldr	r6, [r0, #4]
{
    3f54:	460c      	mov	r4, r1
	sh_uart->ctrl_blk->dev = (const struct device *)config;
    3f56:	6831      	ldr	r1, [r6, #0]
	ring_buf_reset(sh_uart->tx_ringbuf);
    3f58:	68b0      	ldr	r0, [r6, #8]
	sh_uart->ctrl_blk->context = context;
    3f5a:	608b      	str	r3, [r1, #8]
 *
 * @param buf Address of ring buffer.
 */
static inline void ring_buf_reset(struct ring_buf *buf)
{
	buf->head = 0;
    3f5c:	2500      	movs	r5, #0
	sh_uart->ctrl_blk->handler = evt_handler;
    3f5e:	e9c1 4200 	strd	r4, r2, [r1]
	buf->tail = 0;
	memset(&buf->misc, 0, sizeof(buf->misc));
    3f62:	2208      	movs	r2, #8
	buf->tail = 0;
    3f64:	e9c0 5500 	strd	r5, r5, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    3f68:	4629      	mov	r1, r5
    3f6a:	4410      	add	r0, r2
    3f6c:	f006 fb4d 	bl	a60a <memset>
	ring_buf_reset(sh_uart->rx_ringbuf);
    3f70:	68f0      	ldr	r0, [r6, #12]
    3f72:	2208      	movs	r2, #8
	buf->tail = 0;
    3f74:	e9c0 5500 	strd	r5, r5, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    3f78:	4629      	mov	r1, r5
    3f7a:	4410      	add	r0, r2
    3f7c:	f006 fb45 	bl	a60a <memset>
	sh_uart->ctrl_blk->tx_busy = 0;
    3f80:	6833      	ldr	r3, [r6, #0]
    3f82:	60dd      	str	r5, [r3, #12]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    3f84:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    3f86:	b12b      	cbz	r3, 3f94 <init+0x44>
    3f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3f8a:	b11b      	cbz	r3, 3f94 <init+0x44>
		api->irq_callback_set(dev, cb, user_data);
    3f8c:	4905      	ldr	r1, [pc, #20]	; (3fa4 <init+0x54>)
    3f8e:	4632      	mov	r2, r6
    3f90:	4620      	mov	r0, r4
    3f92:	4798      	blx	r3
	if (api->irq_rx_enable != NULL) {
    3f94:	68a3      	ldr	r3, [r4, #8]
    3f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f98:	b10b      	cbz	r3, 3f9e <init+0x4e>
		api->irq_rx_enable(dev);
    3f9a:	4620      	mov	r0, r4
    3f9c:	4798      	blx	r3
}
    3f9e:	2000      	movs	r0, #0
    3fa0:	bd70      	pop	{r4, r5, r6, pc}
    3fa2:	bf00      	nop
    3fa4:	00009ec1 	.word	0x00009ec1

00003fa8 <z_shell_cmd_get>:

const struct shell_static_entry *z_shell_cmd_get(
					const struct shell_static_entry *parent,
					size_t idx,
					struct shell_static_entry *dloc)
{
    3fa8:	b510      	push	{r4, lr}
    3faa:	460b      	mov	r3, r1
    3fac:	4614      	mov	r4, r2
	const struct shell_static_entry *res = NULL;

	if (parent == NULL) {
    3fae:	b950      	cbnz	r0, 3fc6 <z_shell_cmd_get+0x1e>
	return ((uint8_t *)__shell_root_cmds_end -
    3fb0:	490e      	ldr	r1, [pc, #56]	; (3fec <z_shell_cmd_get+0x44>)
    3fb2:	4a0f      	ldr	r2, [pc, #60]	; (3ff0 <z_shell_cmd_get+0x48>)
    3fb4:	1a52      	subs	r2, r2, r1
		return  (idx < shell_root_cmd_count()) ?
				shell_root_cmd_get(idx)->u.entry : NULL;
    3fb6:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
    3fba:	d20f      	bcs.n	3fdc <z_shell_cmd_get+0x34>
    3fbc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    3fc0:	684c      	ldr	r4, [r1, #4]
			}
		}
	}

	return res;
}
    3fc2:	4620      	mov	r0, r4
    3fc4:	bd10      	pop	{r4, pc}
	if (parent->subcmd) {
    3fc6:	6881      	ldr	r1, [r0, #8]
    3fc8:	b141      	cbz	r1, 3fdc <z_shell_cmd_get+0x34>
		if (parent->subcmd->is_dynamic) {
    3fca:	684a      	ldr	r2, [r1, #4]
    3fcc:	7809      	ldrb	r1, [r1, #0]
    3fce:	b139      	cbz	r1, 3fe0 <z_shell_cmd_get+0x38>
			parent->subcmd->u.dynamic_get(idx, dloc);
    3fd0:	4618      	mov	r0, r3
    3fd2:	4621      	mov	r1, r4
    3fd4:	4790      	blx	r2
			if (dloc->syntax != NULL) {
    3fd6:	6823      	ldr	r3, [r4, #0]
    3fd8:	2b00      	cmp	r3, #0
    3fda:	d1f2      	bne.n	3fc2 <z_shell_cmd_get+0x1a>
	const struct shell_static_entry *res = NULL;
    3fdc:	2400      	movs	r4, #0
    3fde:	e7f0      	b.n	3fc2 <z_shell_cmd_get+0x1a>
			if (parent->subcmd->u.entry[idx].syntax != NULL) {
    3fe0:	2014      	movs	r0, #20
    3fe2:	4343      	muls	r3, r0
    3fe4:	18d4      	adds	r4, r2, r3
    3fe6:	58d3      	ldr	r3, [r2, r3]
    3fe8:	e7f6      	b.n	3fd8 <z_shell_cmd_get+0x30>
    3fea:	bf00      	nop
    3fec:	0000bd74 	.word	0x0000bd74
    3ff0:	0000bdd4 	.word	0x0000bdd4

00003ff4 <z_shell_wildcard_process>:


enum shell_wildcard_status z_shell_wildcard_process(const struct shell *shell,
					const struct shell_static_entry *cmd,
					const char *pattern)
{
    3ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ff8:	4607      	mov	r7, r0
    3ffa:	b089      	sub	sp, #36	; 0x24
    3ffc:	4615      	mov	r5, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
    3ffe:	4689      	mov	r9, r1
    4000:	b921      	cbnz	r1, 400c <z_shell_wildcard_process+0x18>
		return ret_val;
    4002:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
    4004:	4620      	mov	r0, r4
    4006:	b009      	add	sp, #36	; 0x24
    4008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!z_shell_has_wildcard(pattern)) {
    400c:	4610      	mov	r0, r2
    400e:	f006 f9db 	bl	a3c8 <z_shell_has_wildcard>
    4012:	2800      	cmp	r0, #0
    4014:	d0f5      	beq.n	4002 <z_shell_wildcard_process+0xe>
	size_t cnt = 0;
    4016:	f04f 0800 	mov.w	r8, #0
	size_t cmd_idx = 0;
    401a:	4641      	mov	r1, r8
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    401c:	2402      	movs	r4, #2
    401e:	e024      	b.n	406a <z_shell_wildcard_process+0x76>
    4020:	465c      	mov	r4, fp
    4022:	e03c      	b.n	409e <z_shell_wildcard_process+0xaa>
	completion_addr = strstr(buff, pattern);
    4024:	4629      	mov	r1, r5
    4026:	f50a 70f1 	add.w	r0, sl, #482	; 0x1e2
    402a:	f006 faf7 	bl	a61c <strstr>
	if (!completion_addr) {
    402e:	4606      	mov	r6, r0
    4030:	2800      	cmp	r0, #0
    4032:	d04e      	beq.n	40d2 <z_shell_wildcard_process+0xde>
    4034:	f006 fa8c 	bl	a550 <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
    4038:	b282      	uxth	r2, r0
    403a:	1c60      	adds	r0, r4, #1
    403c:	3201      	adds	r2, #1
    403e:	4631      	mov	r1, r6
    4040:	4430      	add	r0, r6
    4042:	f006 fac0 	bl	a5c6 <memmove>
	memcpy(completion_addr, cmd, cmd_len);
    4046:	4622      	mov	r2, r4
    4048:	4659      	mov	r1, fp
    404a:	4630      	mov	r0, r6
    404c:	f006 fad2 	bl	a5f4 <memcpy>
	completion_addr[cmd_len] = ' ';
    4050:	f04f 0320 	mov.w	r3, #32
    4054:	5533      	strb	r3, [r6, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
    4056:	f8ba 0040 	ldrh.w	r0, [sl, #64]	; 0x40
    405a:	4404      	add	r4, r0
    405c:	3401      	adds	r4, #1
    405e:	f8aa 4040 	strh.w	r4, [sl, #64]	; 0x40
			cnt++;
    4062:	f108 0801 	add.w	r8, r8, #1
			ret_val = command_add(shell->ctx->temp_buff,
    4066:	2400      	movs	r4, #0
    4068:	9901      	ldr	r1, [sp, #4]
	while ((entry = z_shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
    406a:	1c4b      	adds	r3, r1, #1
    406c:	aa03      	add	r2, sp, #12
    406e:	4648      	mov	r0, r9
    4070:	9301      	str	r3, [sp, #4]
    4072:	f7ff ff99 	bl	3fa8 <z_shell_cmd_get>
    4076:	4606      	mov	r6, r0
    4078:	b1f8      	cbz	r0, 40ba <z_shell_wildcard_process+0xc6>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
    407a:	6831      	ldr	r1, [r6, #0]
    407c:	2200      	movs	r2, #0
    407e:	4628      	mov	r0, r5
    4080:	f005 f8cf 	bl	9222 <fnmatch>
    4084:	2800      	cmp	r0, #0
    4086:	d1ef      	bne.n	4068 <z_shell_wildcard_process+0x74>
			ret_val = command_add(shell->ctx->temp_buff,
    4088:	f8d6 b000 	ldr.w	fp, [r6]
    408c:	f8d7 a008 	ldr.w	sl, [r7, #8]
    4090:	f1bb 0f00 	cmp.w	fp, #0
    4094:	d0c4      	beq.n	4020 <z_shell_wildcard_process+0x2c>
    4096:	4658      	mov	r0, fp
    4098:	f006 fa5a 	bl	a550 <strlen>
    409c:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
    409e:	f8ba 2040 	ldrh.w	r2, [sl, #64]	; 0x40
    40a2:	3201      	adds	r2, #1
    40a4:	4422      	add	r2, r4
    40a6:	f5b2 7fd0 	cmp.w	r2, #416	; 0x1a0
    40aa:	ddbb      	ble.n	4024 <z_shell_wildcard_process+0x30>
				z_shell_fprintf(shell, SHELL_WARNING,
    40ac:	4a0a      	ldr	r2, [pc, #40]	; (40d8 <z_shell_wildcard_process+0xe4>)
    40ae:	462b      	mov	r3, r5
    40b0:	2103      	movs	r1, #3
    40b2:	4638      	mov	r0, r7
    40b4:	f005 fe3a 	bl	9d2c <z_shell_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
    40b8:	2401      	movs	r4, #1
	if (cnt > 0) {
    40ba:	f1b8 0f00 	cmp.w	r8, #0
    40be:	d0a1      	beq.n	4004 <z_shell_wildcard_process+0x10>
		z_shell_pattern_remove(shell->ctx->temp_buff,
    40c0:	68b8      	ldr	r0, [r7, #8]
    40c2:	462a      	mov	r2, r5
    40c4:	f100 0140 	add.w	r1, r0, #64	; 0x40
    40c8:	f500 70f1 	add.w	r0, r0, #482	; 0x1e2
    40cc:	f006 f86b 	bl	a1a6 <z_shell_pattern_remove>
	return ret_val;
    40d0:	e798      	b.n	4004 <z_shell_wildcard_process+0x10>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    40d2:	2402      	movs	r4, #2
    40d4:	e7f1      	b.n	40ba <z_shell_wildcard_process+0xc6>
    40d6:	bf00      	nop
    40d8:	0000d46e 	.word	0x0000d46e

000040dc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    40dc:	4901      	ldr	r1, [pc, #4]	; (40e4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    40de:	2210      	movs	r2, #16
	str	r2, [r1]
    40e0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    40e2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    40e4:	e000ed10 	.word	0xe000ed10

000040e8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    40e8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    40ea:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    40ec:	f380 8811 	msr	BASEPRI, r0
	isb
    40f0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    40f4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    40f8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    40fa:	b662      	cpsie	i
	isb
    40fc:	f3bf 8f6f 	isb	sy

	bx	lr
    4100:	4770      	bx	lr
    4102:	bf00      	nop

00004104 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    4104:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    4106:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    4108:	f381 8811 	msr	BASEPRI, r1

	wfe
    410c:	bf20      	wfe

	msr	BASEPRI, r0
    410e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    4112:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    4114:	4770      	bx	lr
    4116:	bf00      	nop

00004118 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    4118:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    411a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    411c:	4a0b      	ldr	r2, [pc, #44]	; (414c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    411e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    4120:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    4122:	bf1e      	ittt	ne
	movne	r1, #0
    4124:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    4126:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    4128:	f007 f997 	blne	b45a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    412c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    412e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    4132:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    4136:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    413a:	4905      	ldr	r1, [pc, #20]	; (4150 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    413c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    413e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    4140:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    4142:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    4146:	4903      	ldr	r1, [pc, #12]	; (4154 <_isr_wrapper+0x3c>)
	bx r1
    4148:	4708      	bx	r1
    414a:	0000      	.short	0x0000
	ldr r2, =_kernel
    414c:	2000122c 	.word	0x2000122c
	ldr r1, =_sw_isr_table
    4150:	0000bbc8 	.word	0x0000bbc8
	ldr r1, =z_arm_int_exit
    4154:	00004351 	.word	0x00004351

00004158 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    4158:	bf30      	wfi
    b z_SysNmiOnReset
    415a:	f7ff bffd 	b.w	4158 <z_SysNmiOnReset>
    415e:	bf00      	nop

00004160 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4160:	4913      	ldr	r1, [pc, #76]	; (41b0 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    4162:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    4164:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    4168:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    416a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    416e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4172:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    4174:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    4178:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    417c:	4f0d      	ldr	r7, [pc, #52]	; (41b4 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    417e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    4182:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    4184:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    4186:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4188:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
    418c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    418e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    4192:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    4196:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    4198:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    419a:	f000 fa81 	bl	46a0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    419e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    41a2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    41a6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    41aa:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    41ae:	4770      	bx	lr
    ldr r1, =_kernel
    41b0:	2000122c 	.word	0x2000122c
    ldr v4, =_SCS_ICSR
    41b4:	e000ed04 	.word	0xe000ed04

000041b8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    41b8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    41bc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    41be:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    41c2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    41c6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    41c8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    41cc:	2902      	cmp	r1, #2
    beq _oops
    41ce:	d0ff      	beq.n	41d0 <_oops>

000041d0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    41d0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    41d2:	f006 f94d 	bl	a470 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    41d6:	bd01      	pop	{r0, pc}

000041d8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    41d8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    41da:	2b00      	cmp	r3, #0
    41dc:	db08      	blt.n	41f0 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    41de:	2201      	movs	r2, #1
    41e0:	f000 001f 	and.w	r0, r0, #31
    41e4:	fa02 f000 	lsl.w	r0, r2, r0
    41e8:	095b      	lsrs	r3, r3, #5
    41ea:	4a02      	ldr	r2, [pc, #8]	; (41f4 <arch_irq_enable+0x1c>)
    41ec:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    41f0:	4770      	bx	lr
    41f2:	bf00      	nop
    41f4:	e000e100 	.word	0xe000e100

000041f8 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    41f8:	4b05      	ldr	r3, [pc, #20]	; (4210 <arch_irq_is_enabled+0x18>)
    41fa:	0942      	lsrs	r2, r0, #5
    41fc:	f000 001f 	and.w	r0, r0, #31
    4200:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4204:	2301      	movs	r3, #1
    4206:	fa03 f000 	lsl.w	r0, r3, r0
}
    420a:	4010      	ands	r0, r2
    420c:	4770      	bx	lr
    420e:	bf00      	nop
    4210:	e000e100 	.word	0xe000e100

00004214 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    4214:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    4216:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4218:	bfa8      	it	ge
    421a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    421e:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4222:	bfb8      	it	lt
    4224:	4b06      	ldrlt	r3, [pc, #24]	; (4240 <z_arm_irq_priority_set+0x2c>)
    4226:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    422a:	bfac      	ite	ge
    422c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4230:	f000 000f 	andlt.w	r0, r0, #15
    4234:	b2c9      	uxtb	r1, r1
    4236:	bfb4      	ite	lt
    4238:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    423a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    423e:	4770      	bx	lr
    4240:	e000ed14 	.word	0xe000ed14

00004244 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4244:	4a0b      	ldr	r2, [pc, #44]	; (4274 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    4246:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4248:	4b0b      	ldr	r3, [pc, #44]	; (4278 <z_arm_prep_c+0x34>)
    424a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    424e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4250:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4254:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4258:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    425c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4260:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    4264:	f003 f9ec 	bl	7640 <z_bss_zero>
	z_data_copy();
    4268:	f004 fbea 	bl	8a40 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    426c:	f000 f9ac 	bl	45c8 <z_arm_interrupt_init>
	z_cstart();
    4270:	f003 f9f0 	bl	7654 <z_cstart>
    4274:	00000000 	.word	0x00000000
    4278:	e000ed00 	.word	0xe000ed00

0000427c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    427c:	4a0a      	ldr	r2, [pc, #40]	; (42a8 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    427e:	490b      	ldr	r1, [pc, #44]	; (42ac <arch_swap+0x30>)
	_current->arch.basepri = key;
    4280:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    4282:	6809      	ldr	r1, [r1, #0]
    4284:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4288:	4909      	ldr	r1, [pc, #36]	; (42b0 <arch_swap+0x34>)
	_current->arch.basepri = key;
    428a:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    428e:	684b      	ldr	r3, [r1, #4]
    4290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4294:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    4296:	2300      	movs	r3, #0
    4298:	f383 8811 	msr	BASEPRI, r3
    429c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    42a0:	6893      	ldr	r3, [r2, #8]
}
    42a2:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    42a6:	4770      	bx	lr
    42a8:	2000122c 	.word	0x2000122c
    42ac:	0000c5dc 	.word	0x0000c5dc
    42b0:	e000ed00 	.word	0xe000ed00

000042b4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    42b4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    42b8:	9b00      	ldr	r3, [sp, #0]
    42ba:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    42be:	490a      	ldr	r1, [pc, #40]	; (42e8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    42c0:	9b01      	ldr	r3, [sp, #4]
    42c2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    42c6:	9b02      	ldr	r3, [sp, #8]
    42c8:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    42cc:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    42d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    42d4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    42d8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    42dc:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    42de:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    42e0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    42e2:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    42e6:	4770      	bx	lr
    42e8:	0000a459 	.word	0x0000a459

000042ec <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    42ec:	4a0c      	ldr	r2, [pc, #48]	; (4320 <z_check_thread_stack_fail+0x34>)
{
    42ee:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    42f0:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    42f2:	b198      	cbz	r0, 431c <z_check_thread_stack_fail+0x30>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    42f4:	f113 0f16 	cmn.w	r3, #22
    42f8:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    42fc:	d005      	beq.n	430a <z_check_thread_stack_fail+0x1e>
    42fe:	f1a0 0220 	sub.w	r2, r0, #32
    4302:	429a      	cmp	r2, r3
    4304:	d806      	bhi.n	4314 <z_check_thread_stack_fail+0x28>
    4306:	4283      	cmp	r3, r0
    4308:	d204      	bcs.n	4314 <z_check_thread_stack_fail+0x28>
    430a:	4281      	cmp	r1, r0
    430c:	bf2c      	ite	cs
    430e:	2100      	movcs	r1, #0
    4310:	2101      	movcc	r1, #1
    4312:	e000      	b.n	4316 <z_check_thread_stack_fail+0x2a>
    4314:	2100      	movs	r1, #0
    4316:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    4318:	bf08      	it	eq
    431a:	2000      	moveq	r0, #0
}
    431c:	4770      	bx	lr
    431e:	bf00      	nop
    4320:	2000122c 	.word	0x2000122c

00004324 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    4324:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    4326:	4b09      	ldr	r3, [pc, #36]	; (434c <arch_switch_to_main_thread+0x28>)
    4328:	6098      	str	r0, [r3, #8]
{
    432a:	460d      	mov	r5, r1
    432c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    432e:	f000 f9b7 	bl	46a0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    4332:	4620      	mov	r0, r4
    4334:	f385 8809 	msr	PSP, r5
    4338:	2100      	movs	r1, #0
    433a:	b663      	cpsie	if
    433c:	f381 8811 	msr	BASEPRI, r1
    4340:	f3bf 8f6f 	isb	sy
    4344:	2200      	movs	r2, #0
    4346:	2300      	movs	r3, #0
    4348:	f006 f886 	bl	a458 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    434c:	2000122c 	.word	0x2000122c

00004350 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    4350:	4b04      	ldr	r3, [pc, #16]	; (4364 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    4352:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4354:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    4356:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4358:	d003      	beq.n	4362 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    435a:	4903      	ldr	r1, [pc, #12]	; (4368 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    435c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    4360:	600a      	str	r2, [r1, #0]

00004362 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    4362:	4770      	bx	lr
	ldr r3, =_kernel
    4364:	2000122c 	.word	0x2000122c
	ldr r1, =_SCS_ICSR
    4368:	e000ed04 	.word	0xe000ed04

0000436c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    436c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4370:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4374:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    4376:	4672      	mov	r2, lr
	bl z_arm_fault
    4378:	f000 f89a 	bl	44b0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    437c:	bd01      	pop	{r0, pc}
    437e:	bf00      	nop

00004380 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    4380:	2000      	movs	r0, #0
    msr CONTROL, r0
    4382:	f380 8814 	msr	CONTROL, r0
    isb
    4386:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    438a:	f007 fb83 	bl	ba94 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    438e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    4390:	4911      	ldr	r1, [pc, #68]	; (43d8 <__start+0x58>)
    str r0, [r1]
    4392:	6008      	str	r0, [r1, #0]
    dsb
    4394:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4398:	4810      	ldr	r0, [pc, #64]	; (43dc <__start+0x5c>)
    msr msp, r0
    439a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    439e:	f000 f92f 	bl	4600 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    43a2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    43a4:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
    43a8:	480d      	ldr	r0, [pc, #52]	; (43e0 <__start+0x60>)
    ldr r1, =0xaa
    43aa:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    43ae:	f44f 6202 	mov.w	r2, #2080	; 0x820
    bl memset
    43b2:	f006 f92a 	bl	a60a <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    43b6:	480a      	ldr	r0, [pc, #40]	; (43e0 <__start+0x60>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    43b8:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    43bc:	1840      	adds	r0, r0, r1
    msr PSP, r0
    43be:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    43c2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    43c6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    43c8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    43ca:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    43ce:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    43d2:	f7ff ff37 	bl	4244 <z_arm_prep_c>
    43d6:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    43d8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    43dc:	20002500 	.word	0x20002500
    ldr r0, =z_interrupt_stacks
    43e0:	20002680 	.word	0x20002680

000043e4 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    43e4:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    43e6:	4b19      	ldr	r3, [pc, #100]	; (444c <mem_manage_fault+0x68>)
{
    43e8:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    43ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    43ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    43ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    43f0:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    43f2:	0790      	lsls	r0, r2, #30
    43f4:	d519      	bpl.n	442a <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    43f6:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    43f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    43fa:	0612      	lsls	r2, r2, #24
    43fc:	d515      	bpl.n	442a <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    43fe:	b119      	cbz	r1, 4408 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4402:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    4406:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    440a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    440c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    440e:	06d1      	lsls	r1, r2, #27
    4410:	d40e      	bmi.n	4430 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    4412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4414:	079a      	lsls	r2, r3, #30
    4416:	d40b      	bmi.n	4430 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4418:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    441a:	4a0c      	ldr	r2, [pc, #48]	; (444c <mem_manage_fault+0x68>)
    441c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    441e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    4422:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    4424:	2300      	movs	r3, #0
    4426:	7023      	strb	r3, [r4, #0]

	return reason;
}
    4428:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    442a:	f06f 0015 	mvn.w	r0, #21
    442e:	e7eb      	b.n	4408 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    4430:	4b06      	ldr	r3, [pc, #24]	; (444c <mem_manage_fault+0x68>)
    4432:	685b      	ldr	r3, [r3, #4]
    4434:	051b      	lsls	r3, r3, #20
    4436:	d5ef      	bpl.n	4418 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    4438:	4629      	mov	r1, r5
    443a:	f7ff ff57 	bl	42ec <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    443e:	2800      	cmp	r0, #0
    4440:	d0ea      	beq.n	4418 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    4442:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    4446:	2002      	movs	r0, #2
    4448:	e7e7      	b.n	441a <mem_manage_fault+0x36>
    444a:	bf00      	nop
    444c:	e000ed00 	.word	0xe000ed00

00004450 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4450:	4b0d      	ldr	r3, [pc, #52]	; (4488 <bus_fault.isra.0+0x38>)
    4452:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4454:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    4456:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4458:	0592      	lsls	r2, r2, #22
    445a:	d508      	bpl.n	446e <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    445c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    445e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4460:	0412      	lsls	r2, r2, #16
    4462:	d504      	bpl.n	446e <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    4464:	b118      	cbz	r0, 446e <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4466:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4468:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    446c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    446e:	4b06      	ldr	r3, [pc, #24]	; (4488 <bus_fault.isra.0+0x38>)
    4470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    4472:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4474:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4476:	bf58      	it	pl
    4478:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    447a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    447c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    447e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    4482:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    4484:	7008      	strb	r0, [r1, #0]

	return reason;
}
    4486:	4770      	bx	lr
    4488:	e000ed00 	.word	0xe000ed00

0000448c <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    448c:	4b07      	ldr	r3, [pc, #28]	; (44ac <usage_fault.isra.0+0x20>)
    448e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4492:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4496:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    449a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    449c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    44a0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    44a4:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    44a6:	2000      	movs	r0, #0
    44a8:	4770      	bx	lr
    44aa:	bf00      	nop
    44ac:	e000ed00 	.word	0xe000ed00

000044b0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    44b0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    44b2:	4b3e      	ldr	r3, [pc, #248]	; (45ac <z_arm_fault+0xfc>)
    44b4:	685b      	ldr	r3, [r3, #4]
{
    44b6:	b08a      	sub	sp, #40	; 0x28
    44b8:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    44ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
    44be:	2600      	movs	r6, #0
    44c0:	f386 8811 	msr	BASEPRI, r6
    44c4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    44c8:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    44cc:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    44d0:	d111      	bne.n	44f6 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    44d2:	f002 010c 	and.w	r1, r2, #12
    44d6:	2908      	cmp	r1, #8
    44d8:	d00d      	beq.n	44f6 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    44da:	0712      	lsls	r2, r2, #28
    44dc:	d401      	bmi.n	44e2 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    44de:	4605      	mov	r5, r0
			*nested_exc = true;
    44e0:	2601      	movs	r6, #1
	*recoverable = false;
    44e2:	2200      	movs	r2, #0
    44e4:	3b03      	subs	r3, #3
    44e6:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    44ea:	2b03      	cmp	r3, #3
    44ec:	d857      	bhi.n	459e <z_arm_fault+0xee>
    44ee:	e8df f003 	tbb	[pc, r3]
    44f2:	4e04      	.short	0x4e04
    44f4:	4b52      	.short	0x4b52
		return NULL;
    44f6:	4635      	mov	r5, r6
    44f8:	e7f3      	b.n	44e2 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    44fa:	4b2c      	ldr	r3, [pc, #176]	; (45ac <z_arm_fault+0xfc>)
    44fc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    44fe:	f014 0402 	ands.w	r4, r4, #2
    4502:	d14c      	bne.n	459e <z_arm_fault+0xee>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4506:	2a00      	cmp	r2, #0
    4508:	db18      	blt.n	453c <z_arm_fault+0x8c>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    450c:	005b      	lsls	r3, r3, #1
    450e:	d515      	bpl.n	453c <z_arm_fault+0x8c>
	uint16_t fault_insn = *(ret_addr - 1);
    4510:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    4512:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    4516:	f64d 7302 	movw	r3, #57090	; 0xdf02
    451a:	429a      	cmp	r2, r3
    451c:	d00d      	beq.n	453a <z_arm_fault+0x8a>
		} else if (SCB_MMFSR != 0) {
    451e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4522:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    4526:	781b      	ldrb	r3, [r3, #0]
    4528:	b303      	cbz	r3, 456c <z_arm_fault+0xbc>
			reason = mem_manage_fault(esf, 1, recoverable);
    452a:	f10d 0207 	add.w	r2, sp, #7
    452e:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    4530:	4628      	mov	r0, r5
    4532:	f7ff ff57 	bl	43e4 <mem_manage_fault>
    4536:	4604      	mov	r4, r0
		break;
    4538:	e000      	b.n	453c <z_arm_fault+0x8c>
			reason = esf->basic.r0;
    453a:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    453c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4540:	b993      	cbnz	r3, 4568 <z_arm_fault+0xb8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4542:	2220      	movs	r2, #32
    4544:	4629      	mov	r1, r5
    4546:	a802      	add	r0, sp, #8
    4548:	f006 f854 	bl	a5f4 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    454c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    454e:	b346      	cbz	r6, 45a2 <z_arm_fault+0xf2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4550:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4554:	b922      	cbnz	r2, 4560 <z_arm_fault+0xb0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4556:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    455a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    455e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    4560:	a902      	add	r1, sp, #8
    4562:	4620      	mov	r0, r4
    4564:	f005 ff82 	bl	a46c <z_arm_fatal_error>
}
    4568:	b00a      	add	sp, #40	; 0x28
    456a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    456c:	4b10      	ldr	r3, [pc, #64]	; (45b0 <z_arm_fault+0x100>)
    456e:	781b      	ldrb	r3, [r3, #0]
    4570:	b12b      	cbz	r3, 457e <z_arm_fault+0xce>
			reason = bus_fault(esf, 1, recoverable);
    4572:	f10d 0107 	add.w	r1, sp, #7
    4576:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    4578:	f7ff ff6a 	bl	4450 <bus_fault.isra.0>
    457c:	e7db      	b.n	4536 <z_arm_fault+0x86>
		} else if (SCB_UFSR != 0) {
    457e:	4b0d      	ldr	r3, [pc, #52]	; (45b4 <z_arm_fault+0x104>)
    4580:	881b      	ldrh	r3, [r3, #0]
    4582:	b29b      	uxth	r3, r3
    4584:	2b00      	cmp	r3, #0
    4586:	d0d9      	beq.n	453c <z_arm_fault+0x8c>
		reason = usage_fault(esf);
    4588:	f7ff ff80 	bl	448c <usage_fault.isra.0>
    458c:	e7d3      	b.n	4536 <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    458e:	f10d 0207 	add.w	r2, sp, #7
    4592:	2100      	movs	r1, #0
    4594:	e7cc      	b.n	4530 <z_arm_fault+0x80>
		reason = bus_fault(esf, 0, recoverable);
    4596:	f10d 0107 	add.w	r1, sp, #7
    459a:	2000      	movs	r0, #0
    459c:	e7ec      	b.n	4578 <z_arm_fault+0xc8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    459e:	2400      	movs	r4, #0
    45a0:	e7cc      	b.n	453c <z_arm_fault+0x8c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    45a2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    45a6:	f023 0301 	bic.w	r3, r3, #1
    45aa:	e7d8      	b.n	455e <z_arm_fault+0xae>
    45ac:	e000ed00 	.word	0xe000ed00
    45b0:	e000ed29 	.word	0xe000ed29
    45b4:	e000ed2a 	.word	0xe000ed2a

000045b8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    45b8:	4a02      	ldr	r2, [pc, #8]	; (45c4 <z_arm_fault_init+0xc>)
    45ba:	6953      	ldr	r3, [r2, #20]
    45bc:	f043 0310 	orr.w	r3, r3, #16
    45c0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    45c2:	4770      	bx	lr
    45c4:	e000ed00 	.word	0xe000ed00

000045c8 <z_arm_interrupt_init>:
    45c8:	4804      	ldr	r0, [pc, #16]	; (45dc <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    45ca:	2300      	movs	r3, #0
    45cc:	2120      	movs	r1, #32
    45ce:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    45d0:	3301      	adds	r3, #1
    45d2:	2b30      	cmp	r3, #48	; 0x30
    45d4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    45d8:	d1f9      	bne.n	45ce <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    45da:	4770      	bx	lr
    45dc:	e000e100 	.word	0xe000e100

000045e0 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    45e0:	4a06      	ldr	r2, [pc, #24]	; (45fc <z_arm_clear_arm_mpu_config+0x1c>)
    45e2:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    45e4:	2300      	movs	r3, #0
	int num_regions =
    45e6:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    45ea:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    45ec:	428b      	cmp	r3, r1
    45ee:	d100      	bne.n	45f2 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    45f0:	4770      	bx	lr
  MPU->RNR = rnr;
    45f2:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    45f4:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    45f6:	3301      	adds	r3, #1
    45f8:	e7f8      	b.n	45ec <z_arm_clear_arm_mpu_config+0xc>
    45fa:	bf00      	nop
    45fc:	e000ed90 	.word	0xe000ed90

00004600 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    4600:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    4602:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    4604:	2300      	movs	r3, #0
    4606:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    460a:	f7ff ffe9 	bl	45e0 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    460e:	4b14      	ldr	r3, [pc, #80]	; (4660 <z_arm_init_arch_hw_at_boot+0x60>)
    4610:	f04f 32ff 	mov.w	r2, #4294967295
    4614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    4618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    461c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    4620:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    4624:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    4628:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    462c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    4630:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    4634:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    4638:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    463c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    4640:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    4644:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    4648:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    464c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    4650:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    4654:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    4656:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    465a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    465e:	bd08      	pop	{r3, pc}
    4660:	e000e100 	.word	0xe000e100

00004664 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    4664:	4b06      	ldr	r3, [pc, #24]	; (4680 <z_impl_k_thread_abort+0x1c>)
    4666:	689b      	ldr	r3, [r3, #8]
    4668:	4283      	cmp	r3, r0
    466a:	d107      	bne.n	467c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    466c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4670:	b123      	cbz	r3, 467c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4672:	4a04      	ldr	r2, [pc, #16]	; (4684 <z_impl_k_thread_abort+0x20>)
    4674:	6853      	ldr	r3, [r2, #4]
    4676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    467a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    467c:	f003 bd12 	b.w	80a4 <z_thread_abort>
    4680:	2000122c 	.word	0x2000122c
    4684:	e000ed00 	.word	0xe000ed00

00004688 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4688:	4b02      	ldr	r3, [pc, #8]	; (4694 <z_arm_configure_static_mpu_regions+0xc>)
    468a:	4a03      	ldr	r2, [pc, #12]	; (4698 <z_arm_configure_static_mpu_regions+0x10>)
    468c:	4803      	ldr	r0, [pc, #12]	; (469c <z_arm_configure_static_mpu_regions+0x14>)
    468e:	2101      	movs	r1, #1
    4690:	f000 b86a 	b.w	4768 <arm_core_mpu_configure_static_mpu_regions>
    4694:	20040000 	.word	0x20040000
    4698:	20000000 	.word	0x20000000
    469c:	0000c270 	.word	0x0000c270

000046a0 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    46a0:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    46a4:	4b05      	ldr	r3, [pc, #20]	; (46bc <z_arm_configure_dynamic_mpu_regions+0x1c>)
		guard_start = thread->stack_info.start - guard_size;
    46a6:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    46a8:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    46aa:	4a05      	ldr	r2, [pc, #20]	; (46c0 <z_arm_configure_dynamic_mpu_regions+0x20>)
    46ac:	2120      	movs	r1, #32
    46ae:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    46b2:	4618      	mov	r0, r3
    46b4:	2101      	movs	r1, #1
    46b6:	f000 b861 	b.w	477c <arm_core_mpu_configure_dynamic_mpu_regions>
    46ba:	bf00      	nop
    46bc:	20001074 	.word	0x20001074
    46c0:	150b0000 	.word	0x150b0000

000046c4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    46c4:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    46c6:	4f1e      	ldr	r7, [pc, #120]	; (4740 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    46c8:	2600      	movs	r6, #0
    46ca:	428e      	cmp	r6, r1
    46cc:	db01      	blt.n	46d2 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    46ce:	4610      	mov	r0, r2
    46d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    46d2:	6844      	ldr	r4, [r0, #4]
    46d4:	b384      	cbz	r4, 4738 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    46d6:	b153      	cbz	r3, 46ee <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    46d8:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    46dc:	ea14 0f0c 	tst.w	r4, ip
    46e0:	d118      	bne.n	4714 <mpu_configure_regions+0x50>
		&&
    46e2:	2c1f      	cmp	r4, #31
    46e4:	d916      	bls.n	4714 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    46e6:	6805      	ldr	r5, [r0, #0]
		&&
    46e8:	ea1c 0f05 	tst.w	ip, r5
    46ec:	d112      	bne.n	4714 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    46ee:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    46f0:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    46f2:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    46f6:	b2d2      	uxtb	r2, r2
    46f8:	d90f      	bls.n	471a <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    46fa:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    46fe:	d80e      	bhi.n	471e <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    4700:	3c01      	subs	r4, #1
    4702:	fab4 f484 	clz	r4, r4
    4706:	f1c4 041f 	rsb	r4, r4, #31
    470a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    470c:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    470e:	ea4c 0404 	orr.w	r4, ip, r4
    4712:	d906      	bls.n	4722 <mpu_configure_regions+0x5e>
			return -EINVAL;
    4714:	f06f 0215 	mvn.w	r2, #21
    4718:	e7d9      	b.n	46ce <mpu_configure_regions+0xa>
		return REGION_32B;
    471a:	2408      	movs	r4, #8
    471c:	e7f6      	b.n	470c <mpu_configure_regions+0x48>
		return REGION_4G;
    471e:	243e      	movs	r4, #62	; 0x3e
    4720:	e7f4      	b.n	470c <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4722:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    4726:	4315      	orrs	r5, r2
    4728:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    472c:	f044 0401 	orr.w	r4, r4, #1
    4730:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4732:	60fd      	str	r5, [r7, #12]
		reg_index++;
    4734:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4736:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    4738:	3601      	adds	r6, #1
    473a:	300c      	adds	r0, #12
    473c:	e7c5      	b.n	46ca <mpu_configure_regions+0x6>
    473e:	bf00      	nop
    4740:	e000ed90 	.word	0xe000ed90

00004744 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4744:	4b03      	ldr	r3, [pc, #12]	; (4754 <arm_core_mpu_enable+0x10>)
    4746:	2205      	movs	r2, #5
    4748:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    474a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    474e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4752:	4770      	bx	lr
    4754:	e000ed90 	.word	0xe000ed90

00004758 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    4758:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    475c:	4b01      	ldr	r3, [pc, #4]	; (4764 <arm_core_mpu_disable+0xc>)
    475e:	2200      	movs	r2, #0
    4760:	605a      	str	r2, [r3, #4]
}
    4762:	4770      	bx	lr
    4764:	e000ed90 	.word	0xe000ed90

00004768 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    4768:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    476a:	4c03      	ldr	r4, [pc, #12]	; (4778 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    476c:	2301      	movs	r3, #1
    476e:	7822      	ldrb	r2, [r4, #0]
    4770:	f7ff ffa8 	bl	46c4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4774:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    4776:	bd10      	pop	{r4, pc}
    4778:	200012ab 	.word	0x200012ab

0000477c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    477c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    477e:	4a08      	ldr	r2, [pc, #32]	; (47a0 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    4780:	2300      	movs	r3, #0
    4782:	7812      	ldrb	r2, [r2, #0]
    4784:	f7ff ff9e 	bl	46c4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    4788:	f110 0f16 	cmn.w	r0, #22
    478c:	d003      	beq.n	4796 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    478e:	4b05      	ldr	r3, [pc, #20]	; (47a4 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    4790:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    4792:	2807      	cmp	r0, #7
    4794:	dd00      	ble.n	4798 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    4796:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    4798:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    479a:	611a      	str	r2, [r3, #16]
    479c:	3001      	adds	r0, #1
    479e:	e7f8      	b.n	4792 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    47a0:	200012ab 	.word	0x200012ab
    47a4:	e000ed90 	.word	0xe000ed90

000047a8 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    47a8:	4913      	ldr	r1, [pc, #76]	; (47f8 <z_arm_mpu_init+0x50>)
    47aa:	6808      	ldr	r0, [r1, #0]
    47ac:	2808      	cmp	r0, #8
{
    47ae:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    47b0:	d81e      	bhi.n	47f0 <z_arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    47b2:	f7ff ffd1 	bl	4758 <arm_core_mpu_disable>
    47b6:	4c11      	ldr	r4, [pc, #68]	; (47fc <z_arm_mpu_init+0x54>)
    47b8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    47ba:	2200      	movs	r2, #0
    47bc:	4290      	cmp	r0, r2
    47be:	f101 010c 	add.w	r1, r1, #12
    47c2:	d105      	bne.n	47d0 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    47c4:	4b0e      	ldr	r3, [pc, #56]	; (4800 <z_arm_mpu_init+0x58>)
    47c6:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    47c8:	f7ff ffbc 	bl	4744 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    47cc:	2000      	movs	r0, #0
}
    47ce:	bd10      	pop	{r4, pc}
    47d0:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    47d2:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    47d6:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    47da:	4313      	orrs	r3, r2
    47dc:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    47e0:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    47e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
    47e6:	f043 0301 	orr.w	r3, r3, #1
    47ea:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    47ec:	3201      	adds	r2, #1
    47ee:	e7e5      	b.n	47bc <z_arm_mpu_init+0x14>
		return -1;
    47f0:	f04f 30ff 	mov.w	r0, #4294967295
    47f4:	e7eb      	b.n	47ce <z_arm_mpu_init+0x26>
    47f6:	bf00      	nop
    47f8:	0000c27c 	.word	0x0000c27c
    47fc:	e000ed90 	.word	0xe000ed90
    4800:	200012ab 	.word	0x200012ab

00004804 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
    4804:	b40c      	push	{r2, r3}
    4806:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    4808:	b909      	cbnz	r1, 480e <snprintf+0xa>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    480a:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = str;
	p.len = (int) len;
    480e:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    4812:	ab07      	add	r3, sp, #28
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    4814:	9a06      	ldr	r2, [sp, #24]
    4816:	4806      	ldr	r0, [pc, #24]	; (4830 <snprintf+0x2c>)
	va_start(vargs, format);
    4818:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    481a:	a902      	add	r1, sp, #8
    481c:	f7fc fb6a 	bl	ef4 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
    4820:	9b02      	ldr	r3, [sp, #8]
    4822:	2200      	movs	r2, #0
    4824:	701a      	strb	r2, [r3, #0]
	return r;
}
    4826:	b005      	add	sp, #20
    4828:	f85d eb04 	ldr.w	lr, [sp], #4
    482c:	b002      	add	sp, #8
    482e:	4770      	bx	lr
    4830:	0000a4db 	.word	0x0000a4db

00004834 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4834:	4b01      	ldr	r3, [pc, #4]	; (483c <__stdout_hook_install+0x8>)
    4836:	6018      	str	r0, [r3, #0]
}
    4838:	4770      	bx	lr
    483a:	bf00      	nop
    483c:	200000a0 	.word	0x200000a0

00004840 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    4840:	f04f 0320 	mov.w	r3, #32
    4844:	f3ef 8111 	mrs	r1, BASEPRI
    4848:	f383 8812 	msr	BASEPRI_MAX, r3
    484c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    4850:	4a0f      	ldr	r2, [pc, #60]	; (4890 <nordicsemi_nrf52_init+0x50>)
    4852:	2301      	movs	r3, #1
    4854:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    4858:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    485c:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4860:	4a0c      	ldr	r2, [pc, #48]	; (4894 <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    4862:	6812      	ldr	r2, [r2, #0]
    4864:	2a08      	cmp	r2, #8
    4866:	d108      	bne.n	487a <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4868:	4a0b      	ldr	r2, [pc, #44]	; (4898 <nordicsemi_nrf52_init+0x58>)
    486a:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
    486c:	2a05      	cmp	r2, #5
    486e:	d804      	bhi.n	487a <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    4870:	480a      	ldr	r0, [pc, #40]	; (489c <nordicsemi_nrf52_init+0x5c>)
    4872:	5c82      	ldrb	r2, [r0, r2]
    4874:	b10a      	cbz	r2, 487a <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    4876:	4a0a      	ldr	r2, [pc, #40]	; (48a0 <nordicsemi_nrf52_init+0x60>)
    4878:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    487a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    487e:	2201      	movs	r2, #1
    4880:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    4884:	f381 8811 	msr	BASEPRI, r1
    4888:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    488c:	2000      	movs	r0, #0
    488e:	4770      	bx	lr
    4890:	4001e000 	.word	0x4001e000
    4894:	10000130 	.word	0x10000130
    4898:	10000134 	.word	0x10000134
    489c:	0000d4cf 	.word	0x0000d4cf
    48a0:	40000638 	.word	0x40000638

000048a4 <sys_arch_reboot>:
    *p_gpregret = val;
    48a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    48a8:	b2c0      	uxtb	r0, r0
    48aa:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    48ae:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    48b2:	4905      	ldr	r1, [pc, #20]	; (48c8 <sys_arch_reboot+0x24>)
    48b4:	4b05      	ldr	r3, [pc, #20]	; (48cc <sys_arch_reboot+0x28>)
    48b6:	68ca      	ldr	r2, [r1, #12]
    48b8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    48bc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    48be:	60cb      	str	r3, [r1, #12]
    48c0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    48c4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    48c6:	e7fd      	b.n	48c4 <sys_arch_reboot+0x20>
    48c8:	e000ed00 	.word	0xe000ed00
    48cc:	05fa0004 	.word	0x05fa0004

000048d0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    48d0:	b120      	cbz	r0, 48dc <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    48d2:	4b03      	ldr	r3, [pc, #12]	; (48e0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    48d4:	0180      	lsls	r0, r0, #6
    48d6:	f043 0301 	orr.w	r3, r3, #1
    48da:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    48dc:	4770      	bx	lr
    48de:	bf00      	nop
    48e0:	0000be50 	.word	0x0000be50

000048e4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    48e4:	4a0e      	ldr	r2, [pc, #56]	; (4920 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    48e6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    48e8:	1a84      	subs	r4, r0, r2
    48ea:	10a3      	asrs	r3, r4, #2
    48ec:	4c0d      	ldr	r4, [pc, #52]	; (4924 <onoff_stop+0x40>)
    48ee:	435c      	muls	r4, r3
{
    48f0:	4605      	mov	r5, r0
    48f2:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
    48f4:	200c      	movs	r0, #12
    48f6:	fb00 2004 	mla	r0, r0, r4, r2
{
    48fa:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    48fc:	2140      	movs	r1, #64	; 0x40
    48fe:	4408      	add	r0, r1
    4900:	f005 ffc2 	bl	a888 <set_off_state>
	if (err < 0) {
    4904:	1e01      	subs	r1, r0, #0
    4906:	db05      	blt.n	4914 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    4908:	4b07      	ldr	r3, [pc, #28]	; (4928 <onoff_stop+0x44>)
    490a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    490e:	6863      	ldr	r3, [r4, #4]
    4910:	4798      	blx	r3
	return 0;
    4912:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    4914:	4628      	mov	r0, r5
    4916:	4633      	mov	r3, r6
}
    4918:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    491c:	4718      	bx	r3
    491e:	bf00      	nop
    4920:	20001090 	.word	0x20001090
    4924:	b6db6db7 	.word	0xb6db6db7
    4928:	0000c2c8 	.word	0x0000c2c8

0000492c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    492c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    4930:	4e10      	ldr	r6, [pc, #64]	; (4974 <onoff_start+0x48>)
    4932:	1b84      	subs	r4, r0, r6
    4934:	10a3      	asrs	r3, r4, #2
    4936:	4c10      	ldr	r4, [pc, #64]	; (4978 <onoff_start+0x4c>)
    4938:	435c      	muls	r4, r3
    493a:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
    493c:	250c      	movs	r5, #12
    493e:	4365      	muls	r5, r4
{
    4940:	4680      	mov	r8, r0
	err = set_starting_state(&subdata->flags, ctx);
    4942:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    4946:	460f      	mov	r7, r1
	err = set_starting_state(&subdata->flags, ctx);
    4948:	4430      	add	r0, r6
    494a:	2140      	movs	r1, #64	; 0x40
    494c:	f005 ffb5 	bl	a8ba <set_starting_state>
	if (err < 0) {
    4950:	1e01      	subs	r1, r0, #0
    4952:	db09      	blt.n	4968 <onoff_start+0x3c>
	subdata->cb = cb;
    4954:	4a09      	ldr	r2, [pc, #36]	; (497c <onoff_start+0x50>)
    4956:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
    4958:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    495c:	4b08      	ldr	r3, [pc, #32]	; (4980 <onoff_start+0x54>)
    495e:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    4962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    4966:	4718      	bx	r3
		notify(mgr, err);
    4968:	4640      	mov	r0, r8
    496a:	463b      	mov	r3, r7
}
    496c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    4970:	4718      	bx	r3
    4972:	bf00      	nop
    4974:	20001090 	.word	0x20001090
    4978:	b6db6db7 	.word	0xb6db6db7
    497c:	0000a91d 	.word	0x0000a91d
    4980:	0000c2c8 	.word	0x0000c2c8

00004984 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4984:	2200      	movs	r2, #0
{
    4986:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4988:	2101      	movs	r1, #1
{
    498a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    498c:	4610      	mov	r0, r2
    498e:	f7ff fc41 	bl	4214 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    4992:	2000      	movs	r0, #0
    4994:	f7ff fc20 	bl	41d8 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4998:	480f      	ldr	r0, [pc, #60]	; (49d8 <clk_init+0x54>)
    499a:	f001 fc89 	bl	62b0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    499e:	4b0f      	ldr	r3, [pc, #60]	; (49dc <clk_init+0x58>)
    49a0:	4298      	cmp	r0, r3
    49a2:	d115      	bne.n	49d0 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    49a4:	f006 fc74 	bl	b290 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    49a8:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    49aa:	490d      	ldr	r1, [pc, #52]	; (49e0 <clk_init+0x5c>)
    49ac:	4630      	mov	r0, r6
    49ae:	f004 fcc3 	bl	9338 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    49b2:	2800      	cmp	r0, #0
    49b4:	db0b      	blt.n	49ce <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    49b6:	2501      	movs	r5, #1
    49b8:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    49ba:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    49bc:	4908      	ldr	r1, [pc, #32]	; (49e0 <clk_init+0x5c>)
    49be:	f104 001c 	add.w	r0, r4, #28
    49c2:	f004 fcb9 	bl	9338 <onoff_manager_init>
		if (err < 0) {
    49c6:	2800      	cmp	r0, #0
    49c8:	db01      	blt.n	49ce <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    49ca:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    49cc:	2000      	movs	r0, #0
}
    49ce:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    49d0:	f06f 0004 	mvn.w	r0, #4
    49d4:	e7fb      	b.n	49ce <clk_init+0x4a>
    49d6:	bf00      	nop
    49d8:	00004a19 	.word	0x00004a19
    49dc:	0bad0000 	.word	0x0bad0000
    49e0:	0000c308 	.word	0x0000c308

000049e4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    49e4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    49e6:	230c      	movs	r3, #12
    49e8:	4809      	ldr	r0, [pc, #36]	; (4a10 <clkstarted_handle.constprop.0+0x2c>)
    49ea:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    49ec:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    49ee:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    49f0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    49f4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    49f6:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    49f8:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    49fa:	4418      	add	r0, r3
    49fc:	f005 ff7b 	bl	a8f6 <set_on_state>
	if (callback) {
    4a00:	b12d      	cbz	r5, 4a0e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    4a02:	4632      	mov	r2, r6
    4a04:	462b      	mov	r3, r5
    4a06:	4803      	ldr	r0, [pc, #12]	; (4a14 <clkstarted_handle.constprop.0+0x30>)
}
    4a08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    4a0c:	4718      	bx	r3
}
    4a0e:	bd70      	pop	{r4, r5, r6, pc}
    4a10:	20001090 	.word	0x20001090
    4a14:	0000bb20 	.word	0x0000bb20

00004a18 <clock_event_handler>:
	switch (event) {
    4a18:	b110      	cbz	r0, 4a20 <clock_event_handler+0x8>
    4a1a:	2801      	cmp	r0, #1
    4a1c:	d004      	beq.n	4a28 <clock_event_handler+0x10>
    4a1e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4a20:	4b03      	ldr	r3, [pc, #12]	; (4a30 <clock_event_handler+0x18>)
    4a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4a24:	075b      	lsls	r3, r3, #29
    4a26:	d101      	bne.n	4a2c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4a28:	f7ff bfdc 	b.w	49e4 <clkstarted_handle.constprop.0>
}
    4a2c:	4770      	bx	lr
    4a2e:	bf00      	nop
    4a30:	20001090 	.word	0x20001090

00004a34 <hfclk_start>:
{
    4a34:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
    4a36:	f007 f802 	bl	ba3e <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
    4a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4a3e:	460c      	mov	r4, r1
    4a40:	fba0 0103 	umull	r0, r1, r0, r3
    4a44:	fb03 1104 	mla	r1, r3, r4, r1
		hf_start_tstamp = k_uptime_get();
    4a48:	4a05      	ldr	r2, [pc, #20]	; (4a60 <hfclk_start+0x2c>)
    4a4a:	0bc3      	lsrs	r3, r0, #15
    4a4c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
}
    4a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4a54:	0bc9      	lsrs	r1, r1, #15
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    4a56:	2001      	movs	r0, #1
		hf_start_tstamp = k_uptime_get();
    4a58:	e9c2 3100 	strd	r3, r1, [r2]
    4a5c:	f001 bc38 	b.w	62d0 <nrfx_clock_start>
    4a60:	20000438 	.word	0x20000438

00004a64 <generic_hfclk_start>:
{
    4a64:	b508      	push	{r3, lr}
	__asm__ volatile(
    4a66:	f04f 0320 	mov.w	r3, #32
    4a6a:	f3ef 8111 	mrs	r1, BASEPRI
    4a6e:	f383 8812 	msr	BASEPRI_MAX, r3
    4a72:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    4a76:	4a11      	ldr	r2, [pc, #68]	; (4abc <generic_hfclk_start+0x58>)
    4a78:	6813      	ldr	r3, [r2, #0]
    4a7a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    4a7e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    4a82:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4a84:	d00c      	beq.n	4aa0 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4a86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4a8a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4a8e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4a92:	f013 0301 	ands.w	r3, r3, #1
    4a96:	d003      	beq.n	4aa0 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    4a98:	4809      	ldr	r0, [pc, #36]	; (4ac0 <generic_hfclk_start+0x5c>)
    4a9a:	f005 ff2c 	bl	a8f6 <set_on_state>
			already_started = true;
    4a9e:	2301      	movs	r3, #1
	__asm__ volatile(
    4aa0:	f381 8811 	msr	BASEPRI, r1
    4aa4:	f3bf 8f6f 	isb	sy
	if (already_started) {
    4aa8:	b123      	cbz	r3, 4ab4 <generic_hfclk_start+0x50>
}
    4aaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    4aae:	2000      	movs	r0, #0
    4ab0:	f7ff bf98 	b.w	49e4 <clkstarted_handle.constprop.0>
}
    4ab4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	hfclk_start();
    4ab8:	f7ff bfbc 	b.w	4a34 <hfclk_start>
    4abc:	200010e0 	.word	0x200010e0
    4ac0:	200010d0 	.word	0x200010d0

00004ac4 <hfclk_stop>:
{
    4ac4:	b510      	push	{r4, lr}
    4ac6:	f006 ffba 	bl	ba3e <z_impl_k_uptime_ticks>
    4aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4ace:	460c      	mov	r4, r1
    4ad0:	fba0 0103 	umull	r0, r1, r0, r3
    4ad4:	fb03 1104 	mla	r1, r3, r4, r1
		hf_stop_tstamp = k_uptime_get();
    4ad8:	4a05      	ldr	r2, [pc, #20]	; (4af0 <hfclk_stop+0x2c>)
    4ada:	0bc3      	lsrs	r3, r0, #15
    4adc:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
}
    4ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4ae4:	0bc9      	lsrs	r1, r1, #15
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    4ae6:	2001      	movs	r0, #1
		hf_stop_tstamp = k_uptime_get();
    4ae8:	e9c2 3100 	strd	r3, r1, [r2]
    4aec:	f001 bc22 	b.w	6334 <nrfx_clock_stop>
    4af0:	20000440 	.word	0x20000440

00004af4 <generic_hfclk_stop>:
    4af4:	4b08      	ldr	r3, [pc, #32]	; (4b18 <generic_hfclk_stop+0x24>)
    4af6:	f3bf 8f5b 	dmb	ish
    4afa:	e853 2f00 	ldrex	r2, [r3]
    4afe:	f022 0102 	bic.w	r1, r2, #2
    4b02:	e843 1000 	strex	r0, r1, [r3]
    4b06:	2800      	cmp	r0, #0
    4b08:	d1f7      	bne.n	4afa <generic_hfclk_stop+0x6>
    4b0a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    4b0e:	07d3      	lsls	r3, r2, #31
    4b10:	d401      	bmi.n	4b16 <generic_hfclk_stop+0x22>
	hfclk_stop();
    4b12:	f7ff bfd7 	b.w	4ac4 <hfclk_stop>
}
    4b16:	4770      	bx	lr
    4b18:	200010e0 	.word	0x200010e0

00004b1c <cmd_status>:
		 &data, &config,
		 PRE_KERNEL_1, CONFIG_CLOCK_CONTROL_INIT_PRIORITY,
		 &clock_control_api);

static int cmd_status(const struct shell *shell, size_t argc, char **argv)
{
    4b1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4b20:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    4b24:	4604      	mov	r4, r0
    4b26:	f8d7 6418 	ldr.w	r6, [r7, #1048]	; 0x418
    4b2a:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
	__asm__ volatile(
    4b2e:	f04f 0320 	mov.w	r3, #32
    4b32:	f3ef 8811 	mrs	r8, BASEPRI
    4b36:	f383 8812 	msr	BASEPRI_MAX, r3
    4b3a:	f3bf 8f6f 	isb	sy
    4b3e:	f006 ff7e 	bl	ba3e <z_impl_k_uptime_ticks>
    4b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4b46:	460a      	mov	r2, r1
    4b48:	fba0 0103 	umull	r0, r1, r0, r3
    4b4c:	fb03 1102 	mla	r1, r3, r2, r1
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4b50:	f8d7 940c 	ldr.w	r9, [r7, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4b54:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
	uint64_t now = k_uptime_get();

	(void)nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, (void *)&hfclk_src);
	hf_status = (hfclk_src == NRF_CLOCK_HFCLK_HIGH_ACCURACY);

	abs_start = hf_start_tstamp;
    4b58:	4b25      	ldr	r3, [pc, #148]	; (4bf0 <cmd_status+0xd4>)
    4b5a:	f8d3 b000 	ldr.w	fp, [r3]
	abs_stop = hf_stop_tstamp;
    4b5e:	4b25      	ldr	r3, [pc, #148]	; (4bf4 <cmd_status+0xd8>)
    4b60:	0bc5      	lsrs	r5, r0, #15
    4b62:	f8d3 a000 	ldr.w	sl, [r3]
    4b66:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
	__asm__ volatile(
    4b6a:	f388 8811 	msr	BASEPRI, r8
    4b6e:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	shell_print(shell, "HF clock:");
    4b72:	4a21      	ldr	r2, [pc, #132]	; (4bf8 <cmd_status+0xdc>)
	shell_print(shell, "\t- %srunning (users: %u)",
    4b74:	f8df 8098 	ldr.w	r8, [pc, #152]	; 4c10 <cmd_status+0xf4>
    4b78:	4f20      	ldr	r7, [pc, #128]	; (4bfc <cmd_status+0xe0>)
	shell_print(shell, "HF clock:");
    4b7a:	4620      	mov	r0, r4
    4b7c:	2108      	movs	r1, #8
    4b7e:	f004 fe00 	bl	9782 <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
    4b82:	f019 0f01 	tst.w	r9, #1
    4b86:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4c14 <cmd_status+0xf8>
    4b8a:	4a1d      	ldr	r2, [pc, #116]	; (4c00 <cmd_status+0xe4>)
    4b8c:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    4b90:	9300      	str	r3, [sp, #0]
    4b92:	4620      	mov	r0, r4
    4b94:	bf14      	ite	ne
    4b96:	4643      	movne	r3, r8
    4b98:	463b      	moveq	r3, r7
    4b9a:	2108      	movs	r1, #8
    4b9c:	f004 fdf1 	bl	9782 <shell_fprintf>
			hf_status ? "" : "not ", hf_mgr->refs);
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
    4ba0:	eba5 030b 	sub.w	r3, r5, fp
    4ba4:	9300      	str	r3, [sp, #0]
    4ba6:	4620      	mov	r0, r4
    4ba8:	465b      	mov	r3, fp
    4baa:	4a16      	ldr	r2, [pc, #88]	; (4c04 <cmd_status+0xe8>)
    4bac:	2108      	movs	r1, #8
			(uint32_t)abs_start, (uint32_t)(now - abs_start));
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
    4bae:	eba5 050a 	sub.w	r5, r5, sl
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
    4bb2:	f004 fde6 	bl	9782 <shell_fprintf>
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
    4bb6:	4653      	mov	r3, sl
    4bb8:	4620      	mov	r0, r4
    4bba:	4a13      	ldr	r2, [pc, #76]	; (4c08 <cmd_status+0xec>)
    4bbc:	9500      	str	r5, [sp, #0]
    4bbe:	2108      	movs	r1, #8
    4bc0:	f004 fddf 	bl	9782 <shell_fprintf>
			(uint32_t)abs_stop, (uint32_t)(now - abs_stop));
	shell_print(shell, "LF clock:");
    4bc4:	4620      	mov	r0, r4
    4bc6:	4a11      	ldr	r2, [pc, #68]	; (4c0c <cmd_status+0xf0>)
    4bc8:	2108      	movs	r1, #8
    4bca:	f004 fdda 	bl	9782 <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
    4bce:	f8b9 3036 	ldrh.w	r3, [r9, #54]	; 0x36
    4bd2:	9300      	str	r3, [sp, #0]
    4bd4:	4620      	mov	r0, r4
    4bd6:	4a0a      	ldr	r2, [pc, #40]	; (4c00 <cmd_status+0xe4>)
    4bd8:	2e00      	cmp	r6, #0
    4bda:	bf14      	ite	ne
    4bdc:	4643      	movne	r3, r8
    4bde:	463b      	moveq	r3, r7
    4be0:	2108      	movs	r1, #8
    4be2:	f004 fdce 	bl	9782 <shell_fprintf>
			lf_status ? "" : "not ", lf_mgr->refs);

	return 0;
}
    4be6:	2000      	movs	r0, #0
    4be8:	b003      	add	sp, #12
    4bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4bee:	bf00      	nop
    4bf0:	20000438 	.word	0x20000438
    4bf4:	20000440 	.word	0x20000440
    4bf8:	0000d4da 	.word	0x0000d4da
    4bfc:	0000d4d5 	.word	0x0000d4d5
    4c00:	0000d4e5 	.word	0x0000d4e5
    4c04:	0000d4ff 	.word	0x0000d4ff
    4c08:	0000d521 	.word	0x0000d521
    4c0c:	0000d542 	.word	0x0000d542
    4c10:	0000cb46 	.word	0x0000cb46
    4c14:	20001090 	.word	0x20001090

00004c18 <api_blocking_start>:
{
    4c18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4c1a:	2200      	movs	r2, #0
    4c1c:	2301      	movs	r3, #1
    4c1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    4c22:	ab04      	add	r3, sp, #16
    4c24:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4c28:	4a09      	ldr	r2, [pc, #36]	; (4c50 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4c2a:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4c2e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4c30:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4c34:	f005 fe98 	bl	a968 <api_start>
	if (err < 0) {
    4c38:	2800      	cmp	r0, #0
    4c3a:	db05      	blt.n	4c48 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    4c3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4c40:	2300      	movs	r3, #0
    4c42:	4668      	mov	r0, sp
    4c44:	f003 fabc 	bl	81c0 <z_impl_k_sem_take>
}
    4c48:	b007      	add	sp, #28
    4c4a:	f85d fb04 	ldr.w	pc, [sp], #4
    4c4e:	bf00      	nop
    4c50:	0000a93b 	.word	0x0000a93b

00004c54 <z_nrf_clock_control_lf_on>:
{
    4c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4c58:	493a      	ldr	r1, [pc, #232]	; (4d44 <z_nrf_clock_control_lf_on+0xf0>)
    4c5a:	f3bf 8f5b 	dmb	ish
    4c5e:	4606      	mov	r6, r0
    4c60:	2201      	movs	r2, #1
    4c62:	e851 3f00 	ldrex	r3, [r1]
    4c66:	e841 2000 	strex	r0, r2, [r1]
    4c6a:	2800      	cmp	r0, #0
    4c6c:	d1f9      	bne.n	4c62 <z_nrf_clock_control_lf_on+0xe>
    4c6e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    4c72:	b933      	cbnz	r3, 4c82 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4c74:	4934      	ldr	r1, [pc, #208]	; (4d48 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    4c76:	4835      	ldr	r0, [pc, #212]	; (4d4c <z_nrf_clock_control_lf_on+0xf8>)
    4c78:	604b      	str	r3, [r1, #4]
    4c7a:	60cb      	str	r3, [r1, #12]
    4c7c:	608a      	str	r2, [r1, #8]
    4c7e:	f004 fb6e 	bl	935e <onoff_request>
	switch (start_mode) {
    4c82:	1e73      	subs	r3, r6, #1
    4c84:	2b01      	cmp	r3, #1
    4c86:	d832      	bhi.n	4cee <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4c88:	2e01      	cmp	r6, #1
    4c8a:	d107      	bne.n	4c9c <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4c8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4c90:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4c94:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4c98:	2b01      	cmp	r3, #1
    4c9a:	d028      	beq.n	4cee <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4c9c:	f006 fe73 	bl	b986 <k_is_in_isr>
    4ca0:	4604      	mov	r4, r0
    4ca2:	b918      	cbnz	r0, 4cac <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    4ca4:	4b2a      	ldr	r3, [pc, #168]	; (4d50 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    4ca6:	781b      	ldrb	r3, [r3, #0]
    4ca8:	2b00      	cmp	r3, #0
    4caa:	d144      	bne.n	4d36 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    4cac:	f04f 0320 	mov.w	r3, #32
    4cb0:	f3ef 8511 	mrs	r5, BASEPRI
    4cb4:	f383 8812 	msr	BASEPRI_MAX, r3
    4cb8:	f3bf 8f6f 	isb	sy
    4cbc:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4cbe:	4f25      	ldr	r7, [pc, #148]	; (4d54 <z_nrf_clock_control_lf_on+0x100>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4cc0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 4d58 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4cc4:	f8df 9094 	ldr.w	r9, [pc, #148]	; 4d5c <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4cc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4ccc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4cd0:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    4cd4:	03d2      	lsls	r2, r2, #15
    4cd6:	d50c      	bpl.n	4cf2 <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4cd8:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4cdc:	2b01      	cmp	r3, #1
    4cde:	d001      	beq.n	4ce4 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4ce0:	2e01      	cmp	r6, #1
    4ce2:	d106      	bne.n	4cf2 <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    4ce4:	b30c      	cbz	r4, 4d2a <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    4ce6:	f385 8811 	msr	BASEPRI, r5
    4cea:	f3bf 8f6f 	isb	sy
}
    4cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4cf2:	b1ac      	cbz	r4, 4d20 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4cf4:	4628      	mov	r0, r5
    4cf6:	f7ff fa05 	bl	4104 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4cfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4cfe:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4d02:	2b00      	cmp	r3, #0
    4d04:	d1e0      	bne.n	4cc8 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4d06:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    4d08:	2900      	cmp	r1, #0
    4d0a:	d0dd      	beq.n	4cc8 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d0c:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4d0e:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    4d10:	2301      	movs	r3, #1
    4d12:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    4d16:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4d1a:	f8c9 3000 	str.w	r3, [r9]
}
    4d1e:	e7d3      	b.n	4cc8 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    4d20:	2100      	movs	r1, #0
    4d22:	2021      	movs	r0, #33	; 0x21
    4d24:	f003 f98e 	bl	8044 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4d28:	e7e7      	b.n	4cfa <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    4d2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d2e:	2202      	movs	r2, #2
    4d30:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4d34:	e7db      	b.n	4cee <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    4d36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d3a:	2202      	movs	r2, #2
    4d3c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    4d40:	4605      	mov	r5, r0
}
    4d42:	e7bc      	b.n	4cbe <z_nrf_clock_control_lf_on+0x6a>
    4d44:	200010e4 	.word	0x200010e4
    4d48:	20001080 	.word	0x20001080
    4d4c:	200010ac 	.word	0x200010ac
    4d50:	2000170c 	.word	0x2000170c
    4d54:	40000104 	.word	0x40000104
    4d58:	e000e100 	.word	0xe000e100
    4d5c:	40000008 	.word	0x40000008

00004d60 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    4d60:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    4d62:	4b08      	ldr	r3, [pc, #32]	; (4d84 <uart_console_init+0x24>)
    4d64:	4808      	ldr	r0, [pc, #32]	; (4d88 <uart_console_init+0x28>)
    4d66:	6018      	str	r0, [r3, #0]
    4d68:	f006 fb3a 	bl	b3e0 <z_device_ready>
    4d6c:	b138      	cbz	r0, 4d7e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    4d6e:	4807      	ldr	r0, [pc, #28]	; (4d8c <uart_console_init+0x2c>)
    4d70:	f7ff fd60 	bl	4834 <__stdout_hook_install>
	__printk_hook_install(console_out);
    4d74:	4805      	ldr	r0, [pc, #20]	; (4d8c <uart_console_init+0x2c>)
    4d76:	f7fd fdbf 	bl	28f8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    4d7a:	2000      	movs	r0, #0
}
    4d7c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4d7e:	f06f 0012 	mvn.w	r0, #18
    4d82:	e7fb      	b.n	4d7c <uart_console_init+0x1c>
    4d84:	200010e8 	.word	0x200010e8
    4d88:	0000bb80 	.word	0x0000bb80
    4d8c:	00004d91 	.word	0x00004d91

00004d90 <console_out>:
	if ('\n' == c) {
    4d90:	280a      	cmp	r0, #10
{
    4d92:	b538      	push	{r3, r4, r5, lr}
    4d94:	4d07      	ldr	r5, [pc, #28]	; (4db4 <console_out+0x24>)
    4d96:	4604      	mov	r4, r0
	if ('\n' == c) {
    4d98:	d104      	bne.n	4da4 <console_out+0x14>
    4d9a:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    4d9c:	6883      	ldr	r3, [r0, #8]
    4d9e:	210d      	movs	r1, #13
    4da0:	685b      	ldr	r3, [r3, #4]
    4da2:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    4da4:	6828      	ldr	r0, [r5, #0]
    4da6:	6883      	ldr	r3, [r0, #8]
    4da8:	b2e1      	uxtb	r1, r4
    4daa:	685b      	ldr	r3, [r3, #4]
    4dac:	4798      	blx	r3
}
    4dae:	4620      	mov	r0, r4
    4db0:	bd38      	pop	{r3, r4, r5, pc}
    4db2:	bf00      	nop
    4db4:	200010e8 	.word	0x200010e8

00004db8 <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4db8:	0942      	lsrs	r2, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    4dba:	b570      	push	{r4, r5, r6, lr}
    4dbc:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4dbe:	d002      	beq.n	4dc6 <nrfx_gpio_handler+0xe>
    4dc0:	2a01      	cmp	r2, #1
    4dc2:	d01d      	beq.n	4e00 <nrfx_gpio_handler+0x48>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
    4dc4:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4dc6:	4e0f      	ldr	r6, [pc, #60]	; (4e04 <nrfx_gpio_handler+0x4c>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4dc8:	6932      	ldr	r2, [r6, #16]
    4dca:	6851      	ldr	r1, [r2, #4]
    4dcc:	2900      	cmp	r1, #0
    4dce:	d0f9      	beq.n	4dc4 <nrfx_gpio_handler+0xc>
    4dd0:	680c      	ldr	r4, [r1, #0]
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    4dd2:	f003 031f 	and.w	r3, r3, #31
	gpio_fire_callbacks(list, port, BIT(pin));
    4dd6:	2501      	movs	r5, #1
    4dd8:	2c00      	cmp	r4, #0
    4dda:	fa05 f503 	lsl.w	r5, r5, r3
	return node->next;
    4dde:	bf38      	it	cc
    4de0:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
    4de2:	688a      	ldr	r2, [r1, #8]
    4de4:	402a      	ands	r2, r5
    4de6:	d002      	beq.n	4dee <nrfx_gpio_handler+0x36>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    4de8:	684b      	ldr	r3, [r1, #4]
    4dea:	4630      	mov	r0, r6
    4dec:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4dee:	2c00      	cmp	r4, #0
    4df0:	d0e8      	beq.n	4dc4 <nrfx_gpio_handler+0xc>
    4df2:	6823      	ldr	r3, [r4, #0]
    4df4:	2b00      	cmp	r3, #0
    4df6:	bf38      	it	cc
    4df8:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4dfa:	4621      	mov	r1, r4
    4dfc:	461c      	mov	r4, r3
    4dfe:	e7f0      	b.n	4de2 <nrfx_gpio_handler+0x2a>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4e00:	4e01      	ldr	r6, [pc, #4]	; (4e08 <nrfx_gpio_handler+0x50>)
    4e02:	e7e1      	b.n	4dc8 <nrfx_gpio_handler+0x10>
    4e04:	0000bb38 	.word	0x0000bb38
    4e08:	0000bb50 	.word	0x0000bb50

00004e0c <gpio_nrfx_pin_interrupt_configure>:
{
    4e0c:	b530      	push	{r4, r5, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4e0e:	6840      	ldr	r0, [r0, #4]
    4e10:	7b04      	ldrb	r4, [r0, #12]
    4e12:	f001 051f 	and.w	r5, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    4e16:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4e1a:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    4e1e:	b085      	sub	sp, #20
    4e20:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    4e24:	d104      	bne.n	4e30 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    4e26:	4628      	mov	r0, r5
    4e28:	f001 fd6a 	bl	6900 <nrfx_gpiote_trigger_disable>
	return 0;
    4e2c:	2000      	movs	r0, #0
    4e2e:	e032      	b.n	4e96 <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
    4e30:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    4e34:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    4e38:	d12f      	bne.n	4e9a <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    4e3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    4e3e:	bf0c      	ite	eq
    4e40:	2304      	moveq	r3, #4
    4e42:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    4e44:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    4e48:	6883      	ldr	r3, [r0, #8]
    4e4a:	fa23 f101 	lsr.w	r1, r3, r1
    4e4e:	07c9      	lsls	r1, r1, #31
    4e50:	d42f      	bmi.n	4eb2 <gpio_nrfx_pin_interrupt_configure+0xa6>
    4e52:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    4e56:	d12c      	bne.n	4eb2 <gpio_nrfx_pin_interrupt_configure+0xa6>

    return pin_number >> 5;
    4e58:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    4e5a:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    4e5c:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    4e60:	4a1c      	ldr	r2, [pc, #112]	; (4ed4 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4e62:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    4e66:	bf18      	it	ne
    4e68:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4e70:	07db      	lsls	r3, r3, #31
    4e72:	d41e      	bmi.n	4eb2 <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4e74:	f10d 0407 	add.w	r4, sp, #7
    4e78:	4621      	mov	r1, r4
    4e7a:	4628      	mov	r0, r5
    4e7c:	f001 fcac 	bl	67d8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    4e80:	4b15      	ldr	r3, [pc, #84]	; (4ed8 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    4e82:	4298      	cmp	r0, r3
    4e84:	d114      	bne.n	4eb0 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
    4e86:	4620      	mov	r0, r4
    4e88:	f001 fcf0 	bl	686c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    4e8c:	4b13      	ldr	r3, [pc, #76]	; (4edc <gpio_nrfx_pin_interrupt_configure+0xd0>)
    4e8e:	4298      	cmp	r0, r3
    4e90:	d00e      	beq.n	4eb0 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
    4e92:	f06f 000b 	mvn.w	r0, #11
}
    4e96:	b005      	add	sp, #20
    4e98:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4e9a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    4e9e:	d005      	beq.n	4eac <gpio_nrfx_pin_interrupt_configure+0xa0>
    4ea0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    4ea4:	bf0c      	ite	eq
    4ea6:	2302      	moveq	r3, #2
    4ea8:	2301      	movne	r3, #1
    4eaa:	e7cb      	b.n	4e44 <gpio_nrfx_pin_interrupt_configure+0x38>
    4eac:	2303      	movs	r3, #3
    4eae:	e7c9      	b.n	4e44 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    4eb0:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4eb2:	2300      	movs	r3, #0
    4eb4:	4619      	mov	r1, r3
    4eb6:	aa02      	add	r2, sp, #8
    4eb8:	4628      	mov	r0, r5
    4eba:	f001 fb6b 	bl	6594 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4ebe:	4b07      	ldr	r3, [pc, #28]	; (4edc <gpio_nrfx_pin_interrupt_configure+0xd0>)
    4ec0:	4298      	cmp	r0, r3
    4ec2:	d104      	bne.n	4ece <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    4ec4:	2101      	movs	r1, #1
    4ec6:	4628      	mov	r0, r5
    4ec8:	f001 fcd6 	bl	6878 <nrfx_gpiote_trigger_enable>
    4ecc:	e7ae      	b.n	4e2c <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    4ece:	f06f 0004 	mvn.w	r0, #4
    4ed2:	e7e0      	b.n	4e96 <gpio_nrfx_pin_interrupt_configure+0x8a>
    4ed4:	50000300 	.word	0x50000300
    4ed8:	0bad0004 	.word	0x0bad0004
    4edc:	0bad0000 	.word	0x0bad0000

00004ee0 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    4ee0:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    4ee2:	f001 fcb3 	bl	684c <nrfx_gpiote_is_init>
    4ee6:	4604      	mov	r4, r0
    4ee8:	b968      	cbnz	r0, 4f06 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    4eea:	f001 fc87 	bl	67fc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    4eee:	4b08      	ldr	r3, [pc, #32]	; (4f10 <gpio_nrfx_init+0x30>)
    4ef0:	4298      	cmp	r0, r3
    4ef2:	d10a      	bne.n	4f0a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    4ef4:	4807      	ldr	r0, [pc, #28]	; (4f14 <gpio_nrfx_init+0x34>)
    4ef6:	4621      	mov	r1, r4
    4ef8:	f001 fc68 	bl	67cc <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    4efc:	4622      	mov	r2, r4
    4efe:	2105      	movs	r1, #5
    4f00:	2006      	movs	r0, #6
    4f02:	f7ff f987 	bl	4214 <z_arm_irq_priority_set>
		return 0;
    4f06:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    4f08:	bd10      	pop	{r4, pc}
		return -EIO;
    4f0a:	f06f 0004 	mvn.w	r0, #4
    4f0e:	e7fb      	b.n	4f08 <gpio_nrfx_init+0x28>
    4f10:	0bad0000 	.word	0x0bad0000
    4f14:	00004db9 	.word	0x00004db9

00004f18 <gpio_nrfx_pin_configure>:
{
    4f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    4f1c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4f1e:	7b3b      	ldrb	r3, [r7, #12]
    4f20:	f001 051f 	and.w	r5, r1, #31
{
    4f24:	b085      	sub	sp, #20
    4f26:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4f28:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    4f2c:	4614      	mov	r4, r2
    4f2e:	b9ca      	cbnz	r2, 4f64 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    4f30:	a902      	add	r1, sp, #8
    4f32:	4628      	mov	r0, r5
    4f34:	f001 fc50 	bl	67d8 <nrfx_gpiote_channel_get>
    4f38:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    4f3a:	4628      	mov	r0, r5
    4f3c:	f001 fd02 	bl	6944 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    4f40:	4b48      	ldr	r3, [pc, #288]	; (5064 <gpio_nrfx_pin_configure+0x14c>)
    4f42:	4298      	cmp	r0, r3
    4f44:	d004      	beq.n	4f50 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    4f46:	f06f 0004 	mvn.w	r0, #4
}
    4f4a:	b005      	add	sp, #20
    4f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    4f50:	4284      	cmp	r4, r0
    4f52:	d105      	bne.n	4f60 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    4f54:	f89d 0008 	ldrb.w	r0, [sp, #8]
    4f58:	f001 fc82 	bl	6860 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    4f5c:	42a0      	cmp	r0, r4
    4f5e:	d1f2      	bne.n	4f46 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4f60:	2000      	movs	r0, #0
    4f62:	e7f2      	b.n	4f4a <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4f64:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    4f68:	f10d 0103 	add.w	r1, sp, #3
    4f6c:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    4f6e:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    4f72:	f001 fc31 	bl	67d8 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4f76:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    4f78:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4f7a:	aa02      	add	r2, sp, #8
    4f7c:	4649      	mov	r1, r9
    4f7e:	4628      	mov	r0, r5
    4f80:	f001 fb08 	bl	6594 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4f84:	4b37      	ldr	r3, [pc, #220]	; (5064 <gpio_nrfx_pin_configure+0x14c>)
    4f86:	4298      	cmp	r0, r3
    4f88:	d002      	beq.n	4f90 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4f8a:	f06f 0015 	mvn.w	r0, #21
    4f8e:	e7dc      	b.n	4f4a <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    4f90:	4580      	cmp	r8, r0
    4f92:	d103      	bne.n	4f9c <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    4f94:	f89d 0003 	ldrb.w	r0, [sp, #3]
    4f98:	f001 fc62 	bl	6860 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    4f9c:	05a3      	lsls	r3, r4, #22
    4f9e:	d54e      	bpl.n	503e <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4fa0:	4b31      	ldr	r3, [pc, #196]	; (5068 <gpio_nrfx_pin_configure+0x150>)
    4fa2:	4a32      	ldr	r2, [pc, #200]	; (506c <gpio_nrfx_pin_configure+0x154>)
    4fa4:	4023      	ands	r3, r4
    4fa6:	4293      	cmp	r3, r2
    4fa8:	d03a      	beq.n	5020 <gpio_nrfx_pin_configure+0x108>
    4faa:	d80c      	bhi.n	4fc6 <gpio_nrfx_pin_configure+0xae>
    4fac:	2b06      	cmp	r3, #6
    4fae:	d014      	beq.n	4fda <gpio_nrfx_pin_configure+0xc2>
    4fb0:	d804      	bhi.n	4fbc <gpio_nrfx_pin_configure+0xa4>
    4fb2:	b193      	cbz	r3, 4fda <gpio_nrfx_pin_configure+0xc2>
    4fb4:	2b02      	cmp	r3, #2
    4fb6:	d1e8      	bne.n	4f8a <gpio_nrfx_pin_configure+0x72>
    4fb8:	2304      	movs	r3, #4
    4fba:	e00e      	b.n	4fda <gpio_nrfx_pin_configure+0xc2>
    4fbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4fc0:	d1e3      	bne.n	4f8a <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    4fc2:	2301      	movs	r3, #1
    4fc4:	e009      	b.n	4fda <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4fc6:	4a2a      	ldr	r2, [pc, #168]	; (5070 <gpio_nrfx_pin_configure+0x158>)
    4fc8:	4293      	cmp	r3, r2
    4fca:	d02b      	beq.n	5024 <gpio_nrfx_pin_configure+0x10c>
    4fcc:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    4fd0:	d02a      	beq.n	5028 <gpio_nrfx_pin_configure+0x110>
    4fd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    4fd6:	d1d8      	bne.n	4f8a <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    4fd8:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    4fda:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    4fde:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    4fe2:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    4fe6:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    4fe8:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    4fec:	bf54      	ite	pl
    4fee:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    4ff2:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4ff4:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    4ff6:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4ffa:	d517      	bpl.n	502c <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    4ffc:	687b      	ldr	r3, [r7, #4]
    4ffe:	2101      	movs	r1, #1
    5000:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    5004:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    5008:	2200      	movs	r2, #0
    500a:	a901      	add	r1, sp, #4
    500c:	4628      	mov	r0, r5
    500e:	f001 fb6d 	bl	66ec <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    5012:	4b14      	ldr	r3, [pc, #80]	; (5064 <gpio_nrfx_pin_configure+0x14c>)
    5014:	4298      	cmp	r0, r3
    5016:	bf14      	ite	ne
    5018:	f06f 0015 	mvnne.w	r0, #21
    501c:	2000      	moveq	r0, #0
    501e:	e794      	b.n	4f4a <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    5020:	2307      	movs	r3, #7
    5022:	e7da      	b.n	4fda <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    5024:	2305      	movs	r3, #5
    5026:	e7d8      	b.n	4fda <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    5028:	2303      	movs	r3, #3
    502a:	e7d6      	b.n	4fda <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    502c:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    502e:	bf41      	itttt	mi
    5030:	687b      	ldrmi	r3, [r7, #4]
    5032:	2101      	movmi	r1, #1
    5034:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    5038:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    503c:	e7e4      	b.n	5008 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    503e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5040:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    5044:	bf54      	ite	pl
    5046:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    504a:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    504c:	461a      	mov	r2, r3
    504e:	a901      	add	r1, sp, #4
    5050:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    5052:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5056:	f001 fa9d 	bl	6594 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    505a:	4b02      	ldr	r3, [pc, #8]	; (5064 <gpio_nrfx_pin_configure+0x14c>)
    505c:	4298      	cmp	r0, r3
    505e:	f43f af7f 	beq.w	4f60 <gpio_nrfx_pin_configure+0x48>
    5062:	e792      	b.n	4f8a <gpio_nrfx_pin_configure+0x72>
    5064:	0bad0000 	.word	0x0bad0000
    5068:	00f00006 	.word	0x00f00006
    506c:	00100006 	.word	0x00100006
    5070:	00400002 	.word	0x00400002

00005074 <cmd_gpio_conf>:
	.mode = 3,
	.value = 3,
};

static int cmd_gpio_conf(const struct shell *sh, size_t argc, char **argv)
{
    5074:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5078:	4607      	mov	r7, r0
	uint8_t index = 0U;
	int type = GPIO_OUTPUT;
	const struct device *dev;

	if (isdigit((unsigned char)argv[args_indx.index][0]) &&
    507a:	6890      	ldr	r0, [r2, #8]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    507c:	7803      	ldrb	r3, [r0, #0]
    507e:	3b30      	subs	r3, #48	; 0x30
    5080:	2b09      	cmp	r3, #9
{
    5082:	4614      	mov	r4, r2
	if (isdigit((unsigned char)argv[args_indx.index][0]) &&
    5084:	d814      	bhi.n	50b0 <cmd_gpio_conf+0x3c>
	    isalpha((unsigned char)argv[args_indx.mode][0])) {
    5086:	68d3      	ldr	r3, [r2, #12]
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    5088:	781b      	ldrb	r3, [r3, #0]
    508a:	f043 0320 	orr.w	r3, r3, #32
    508e:	3b61      	subs	r3, #97	; 0x61
	if (isdigit((unsigned char)argv[args_indx.index][0]) &&
    5090:	2b19      	cmp	r3, #25
    5092:	d80d      	bhi.n	50b0 <cmd_gpio_conf+0x3c>
		index = (uint8_t)atoi(argv[args_indx.index]);
    5094:	f005 f9fb 	bl	a48e <atoi>
		if (!strcmp(argv[args_indx.mode], "in")) {
    5098:	491d      	ldr	r1, [pc, #116]	; (5110 <cmd_gpio_conf+0x9c>)
    509a:	68e0      	ldr	r0, [r4, #12]
    509c:	f005 fa68 	bl	a570 <strcmp>
    50a0:	b180      	cbz	r0, 50c4 <cmd_gpio_conf+0x50>
			type = GPIO_INPUT;
		} else if (!strcmp(argv[args_indx.mode], "out")) {
    50a2:	491c      	ldr	r1, [pc, #112]	; (5114 <cmd_gpio_conf+0xa0>)
    50a4:	68e0      	ldr	r0, [r4, #12]
    50a6:	f005 fa63 	bl	a570 <strcmp>
    50aa:	b368      	cbz	r0, 5108 <cmd_gpio_conf+0x94>
		shell_print(sh, "Configuring %s pin %d",
			    argv[args_indx.port], index);
		gpio_pin_configure(dev, index, type);
	}

	return 0;
    50ac:	2000      	movs	r0, #0
    50ae:	e006      	b.n	50be <cmd_gpio_conf+0x4a>
		shell_error(sh, "Wrong parameters for conf");
    50b0:	4638      	mov	r0, r7
    50b2:	4a19      	ldr	r2, [pc, #100]	; (5118 <cmd_gpio_conf+0xa4>)
    50b4:	2101      	movs	r1, #1
    50b6:	f004 fb64 	bl	9782 <shell_fprintf>
		return -ENOTSUP;
    50ba:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    50be:	b002      	add	sp, #8
    50c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			type = GPIO_INPUT;
    50c4:	f44f 7880 	mov.w	r8, #256	; 0x100
	dev = device_get_binding(argv[args_indx.port]);
    50c8:	6860      	ldr	r0, [r4, #4]
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    50ca:	f002 fa21 	bl	7510 <z_impl_device_get_binding>
	if (dev != NULL) {
    50ce:	4605      	mov	r5, r0
    50d0:	2800      	cmp	r0, #0
    50d2:	d0eb      	beq.n	50ac <cmd_gpio_conf+0x38>
		index = (uint8_t)atoi(argv[args_indx.index]);
    50d4:	68a0      	ldr	r0, [r4, #8]
    50d6:	f005 f9da 	bl	a48e <atoi>
		shell_print(sh, "Configuring %s pin %d",
    50da:	b2c6      	uxtb	r6, r0
    50dc:	6863      	ldr	r3, [r4, #4]
    50de:	4a0f      	ldr	r2, [pc, #60]	; (511c <cmd_gpio_conf+0xa8>)
    50e0:	9600      	str	r6, [sp, #0]
    50e2:	2108      	movs	r1, #8
    50e4:	4638      	mov	r0, r7
    50e6:	f004 fb4c 	bl	9782 <shell_fprintf>
	struct gpio_driver_data *data =
    50ea:	6929      	ldr	r1, [r5, #16]
	const struct gpio_driver_api *api =
    50ec:	68a8      	ldr	r0, [r5, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    50ee:	2301      	movs	r3, #1
    50f0:	fa03 f206 	lsl.w	r2, r3, r6
    50f4:	680b      	ldr	r3, [r1, #0]
    50f6:	ea23 0302 	bic.w	r3, r3, r2
    50fa:	600b      	str	r3, [r1, #0]
	return api->pin_configure(port, pin, flags);
    50fc:	4642      	mov	r2, r8
    50fe:	6803      	ldr	r3, [r0, #0]
    5100:	4631      	mov	r1, r6
    5102:	4628      	mov	r0, r5
    5104:	4798      	blx	r3
    5106:	e7d1      	b.n	50ac <cmd_gpio_conf+0x38>
			type = GPIO_OUTPUT;
    5108:	f44f 7800 	mov.w	r8, #512	; 0x200
    510c:	e7dc      	b.n	50c8 <cmd_gpio_conf+0x54>
    510e:	bf00      	nop
    5110:	0000dcd0 	.word	0x0000dcd0
    5114:	0000d599 	.word	0x0000d599
    5118:	0000d59d 	.word	0x0000d59d
    511c:	0000d5b8 	.word	0x0000d5b8

00005120 <cmd_gpio_set>:
	return 0;
}

static int cmd_gpio_set(const struct shell *sh,
			size_t argc, char **argv)
{
    5120:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5124:	4607      	mov	r7, r0
	const struct device *dev;
	uint8_t index = 0U;
	uint8_t value = 0U;

	if (isdigit((unsigned char)argv[args_indx.index][0]) &&
    5126:	6890      	ldr	r0, [r2, #8]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    5128:	7803      	ldrb	r3, [r0, #0]
    512a:	3b30      	subs	r3, #48	; 0x30
    512c:	2b09      	cmp	r3, #9
{
    512e:	4615      	mov	r5, r2
	if (isdigit((unsigned char)argv[args_indx.index][0]) &&
    5130:	d811      	bhi.n	5156 <cmd_gpio_set+0x36>
	    isdigit((unsigned char)argv[args_indx.value][0])) {
    5132:	68d3      	ldr	r3, [r2, #12]
    5134:	781b      	ldrb	r3, [r3, #0]
    5136:	3b30      	subs	r3, #48	; 0x30
	if (isdigit((unsigned char)argv[args_indx.index][0]) &&
    5138:	2b09      	cmp	r3, #9
    513a:	d80c      	bhi.n	5156 <cmd_gpio_set+0x36>
		index = (uint8_t)atoi(argv[args_indx.index]);
    513c:	f005 f9a7 	bl	a48e <atoi>
		value = (uint8_t)atoi(argv[args_indx.value]);
    5140:	68e8      	ldr	r0, [r5, #12]
    5142:	f005 f9a4 	bl	a48e <atoi>
    5146:	4680      	mov	r8, r0
	} else {
		shell_print(sh, "Wrong parameters for set");
		return -EINVAL;
	}
	dev = device_get_binding(argv[args_indx.port]);
    5148:	6868      	ldr	r0, [r5, #4]
    514a:	f002 f9e1 	bl	7510 <z_impl_device_get_binding>

	if (dev != NULL) {
    514e:	4604      	mov	r4, r0
    5150:	b958      	cbnz	r0, 516a <cmd_gpio_set+0x4a>
		shell_print(sh, "Writing to %s pin %d",
			    argv[args_indx.port], index);
		gpio_pin_set(dev, index, value);
	}

	return 0;
    5152:	2000      	movs	r0, #0
    5154:	e006      	b.n	5164 <cmd_gpio_set+0x44>
		shell_print(sh, "Wrong parameters for set");
    5156:	4638      	mov	r0, r7
    5158:	4a0d      	ldr	r2, [pc, #52]	; (5190 <cmd_gpio_set+0x70>)
    515a:	2108      	movs	r1, #8
    515c:	f004 fb11 	bl	9782 <shell_fprintf>
		return -EINVAL;
    5160:	f06f 0015 	mvn.w	r0, #21
}
    5164:	b002      	add	sp, #8
    5166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		index = (uint8_t)atoi(argv[2]);
    516a:	68a8      	ldr	r0, [r5, #8]
    516c:	f005 f98f 	bl	a48e <atoi>
		shell_print(sh, "Writing to %s pin %d",
    5170:	b2c6      	uxtb	r6, r0
    5172:	686b      	ldr	r3, [r5, #4]
    5174:	4a07      	ldr	r2, [pc, #28]	; (5194 <cmd_gpio_set+0x74>)
    5176:	9600      	str	r6, [sp, #0]
    5178:	4638      	mov	r0, r7
    517a:	2108      	movs	r1, #8
    517c:	f004 fb01 	bl	9782 <shell_fprintf>
		gpio_pin_set(dev, index, value);
    5180:	fa5f f288 	uxtb.w	r2, r8
    5184:	4631      	mov	r1, r6
    5186:	4620      	mov	r0, r4
    5188:	f005 fc5b 	bl	aa42 <gpio_pin_set>
    518c:	e7e1      	b.n	5152 <cmd_gpio_set+0x32>
    518e:	bf00      	nop
    5190:	0000d5cf 	.word	0x0000d5cf
    5194:	0000d5e9 	.word	0x0000d5e9

00005198 <cmd_gpio_get>:
{
    5198:	b5f0      	push	{r4, r5, r6, r7, lr}
    519a:	4615      	mov	r5, r2
	if (isdigit((unsigned char)argv[args_indx.index][0])) {
    519c:	6892      	ldr	r2, [r2, #8]
    519e:	7813      	ldrb	r3, [r2, #0]
    51a0:	3b30      	subs	r3, #48	; 0x30
    51a2:	2b09      	cmp	r3, #9
{
    51a4:	b085      	sub	sp, #20
    51a6:	4606      	mov	r6, r0
	if (isdigit((unsigned char)argv[args_indx.index][0])) {
    51a8:	d809      	bhi.n	51be <cmd_gpio_get+0x26>
		index = (uint8_t)atoi(argv[args_indx.index]);
    51aa:	4610      	mov	r0, r2
    51ac:	f005 f96f 	bl	a48e <atoi>
	dev = device_get_binding(argv[args_indx.port]);
    51b0:	6868      	ldr	r0, [r5, #4]
    51b2:	f002 f9ad 	bl	7510 <z_impl_device_get_binding>
	if (dev != NULL) {
    51b6:	4604      	mov	r4, r0
    51b8:	b948      	cbnz	r0, 51ce <cmd_gpio_get+0x36>
	return 0;
    51ba:	2000      	movs	r0, #0
    51bc:	e005      	b.n	51ca <cmd_gpio_get+0x32>
		shell_error(sh, "Wrong parameters for get");
    51be:	4a1a      	ldr	r2, [pc, #104]	; (5228 <cmd_gpio_get+0x90>)
    51c0:	2101      	movs	r1, #1
    51c2:	f004 fade 	bl	9782 <shell_fprintf>
		return -EINVAL;
    51c6:	f06f 0015 	mvn.w	r0, #21
}
    51ca:	b005      	add	sp, #20
    51cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		index = (uint8_t)atoi(argv[2]);
    51ce:	68a8      	ldr	r0, [r5, #8]
    51d0:	f005 f95d 	bl	a48e <atoi>
		shell_print(sh, "Reading %s pin %d",
    51d4:	b2c7      	uxtb	r7, r0
    51d6:	9700      	str	r7, [sp, #0]
    51d8:	686b      	ldr	r3, [r5, #4]
    51da:	4a14      	ldr	r2, [pc, #80]	; (522c <cmd_gpio_get+0x94>)
    51dc:	2108      	movs	r1, #8
    51de:	4630      	mov	r0, r6
    51e0:	f004 facf 	bl	9782 <shell_fprintf>
	const struct gpio_driver_data *const data =
    51e4:	6925      	ldr	r5, [r4, #16]
	return api->port_get_raw(port, value);
    51e6:	68a3      	ldr	r3, [r4, #8]
    51e8:	a903      	add	r1, sp, #12
    51ea:	685b      	ldr	r3, [r3, #4]
    51ec:	4620      	mov	r0, r4
    51ee:	4798      	blx	r3
	if (ret == 0) {
    51f0:	1e03      	subs	r3, r0, #0
    51f2:	d10f      	bne.n	5214 <cmd_gpio_get+0x7c>
		*value ^= data->invert;
    51f4:	682a      	ldr	r2, [r5, #0]
    51f6:	9b03      	ldr	r3, [sp, #12]
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    51f8:	2001      	movs	r0, #1
		*value ^= data->invert;
    51fa:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    51fc:	fa00 f707 	lsl.w	r7, r0, r7
    5200:	423b      	tst	r3, r7
    5202:	bf14      	ite	ne
    5204:	4603      	movne	r3, r0
    5206:	2300      	moveq	r3, #0
			shell_print(sh, "Value %d", rc);
    5208:	4a09      	ldr	r2, [pc, #36]	; (5230 <cmd_gpio_get+0x98>)
    520a:	2108      	movs	r1, #8
    520c:	4630      	mov	r0, r6
    520e:	f004 fab8 	bl	9782 <shell_fprintf>
    5212:	e7d2      	b.n	51ba <cmd_gpio_get+0x22>
		if (rc >= 0) {
    5214:	daf8      	bge.n	5208 <cmd_gpio_get+0x70>
			shell_error(sh, "Error %d reading value", rc);
    5216:	4630      	mov	r0, r6
    5218:	4a06      	ldr	r2, [pc, #24]	; (5234 <cmd_gpio_get+0x9c>)
    521a:	2101      	movs	r1, #1
    521c:	f004 fab1 	bl	9782 <shell_fprintf>
			return -EIO;
    5220:	f06f 0004 	mvn.w	r0, #4
    5224:	e7d1      	b.n	51ca <cmd_gpio_get+0x32>
    5226:	bf00      	nop
    5228:	0000d5ff 	.word	0x0000d5ff
    522c:	0000d619 	.word	0x0000d619
    5230:	0000d62c 	.word	0x0000d62c
    5234:	0000d636 	.word	0x0000d636

00005238 <cmd_gpio_blink>:
/* 500 msec = 1/2 sec */
#define SLEEP_TIME_MS   500

static int cmd_gpio_blink(const struct shell *sh,
			  size_t argc, char **argv)
{
    5238:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    523c:	4617      	mov	r7, r2
	const struct device *dev;
	uint8_t index = 0U;
	uint8_t value = 0U;
	size_t count = 0;
    523e:	2600      	movs	r6, #0
	char data;

	if (isdigit((unsigned char)argv[args_indx.index][0])) {
    5240:	6892      	ldr	r2, [r2, #8]
	size_t count = 0;
    5242:	9603      	str	r6, [sp, #12]
    5244:	7813      	ldrb	r3, [r2, #0]
    5246:	3b30      	subs	r3, #48	; 0x30
	if (isdigit((unsigned char)argv[args_indx.index][0])) {
    5248:	2b09      	cmp	r3, #9
{
    524a:	4605      	mov	r5, r0
	if (isdigit((unsigned char)argv[args_indx.index][0])) {
    524c:	d809      	bhi.n	5262 <cmd_gpio_blink+0x2a>
		index = (uint8_t)atoi(argv[args_indx.index]);
    524e:	4610      	mov	r0, r2
    5250:	f005 f91d 	bl	a48e <atoi>
	} else {
		shell_error(sh, "Wrong parameters for blink");
		return -EINVAL;
	}
	dev = device_get_binding(argv[args_indx.port]);
    5254:	6878      	ldr	r0, [r7, #4]
    5256:	f002 f95b 	bl	7510 <z_impl_device_get_binding>

	if (dev != NULL) {
    525a:	4604      	mov	r4, r0
    525c:	b950      	cbnz	r0, 5274 <cmd_gpio_blink+0x3c>
		}

		shell_fprintf(sh, SHELL_NORMAL, "\n");
	}

	return 0;
    525e:	2000      	movs	r0, #0
    5260:	e005      	b.n	526e <cmd_gpio_blink+0x36>
		shell_error(sh, "Wrong parameters for blink");
    5262:	4a1c      	ldr	r2, [pc, #112]	; (52d4 <cmd_gpio_blink+0x9c>)
    5264:	2101      	movs	r1, #1
    5266:	f004 fa8c 	bl	9782 <shell_fprintf>
		return -EINVAL;
    526a:	f06f 0015 	mvn.w	r0, #21
}
    526e:	b004      	add	sp, #16
    5270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		index = (uint8_t)atoi(argv[2]);
    5274:	68b8      	ldr	r0, [r7, #8]
    5276:	f005 f90a 	bl	a48e <atoi>
    527a:	fa5f f880 	uxtb.w	r8, r0
		shell_fprintf(sh, SHELL_NORMAL, "Blinking port %s index %d.", argv[1], index);
    527e:	f8cd 8000 	str.w	r8, [sp]
    5282:	4a15      	ldr	r2, [pc, #84]	; (52d8 <cmd_gpio_blink+0xa0>)
    5284:	687b      	ldr	r3, [r7, #4]
    5286:	2108      	movs	r1, #8
    5288:	4628      	mov	r0, r5
    528a:	f004 fa7a 	bl	9782 <shell_fprintf>
		shell_fprintf(sh, SHELL_NORMAL, " Hit any key to exit");
    528e:	4a13      	ldr	r2, [pc, #76]	; (52dc <cmd_gpio_blink+0xa4>)
    5290:	2108      	movs	r1, #8
    5292:	4628      	mov	r0, r5
    5294:	f004 fa75 	bl	9782 <shell_fprintf>
			(void)sh->iface->api->read(sh->iface, &data, sizeof(data), &count);
    5298:	6868      	ldr	r0, [r5, #4]
    529a:	6803      	ldr	r3, [r0, #0]
    529c:	2201      	movs	r2, #1
    529e:	691f      	ldr	r7, [r3, #16]
    52a0:	f10d 010b 	add.w	r1, sp, #11
    52a4:	ab03      	add	r3, sp, #12
    52a6:	47b8      	blx	r7
			if (count != 0) {
    52a8:	9b03      	ldr	r3, [sp, #12]
    52aa:	b963      	cbnz	r3, 52c6 <cmd_gpio_blink+0x8e>
			gpio_pin_set(dev, index, value);
    52ac:	4632      	mov	r2, r6
    52ae:	4641      	mov	r1, r8
    52b0:	4620      	mov	r0, r4
    52b2:	f005 fbc6 	bl	aa42 <gpio_pin_set>
			value = !value;
    52b6:	f086 0601 	eor.w	r6, r6, #1
    52ba:	2100      	movs	r1, #0
    52bc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    52c0:	f002 fec0 	bl	8044 <z_impl_k_sleep>
    52c4:	e7e8      	b.n	5298 <cmd_gpio_blink+0x60>
		shell_fprintf(sh, SHELL_NORMAL, "\n");
    52c6:	4a06      	ldr	r2, [pc, #24]	; (52e0 <cmd_gpio_blink+0xa8>)
    52c8:	2108      	movs	r1, #8
    52ca:	4628      	mov	r0, r5
    52cc:	f004 fa59 	bl	9782 <shell_fprintf>
    52d0:	e7c5      	b.n	525e <cmd_gpio_blink+0x26>
    52d2:	bf00      	nop
    52d4:	0000d64e 	.word	0x0000d64e
    52d8:	0000d66a 	.word	0x0000d66a
    52dc:	0000d685 	.word	0x0000d685
    52e0:	0000cb45 	.word	0x0000cb45

000052e4 <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
    52e4:	b508      	push	{r3, lr}
	nrfx_err_t err = nrfx_twim_bus_recover(get_dev_config(dev)->config.scl,
    52e6:	6843      	ldr	r3, [r0, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    52e8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    52ec:	f001 fc3a 	bl	6b64 <nrfx_twi_twim_bus_recover>
					       get_dev_config(dev)->config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    52f0:	4b03      	ldr	r3, [pc, #12]	; (5300 <i2c_nrfx_twim_recover_bus+0x1c>)
    52f2:	4298      	cmp	r0, r3
}
    52f4:	bf14      	ite	ne
    52f6:	f06f 000f 	mvnne.w	r0, #15
    52fa:	2000      	moveq	r0, #0
    52fc:	bd08      	pop	{r3, pc}
    52fe:	bf00      	nop
    5300:	0bad0000 	.word	0x0bad0000

00005304 <twim_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
    5304:	b510      	push	{r4, lr}
    5306:	4604      	mov	r4, r0
    5308:	2200      	movs	r2, #0
    530a:	2101      	movs	r1, #1
    530c:	2003      	movs	r0, #3
    530e:	f7fe ff81 	bl	4214 <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
    5312:	6860      	ldr	r0, [r4, #4]
    5314:	6923      	ldr	r3, [r4, #16]
    5316:	4a06      	ldr	r2, [pc, #24]	; (5330 <twim_0_init+0x2c>)
    5318:	f100 0108 	add.w	r1, r0, #8
    531c:	f001 fc86 	bl	6c2c <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
    5320:	4b04      	ldr	r3, [pc, #16]	; (5334 <twim_0_init+0x30>)
    5322:	4298      	cmp	r0, r3
I2C_NRFX_TWIM_DEVICE(0);
    5324:	bf14      	ite	ne
    5326:	f06f 000f 	mvnne.w	r0, #15
    532a:	2000      	moveq	r0, #0
    532c:	bd10      	pop	{r4, pc}
    532e:	bf00      	nop
    5330:	00005339 	.word	0x00005339
    5334:	0bad0000 	.word	0x0bad0000

00005338 <event_handler>:
	switch (p_event->type) {
    5338:	7803      	ldrb	r3, [r0, #0]
    533a:	2b01      	cmp	r3, #1
    533c:	d008      	beq.n	5350 <event_handler+0x18>
    533e:	2b02      	cmp	r3, #2
    5340:	d008      	beq.n	5354 <event_handler+0x1c>
    5342:	b94b      	cbnz	r3, 5358 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    5344:	4b05      	ldr	r3, [pc, #20]	; (535c <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    5346:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
    5348:	f101 0018 	add.w	r0, r1, #24
    534c:	f002 bf12 	b.w	8174 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    5350:	4b03      	ldr	r3, [pc, #12]	; (5360 <event_handler+0x28>)
    5352:	e7f8      	b.n	5346 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    5354:	4b03      	ldr	r3, [pc, #12]	; (5364 <event_handler+0x2c>)
    5356:	e7f6      	b.n	5346 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    5358:	4b03      	ldr	r3, [pc, #12]	; (5368 <event_handler+0x30>)
    535a:	e7f4      	b.n	5346 <event_handler+0xe>
    535c:	0bad0000 	.word	0x0bad0000
    5360:	0bae0001 	.word	0x0bae0001
    5364:	0bae0002 	.word	0x0bae0002
    5368:	0bad0001 	.word	0x0bad0001

0000536c <i2c_nrfx_twim_transfer>:
{
    536c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct i2c_nrfx_twim_config *dev_config = get_dev_config(dev);
    5370:	6846      	ldr	r6, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = get_dev_data(dev);
    5372:	6907      	ldr	r7, [r0, #16]
{
    5374:	b089      	sub	sp, #36	; 0x24
    5376:	461d      	mov	r5, r3
    5378:	460c      	mov	r4, r1
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    537a:	8b33      	ldrh	r3, [r6, #24]
	uint8_t *msg_buf = dev_data->msg_buf;
    537c:	f8d7 9038 	ldr.w	r9, [r7, #56]	; 0x38
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    5380:	9300      	str	r3, [sp, #0]
{
    5382:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
    5384:	2100      	movs	r1, #0
    5386:	2214      	movs	r2, #20
    5388:	a803      	add	r0, sp, #12
    538a:	f005 f93e 	bl	a60a <memset>
    538e:	f88d 500d 	strb.w	r5, [sp, #13]
	return z_impl_k_sem_take(sem, timeout);
    5392:	f04f 32ff 	mov.w	r2, #4294967295
    5396:	f04f 33ff 	mov.w	r3, #4294967295
    539a:	4638      	mov	r0, r7
    539c:	f002 ff10 	bl	81c0 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
    53a0:	f107 0a18 	add.w	sl, r7, #24
    53a4:	2200      	movs	r2, #0
    53a6:	2300      	movs	r3, #0
    53a8:	4650      	mov	r0, sl
    53aa:	f002 ff09 	bl	81c0 <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
    53ae:	4630      	mov	r0, r6
    53b0:	f001 fc9e 	bl	6cf0 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
    53b4:	f04f 0800 	mov.w	r8, #0
	uint16_t msg_buf_used = 0;
    53b8:	4645      	mov	r5, r8
	for (size_t i = 0; i < num_msgs; i++) {
    53ba:	45d8      	cmp	r8, fp
    53bc:	d301      	bcc.n	53c2 <i2c_nrfx_twim_transfer+0x56>
    53be:	2400      	movs	r4, #0
    53c0:	e049      	b.n	5456 <i2c_nrfx_twim_transfer+0xea>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    53c2:	7a21      	ldrb	r1, [r4, #8]
    53c4:	070a      	lsls	r2, r1, #28
    53c6:	f100 808f 	bmi.w	54e8 <i2c_nrfx_twim_transfer+0x17c>
		bool concat_next = ((i + 1) < num_msgs)
    53ca:	f108 0801 	add.w	r8, r8, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
    53ce:	45d8      	cmp	r8, fp
    53d0:	6862      	ldr	r2, [r4, #4]
    53d2:	d20a      	bcs.n	53ea <i2c_nrfx_twim_transfer+0x7e>
				&& !(msgs[i].flags & I2C_MSG_STOP)
    53d4:	078b      	lsls	r3, r1, #30
    53d6:	d408      	bmi.n	53ea <i2c_nrfx_twim_transfer+0x7e>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    53d8:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
    53da:	ea81 0003 	eor.w	r0, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
    53de:	f000 0001 	and.w	r0, r0, #1
    53e2:	f003 0304 	and.w	r3, r3, #4
    53e6:	4303      	orrs	r3, r0
    53e8:	d016      	beq.n	5418 <i2c_nrfx_twim_transfer+0xac>
		if (concat_next || (msg_buf_used != 0)) {
    53ea:	b1bd      	cbz	r5, 541c <i2c_nrfx_twim_transfer+0xb0>
				&& ((msgs[i].flags & I2C_MSG_READ)
    53ec:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
    53ee:	9800      	ldr	r0, [sp, #0]
    53f0:	eb05 0c02 	add.w	ip, r5, r2
    53f4:	4584      	cmp	ip, r0
    53f6:	d87a      	bhi.n	54ee <i2c_nrfx_twim_transfer+0x182>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    53f8:	07c8      	lsls	r0, r1, #31
    53fa:	d406      	bmi.n	540a <i2c_nrfx_twim_transfer+0x9e>
				memcpy(msg_buf + msg_buf_used,
    53fc:	6821      	ldr	r1, [r4, #0]
    53fe:	9301      	str	r3, [sp, #4]
    5400:	eb09 0005 	add.w	r0, r9, r5
    5404:	f005 f8f6 	bl	a5f4 <memcpy>
    5408:	9b01      	ldr	r3, [sp, #4]
			msg_buf_used += msgs[i].len;
    540a:	6862      	ldr	r2, [r4, #4]
    540c:	4415      	add	r5, r2
    540e:	b2ad      	uxth	r5, r5
		if (concat_next) {
    5410:	2b00      	cmp	r3, #0
    5412:	d037      	beq.n	5484 <i2c_nrfx_twim_transfer+0x118>
    5414:	340c      	adds	r4, #12
    5416:	e7d0      	b.n	53ba <i2c_nrfx_twim_transfer+0x4e>
				&& ((msgs[i].flags & I2C_MSG_READ)
    5418:	2301      	movs	r3, #1
    541a:	e7e8      	b.n	53ee <i2c_nrfx_twim_transfer+0x82>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    541c:	07c9      	lsls	r1, r1, #31
    541e:	d524      	bpl.n	546a <i2c_nrfx_twim_transfer+0xfe>
			cur_xfer.p_primary_buf = msgs[i].buf;
    5420:	6823      	ldr	r3, [r4, #0]
    5422:	9306      	str	r3, [sp, #24]
			cur_xfer.primary_length = msgs[i].len;
    5424:	6863      	ldr	r3, [r4, #4]
    5426:	9304      	str	r3, [sp, #16]
    5428:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    542a:	7a23      	ldrb	r3, [r4, #8]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    542c:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    5430:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    5434:	f88d 200c 	strb.w	r2, [sp, #12]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    5438:	a903      	add	r1, sp, #12
    543a:	bf0c      	ite	eq
    543c:	2220      	moveq	r2, #32
    543e:	2200      	movne	r2, #0
    5440:	4630      	mov	r0, r6
    5442:	f001 fc83 	bl	6d4c <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    5446:	4b2e      	ldr	r3, [pc, #184]	; (5500 <i2c_nrfx_twim_transfer+0x194>)
    5448:	4298      	cmp	r0, r3
    544a:	d021      	beq.n	5490 <i2c_nrfx_twim_transfer+0x124>
			if (res == NRFX_ERROR_BUSY) {
    544c:	330b      	adds	r3, #11
    544e:	4298      	cmp	r0, r3
    5450:	d053      	beq.n	54fa <i2c_nrfx_twim_transfer+0x18e>
			ret = -EIO;
    5452:	f06f 0404 	mvn.w	r4, #4
	nrfx_twim_disable(&dev_config->twim);
    5456:	4630      	mov	r0, r6
    5458:	f001 fc5a 	bl	6d10 <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
    545c:	4638      	mov	r0, r7
    545e:	f002 fe89 	bl	8174 <z_impl_k_sem_give>
}
    5462:	4620      	mov	r0, r4
    5464:	b009      	add	sp, #36	; 0x24
    5466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    546a:	6821      	ldr	r1, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    546c:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    5470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    5474:	d0d4      	beq.n	5420 <i2c_nrfx_twim_transfer+0xb4>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
    5476:	8b73      	ldrh	r3, [r6, #26]
    5478:	4293      	cmp	r3, r2
    547a:	d33b      	bcc.n	54f4 <i2c_nrfx_twim_transfer+0x188>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
    547c:	4648      	mov	r0, r9
    547e:	f005 f8b9 	bl	a5f4 <memcpy>
			msg_buf_used = msgs[i].len;
    5482:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
    5484:	2d00      	cmp	r5, #0
    5486:	d0cb      	beq.n	5420 <i2c_nrfx_twim_transfer+0xb4>
			cur_xfer.p_primary_buf = msg_buf;
    5488:	f8cd 9018 	str.w	r9, [sp, #24]
			cur_xfer.primary_length = msg_buf_used;
    548c:	9504      	str	r5, [sp, #16]
    548e:	e7cc      	b.n	542a <i2c_nrfx_twim_transfer+0xbe>
	return z_impl_k_sem_take(sem, timeout);
    5490:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5494:	2300      	movs	r3, #0
    5496:	4650      	mov	r0, sl
    5498:	f002 fe92 	bl	81c0 <z_impl_k_sem_take>
		if (ret != 0) {
    549c:	b138      	cbz	r0, 54ae <i2c_nrfx_twim_transfer+0x142>
			nrfx_twim_disable(&dev_config->twim);
    549e:	4630      	mov	r0, r6
    54a0:	f001 fc36 	bl	6d10 <nrfx_twim_disable>
    54a4:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
    54a8:	f001 fb5c 	bl	6b64 <nrfx_twi_twim_bus_recover>
    54ac:	e7d1      	b.n	5452 <i2c_nrfx_twim_transfer+0xe6>
		res = dev_data->res;
    54ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
    54b0:	4a13      	ldr	r2, [pc, #76]	; (5500 <i2c_nrfx_twim_transfer+0x194>)
    54b2:	4293      	cmp	r3, r2
    54b4:	d1cd      	bne.n	5452 <i2c_nrfx_twim_transfer+0xe6>
		if ((msgs[i].flags & I2C_MSG_READ)
    54b6:	7a23      	ldrb	r3, [r4, #8]
    54b8:	07db      	lsls	r3, r3, #31
    54ba:	d401      	bmi.n	54c0 <i2c_nrfx_twim_transfer+0x154>
		msg_buf_used = 0;
    54bc:	2500      	movs	r5, #0
    54be:	e7a9      	b.n	5414 <i2c_nrfx_twim_transfer+0xa8>
		    && cur_xfer.p_primary_buf == msg_buf) {
    54c0:	9b06      	ldr	r3, [sp, #24]
    54c2:	4599      	cmp	r9, r3
    54c4:	d1fa      	bne.n	54bc <i2c_nrfx_twim_transfer+0x150>
    54c6:	4623      	mov	r3, r4
    54c8:	e008      	b.n	54dc <i2c_nrfx_twim_transfer+0x170>
				msg_buf_used -= msgs[j].len;
    54ca:	1aa9      	subs	r1, r5, r2
				memcpy(msgs[j].buf,
    54cc:	68d8      	ldr	r0, [r3, #12]
    54ce:	9301      	str	r3, [sp, #4]
				msg_buf_used -= msgs[j].len;
    54d0:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
    54d2:	fa19 f181 	uxtah	r1, r9, r1
    54d6:	f005 f88d 	bl	a5f4 <memcpy>
				j--;
    54da:	9b01      	ldr	r3, [sp, #4]
			while (msg_buf_used >= msgs[j].len) {
    54dc:	685a      	ldr	r2, [r3, #4]
    54de:	4295      	cmp	r5, r2
    54e0:	f1a3 030c 	sub.w	r3, r3, #12
    54e4:	d2f1      	bcs.n	54ca <i2c_nrfx_twim_transfer+0x15e>
    54e6:	e7e9      	b.n	54bc <i2c_nrfx_twim_transfer+0x150>
			ret = -ENOTSUP;
    54e8:	f06f 0485 	mvn.w	r4, #133	; 0x85
    54ec:	e7b3      	b.n	5456 <i2c_nrfx_twim_transfer+0xea>
				ret = -ENOSPC;
    54ee:	f06f 041b 	mvn.w	r4, #27
    54f2:	e7b0      	b.n	5456 <i2c_nrfx_twim_transfer+0xea>
				ret = -EINVAL;
    54f4:	f06f 0415 	mvn.w	r4, #21
    54f8:	e7ad      	b.n	5456 <i2c_nrfx_twim_transfer+0xea>
				ret = -EBUSY;
    54fa:	f06f 040f 	mvn.w	r4, #15
    54fe:	e7aa      	b.n	5456 <i2c_nrfx_twim_transfer+0xea>
    5500:	0bad0000 	.word	0x0bad0000

00005504 <device_name_get>:
static void device_name_get(size_t idx, struct shell_static_entry *entry);

SHELL_DYNAMIC_CMD_CREATE(dsub_device_name, device_name_get);

static void device_name_get(size_t idx, struct shell_static_entry *entry)
{
    5504:	b510      	push	{r4, lr}
    5506:	460c      	mov	r4, r1
	const struct device *dev = shell_device_lookup(idx, I2C_DEVICE_PREFIX);
    5508:	4905      	ldr	r1, [pc, #20]	; (5520 <device_name_get+0x1c>)
    550a:	f004 ff29 	bl	a360 <shell_device_lookup>

	entry->syntax = (dev != NULL) ? dev->name : NULL;
    550e:	b100      	cbz	r0, 5512 <device_name_get+0xe>
    5510:	6800      	ldr	r0, [r0, #0]
    5512:	6020      	str	r0, [r4, #0]
	entry->handler = NULL;
    5514:	2300      	movs	r3, #0
	entry->help = NULL;
	entry->subcmd = NULL;
    5516:	e9c4 3301 	strd	r3, r3, [r4, #4]
	entry->handler = NULL;
    551a:	60e3      	str	r3, [r4, #12]
}
    551c:	bd10      	pop	{r4, pc}
    551e:	bf00      	nop
    5520:	0000d6f4 	.word	0x0000d6f4

00005524 <cmd_i2c_scan>:
{
    5524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5528:	4604      	mov	r4, r0
    552a:	b089      	sub	sp, #36	; 0x24
	dev = device_get_binding(argv[1]);
    552c:	6850      	ldr	r0, [r2, #4]
{
    552e:	4617      	mov	r7, r2
    5530:	f001 ffee 	bl	7510 <z_impl_device_get_binding>
	if (!dev) {
    5534:	4680      	mov	r8, r0
    5536:	b950      	cbnz	r0, 554e <cmd_i2c_scan+0x2a>
		shell_error(shell, "I2C: Device driver %s not found.",
    5538:	4620      	mov	r0, r4
    553a:	687b      	ldr	r3, [r7, #4]
    553c:	4a2d      	ldr	r2, [pc, #180]	; (55f4 <cmd_i2c_scan+0xd0>)
    553e:	2101      	movs	r1, #1
    5540:	f004 f91f 	bl	9782 <shell_fprintf>
		return -ENODEV;
    5544:	f06f 0012 	mvn.w	r0, #18
}
    5548:	b009      	add	sp, #36	; 0x24
    554a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	shell_print(shell,
    554e:	4a2a      	ldr	r2, [pc, #168]	; (55f8 <cmd_i2c_scan+0xd4>)
				shell_fprintf(shell, SHELL_NORMAL, "-- ");
    5550:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 560c <cmd_i2c_scan+0xe8>
	shell_print(shell,
    5554:	2108      	movs	r1, #8
    5556:	4620      	mov	r0, r4
    5558:	f004 f913 	bl	9782 <shell_fprintf>
	uint8_t cnt = 0, first = 0x04, last = 0x77;
    555c:	2300      	movs	r3, #0
	shell_print(shell,
    555e:	f04f 0910 	mov.w	r9, #16
	uint8_t cnt = 0, first = 0x04, last = 0x77;
    5562:	9303      	str	r3, [sp, #12]
		shell_fprintf(shell, SHELL_NORMAL, "%02x: ", i);
    5564:	f1a9 0510 	sub.w	r5, r9, #16
    5568:	4a24      	ldr	r2, [pc, #144]	; (55fc <cmd_i2c_scan+0xd8>)
				shell_fprintf(shell, SHELL_NORMAL, "   ");
    556a:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 5610 <cmd_i2c_scan+0xec>
		shell_fprintf(shell, SHELL_NORMAL, "%02x: ", i);
    556e:	462b      	mov	r3, r5
    5570:	2108      	movs	r1, #8
    5572:	4620      	mov	r0, r4
    5574:	f004 f905 	bl	9782 <shell_fprintf>
			if (i + j < first || i + j > last) {
    5578:	1f2b      	subs	r3, r5, #4
    557a:	2b73      	cmp	r3, #115	; 0x73
    557c:	d905      	bls.n	558a <cmd_i2c_scan+0x66>
				shell_fprintf(shell, SHELL_NORMAL, "   ");
    557e:	4652      	mov	r2, sl
				shell_fprintf(shell, SHELL_NORMAL, "-- ");
    5580:	2108      	movs	r1, #8
    5582:	4620      	mov	r0, r4
    5584:	f004 f8fd 	bl	9782 <shell_fprintf>
    5588:	e01b      	b.n	55c2 <cmd_i2c_scan+0x9e>
			msgs[0].buf = &dst;
    558a:	f10d 0313 	add.w	r3, sp, #19
    558e:	9305      	str	r3, [sp, #20]
			msgs[0].len = 0U;
    5590:	2300      	movs	r3, #0
    5592:	9306      	str	r3, [sp, #24]
			msgs[0].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    5594:	2302      	movs	r3, #2
    5596:	f88d 301c 	strb.w	r3, [sp, #28]
				      uint16_t addr)
{
	const struct i2c_driver_api *api =
		(const struct i2c_driver_api *)dev->api;

	int res =  api->transfer(dev, msgs, num_msgs, addr);
    559a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    559e:	689b      	ldr	r3, [r3, #8]
    55a0:	2201      	movs	r2, #1
    55a2:	461e      	mov	r6, r3
    55a4:	a905      	add	r1, sp, #20
    55a6:	b2ab      	uxth	r3, r5
    55a8:	4640      	mov	r0, r8
    55aa:	47b0      	blx	r6
			if (i2c_transfer(dev, &msgs[0], 1, i + j) == 0) {
    55ac:	b9f8      	cbnz	r0, 55ee <cmd_i2c_scan+0xca>
				shell_fprintf(shell, SHELL_NORMAL,
    55ae:	462b      	mov	r3, r5
    55b0:	4a13      	ldr	r2, [pc, #76]	; (5600 <cmd_i2c_scan+0xdc>)
    55b2:	2108      	movs	r1, #8
    55b4:	4620      	mov	r0, r4
    55b6:	f004 f8e4 	bl	9782 <shell_fprintf>
				++cnt;
    55ba:	9e03      	ldr	r6, [sp, #12]
    55bc:	3601      	adds	r6, #1
    55be:	b2f3      	uxtb	r3, r6
    55c0:	9303      	str	r3, [sp, #12]
		for (uint8_t j = 0; j < 16; j++) {
    55c2:	3501      	adds	r5, #1
    55c4:	454d      	cmp	r5, r9
    55c6:	d1d7      	bne.n	5578 <cmd_i2c_scan+0x54>
		shell_print(shell, "");
    55c8:	4a0e      	ldr	r2, [pc, #56]	; (5604 <cmd_i2c_scan+0xe0>)
    55ca:	2108      	movs	r1, #8
    55cc:	4620      	mov	r0, r4
    55ce:	f004 f8d8 	bl	9782 <shell_fprintf>
	for (uint8_t i = 0; i <= last; i += 16) {
    55d2:	2d80      	cmp	r5, #128	; 0x80
    55d4:	f105 0910 	add.w	r9, r5, #16
    55d8:	d1c4      	bne.n	5564 <cmd_i2c_scan+0x40>
	shell_print(shell, "%u devices found on %s",
    55da:	687b      	ldr	r3, [r7, #4]
    55dc:	9300      	str	r3, [sp, #0]
    55de:	4620      	mov	r0, r4
    55e0:	9b03      	ldr	r3, [sp, #12]
    55e2:	4a09      	ldr	r2, [pc, #36]	; (5608 <cmd_i2c_scan+0xe4>)
    55e4:	2108      	movs	r1, #8
    55e6:	f004 f8cc 	bl	9782 <shell_fprintf>
	return 0;
    55ea:	2000      	movs	r0, #0
    55ec:	e7ac      	b.n	5548 <cmd_i2c_scan+0x24>
				shell_fprintf(shell, SHELL_NORMAL, "-- ");
    55ee:	465a      	mov	r2, fp
    55f0:	e7c6      	b.n	5580 <cmd_i2c_scan+0x5c>
    55f2:	bf00      	nop
    55f4:	0000d6f9 	.word	0x0000d6f9
    55f8:	0000d71b 	.word	0x0000d71b
    55fc:	0000d750 	.word	0x0000d750
    5600:	0000cfae 	.word	0x0000cfae
    5604:	0000cb45 	.word	0x0000cb45
    5608:	0000d75b 	.word	0x0000d75b
    560c:	0000d757 	.word	0x0000d757
    5610:	0000cfb4 	.word	0x0000cfb4

00005614 <cmd_i2c_recover>:
{
    5614:	b538      	push	{r3, r4, r5, lr}
    5616:	4605      	mov	r5, r0
    5618:	4614      	mov	r4, r2
	dev = device_get_binding(argv[1]);
    561a:	6850      	ldr	r0, [r2, #4]
    561c:	f001 ff78 	bl	7510 <z_impl_device_get_binding>
	if (!dev) {
    5620:	b948      	cbnz	r0, 5636 <cmd_i2c_recover+0x22>
		shell_error(shell, "I2C: Device driver %s not found.", argv[1]);
    5622:	6863      	ldr	r3, [r4, #4]
    5624:	4a0c      	ldr	r2, [pc, #48]	; (5658 <cmd_i2c_recover+0x44>)
    5626:	2101      	movs	r1, #1
    5628:	4628      	mov	r0, r5
    562a:	f004 f8aa 	bl	9782 <shell_fprintf>
    562e:	f06f 0412 	mvn.w	r4, #18
}
    5632:	4620      	mov	r0, r4
    5634:	bd38      	pop	{r3, r4, r5, pc}
static inline int z_impl_i2c_recover_bus(const struct device *dev)
{
	const struct i2c_driver_api *api =
		(const struct i2c_driver_api *)dev->api;

	if (api->recover_bus == NULL) {
    5636:	6883      	ldr	r3, [r0, #8]
    5638:	695b      	ldr	r3, [r3, #20]
    563a:	b153      	cbz	r3, 5652 <cmd_i2c_recover+0x3e>
		return -ENOSYS;
	}

	return api->recover_bus(dev);
    563c:	4798      	blx	r3
	if (err) {
    563e:	4604      	mov	r4, r0
    5640:	2800      	cmp	r0, #0
    5642:	d0f6      	beq.n	5632 <cmd_i2c_recover+0x1e>
		shell_error(shell, "I2C: Bus recovery failed (err %d)", err);
    5644:	4a05      	ldr	r2, [pc, #20]	; (565c <cmd_i2c_recover+0x48>)
    5646:	4623      	mov	r3, r4
    5648:	2101      	movs	r1, #1
    564a:	4628      	mov	r0, r5
    564c:	f004 f899 	bl	9782 <shell_fprintf>
		return err;
    5650:	e7ef      	b.n	5632 <cmd_i2c_recover+0x1e>
		return -ENOSYS;
    5652:	f06f 0457 	mvn.w	r4, #87	; 0x57
    5656:	e7f5      	b.n	5644 <cmd_i2c_recover+0x30>
    5658:	0000d6f9 	.word	0x0000d6f9
    565c:	0000d773 	.word	0x0000d773

00005660 <cmd_i2c_write_byte>:
{
    5660:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    5664:	4606      	mov	r6, r0
    5666:	4614      	mov	r4, r2
	dev = device_get_binding(argv[1]);
    5668:	6850      	ldr	r0, [r2, #4]
    566a:	f001 ff51 	bl	7510 <z_impl_device_get_binding>
	if (!dev) {
    566e:	4605      	mov	r5, r0
    5670:	b950      	cbnz	r0, 5688 <cmd_i2c_write_byte+0x28>
		shell_error(shell, "I2C: Device driver %s not found.",
    5672:	4630      	mov	r0, r6
    5674:	6863      	ldr	r3, [r4, #4]
    5676:	4a1c      	ldr	r2, [pc, #112]	; (56e8 <cmd_i2c_write_byte+0x88>)
    5678:	2101      	movs	r1, #1
    567a:	f004 f882 	bl	9782 <shell_fprintf>
		return -ENODEV;
    567e:	f06f 0012 	mvn.w	r0, #18
}
    5682:	b004      	add	sp, #16
    5684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dev_addr = strtol(argv[2], NULL, 16);
    5688:	68a0      	ldr	r0, [r4, #8]
    568a:	2210      	movs	r2, #16
    568c:	2100      	movs	r1, #0
    568e:	f004 ffe5 	bl	a65c <strtol>
	reg_addr = strtol(argv[3], NULL, 16);
    5692:	2210      	movs	r2, #16
	dev_addr = strtol(argv[2], NULL, 16);
    5694:	4607      	mov	r7, r0
	reg_addr = strtol(argv[3], NULL, 16);
    5696:	2100      	movs	r1, #0
    5698:	68e0      	ldr	r0, [r4, #12]
    569a:	f004 ffdf 	bl	a65c <strtol>
	out_byte = strtol(argv[4], NULL, 16);
    569e:	2210      	movs	r2, #16
	reg_addr = strtol(argv[3], NULL, 16);
    56a0:	4680      	mov	r8, r0
	out_byte = strtol(argv[4], NULL, 16);
    56a2:	2100      	movs	r1, #0
    56a4:	6920      	ldr	r0, [r4, #16]
    56a6:	f004 ffd9 	bl	a65c <strtol>
			    uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = (uint8_t *)buf;
	msg.len = num_bytes;
    56aa:	2302      	movs	r3, #2
	if (i2c_reg_write_byte(dev, dev_addr, reg_addr, out_byte) < 0) {
    56ac:	f88d 8000 	strb.w	r8, [sp]
    56b0:	f88d 0001 	strb.w	r0, [sp, #1]
	msg.buf = (uint8_t *)buf;
    56b4:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
    56b8:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    56ba:	f88d 300c 	strb.w	r3, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    56be:	68ab      	ldr	r3, [r5, #8]
    56c0:	2201      	movs	r2, #1
    56c2:	f8d3 8008 	ldr.w	r8, [r3, #8]
    56c6:	a901      	add	r1, sp, #4
    56c8:	b2bb      	uxth	r3, r7
    56ca:	4628      	mov	r0, r5
    56cc:	47c0      	blx	r8
    56ce:	2800      	cmp	r0, #0
    56d0:	da08      	bge.n	56e4 <cmd_i2c_write_byte+0x84>
		shell_error(shell, "Failed to write to device: %s", argv[1]);
    56d2:	4630      	mov	r0, r6
    56d4:	6863      	ldr	r3, [r4, #4]
    56d6:	4a05      	ldr	r2, [pc, #20]	; (56ec <cmd_i2c_write_byte+0x8c>)
    56d8:	2101      	movs	r1, #1
    56da:	f004 f852 	bl	9782 <shell_fprintf>
		return -EIO;
    56de:	f06f 0004 	mvn.w	r0, #4
    56e2:	e7ce      	b.n	5682 <cmd_i2c_write_byte+0x22>
	return 0;
    56e4:	2000      	movs	r0, #0
    56e6:	e7cc      	b.n	5682 <cmd_i2c_write_byte+0x22>
    56e8:	0000d6f9 	.word	0x0000d6f9
    56ec:	0000d796 	.word	0x0000d796

000056f0 <cmd_i2c_read>:
{
    56f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56f4:	4606      	mov	r6, r0
    56f6:	b08d      	sub	sp, #52	; 0x34
	dev = device_get_binding(argv[1]);
    56f8:	6850      	ldr	r0, [r2, #4]
{
    56fa:	460f      	mov	r7, r1
    56fc:	4614      	mov	r4, r2
    56fe:	f001 ff07 	bl	7510 <z_impl_device_get_binding>
	if (!dev) {
    5702:	4680      	mov	r8, r0
    5704:	b950      	cbnz	r0, 571c <cmd_i2c_read+0x2c>
		shell_error(shell, "I2C: Device driver %s not found.", argv[1]);
    5706:	4630      	mov	r0, r6
    5708:	6863      	ldr	r3, [r4, #4]
    570a:	4a29      	ldr	r2, [pc, #164]	; (57b0 <cmd_i2c_read+0xc0>)
    570c:	2101      	movs	r1, #1
    570e:	f004 f838 	bl	9782 <shell_fprintf>
		return -ENODEV;
    5712:	f06f 0012 	mvn.w	r0, #18
}
    5716:	b00d      	add	sp, #52	; 0x34
    5718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dev_addr = strtol(argv[2], NULL, 16);
    571c:	2210      	movs	r2, #16
    571e:	2100      	movs	r1, #0
    5720:	68a0      	ldr	r0, [r4, #8]
    5722:	f004 ff9b 	bl	a65c <strtol>
	reg_addr = strtol(argv[3], NULL, 16);
    5726:	2210      	movs	r2, #16
	dev_addr = strtol(argv[2], NULL, 16);
    5728:	4683      	mov	fp, r0
	reg_addr = strtol(argv[3], NULL, 16);
    572a:	2100      	movs	r1, #0
    572c:	68e0      	ldr	r0, [r4, #12]
    572e:	f004 ff95 	bl	a65c <strtol>
	if (argc > 4) {
    5732:	2f04      	cmp	r7, #4
	reg_addr = strtol(argv[3], NULL, 16);
    5734:	4605      	mov	r5, r0
	if (argc > 4) {
    5736:	d931      	bls.n	579c <cmd_i2c_read+0xac>
		num_bytes = strtol(argv[4], NULL, 16);
    5738:	6920      	ldr	r0, [r4, #16]
    573a:	2210      	movs	r2, #16
    573c:	2100      	movs	r1, #0
    573e:	f004 ff8d 	bl	a65c <strtol>
		if (num_bytes > MAX_I2C_BYTES)
    5742:	2810      	cmp	r0, #16
    5744:	bfa8      	it	ge
    5746:	2010      	movge	r0, #16
    5748:	4607      	mov	r7, r0
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
    574a:	f10d 0307 	add.w	r3, sp, #7
    574e:	9306      	str	r3, [sp, #24]
	msg[0].len = num_write;
	msg[0].flags = I2C_MSG_WRITE;
    5750:	f04f 0300 	mov.w	r3, #0
	msg[0].len = num_write;
    5754:	f04f 0a01 	mov.w	sl, #1
	msg[0].flags = I2C_MSG_WRITE;
    5758:	f88d 3020 	strb.w	r3, [sp, #32]

	msg[1].buf = (uint8_t *)read_buf;
    575c:	f10d 0908 	add.w	r9, sp, #8
	msg[1].len = num_read;
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    5760:	2307      	movs	r3, #7
	msg[1].len = num_read;
    5762:	e9cd 9709 	strd	r9, r7, [sp, #36]	; 0x24
	if (i2c_burst_read(dev, dev_addr, reg_addr, buf, num_bytes) < 0) {
    5766:	f88d 5007 	strb.w	r5, [sp, #7]
	msg[0].len = num_write;
    576a:	f8cd a01c 	str.w	sl, [sp, #28]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    576e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    5772:	f8d8 3008 	ldr.w	r3, [r8, #8]
    5776:	689b      	ldr	r3, [r3, #8]
    5778:	2202      	movs	r2, #2
    577a:	461d      	mov	r5, r3
    577c:	a906      	add	r1, sp, #24
    577e:	fa1f f38b 	uxth.w	r3, fp
    5782:	4640      	mov	r0, r8
    5784:	47a8      	blx	r5
    5786:	2800      	cmp	r0, #0
    5788:	da0a      	bge.n	57a0 <cmd_i2c_read+0xb0>
		shell_error(shell, "Failed to read from device: %s", argv[1]);
    578a:	4630      	mov	r0, r6
    578c:	6863      	ldr	r3, [r4, #4]
    578e:	4a09      	ldr	r2, [pc, #36]	; (57b4 <cmd_i2c_read+0xc4>)
    5790:	4651      	mov	r1, sl
    5792:	f003 fff6 	bl	9782 <shell_fprintf>
		return -EIO;
    5796:	f06f 0004 	mvn.w	r0, #4
    579a:	e7bc      	b.n	5716 <cmd_i2c_read+0x26>
		num_bytes = MAX_I2C_BYTES;
    579c:	2710      	movs	r7, #16
    579e:	e7d4      	b.n	574a <cmd_i2c_read+0x5a>
	shell_hexdump(shell, buf, num_bytes);
    57a0:	4630      	mov	r0, r6
    57a2:	463a      	mov	r2, r7
    57a4:	4649      	mov	r1, r9
    57a6:	f003 fff9 	bl	979c <shell_hexdump>
	return 0;
    57aa:	2000      	movs	r0, #0
    57ac:	e7b3      	b.n	5716 <cmd_i2c_read+0x26>
    57ae:	bf00      	nop
    57b0:	0000d6f9 	.word	0x0000d6f9
    57b4:	0000d7b5 	.word	0x0000d7b5

000057b8 <cmd_i2c_read_byte>:
{
    57b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    57bc:	4606      	mov	r6, r0
    57be:	b088      	sub	sp, #32
	dev = device_get_binding(argv[1]);
    57c0:	6850      	ldr	r0, [r2, #4]
{
    57c2:	4614      	mov	r4, r2
    57c4:	f001 fea4 	bl	7510 <z_impl_device_get_binding>
	if (!dev) {
    57c8:	4607      	mov	r7, r0
    57ca:	b950      	cbnz	r0, 57e2 <cmd_i2c_read_byte+0x2a>
		shell_error(shell, "I2C: Device driver %s not found.",
    57cc:	4630      	mov	r0, r6
    57ce:	6863      	ldr	r3, [r4, #4]
    57d0:	4a21      	ldr	r2, [pc, #132]	; (5858 <cmd_i2c_read_byte+0xa0>)
    57d2:	2101      	movs	r1, #1
    57d4:	f003 ffd5 	bl	9782 <shell_fprintf>
		return -ENODEV;
    57d8:	f06f 0012 	mvn.w	r0, #18
}
    57dc:	b008      	add	sp, #32
    57de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	dev_addr = strtol(argv[2], NULL, 16);
    57e2:	68a0      	ldr	r0, [r4, #8]
    57e4:	2210      	movs	r2, #16
    57e6:	2100      	movs	r1, #0
    57e8:	f004 ff38 	bl	a65c <strtol>
	reg_addr = strtol(argv[3], NULL, 16);
    57ec:	2210      	movs	r2, #16
	dev_addr = strtol(argv[2], NULL, 16);
    57ee:	4681      	mov	r9, r0
	reg_addr = strtol(argv[3], NULL, 16);
    57f0:	2100      	movs	r1, #0
    57f2:	68e0      	ldr	r0, [r4, #12]
    57f4:	f004 ff32 	bl	a65c <strtol>
	msg[0].buf = (uint8_t *)write_buf;
    57f8:	f10d 0307 	add.w	r3, sp, #7
	msg[0].len = num_write;
    57fc:	f04f 0801 	mov.w	r8, #1
	msg[0].buf = (uint8_t *)write_buf;
    5800:	9302      	str	r3, [sp, #8]
	msg[1].buf = (uint8_t *)read_buf;
    5802:	f10d 0306 	add.w	r3, sp, #6
	msg[1].len = num_read;
    5806:	e9cd 3805 	strd	r3, r8, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
    580a:	2500      	movs	r5, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    580c:	2307      	movs	r3, #7
	if (i2c_reg_read_byte(dev, dev_addr, reg_addr, &out) < 0) {
    580e:	f88d 0007 	strb.w	r0, [sp, #7]
	msg[0].len = num_write;
    5812:	f8cd 800c 	str.w	r8, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    5816:	f88d 5010 	strb.w	r5, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    581a:	f88d 301c 	strb.w	r3, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    581e:	68bb      	ldr	r3, [r7, #8]
    5820:	2202      	movs	r2, #2
    5822:	f8d3 a008 	ldr.w	sl, [r3, #8]
    5826:	a902      	add	r1, sp, #8
    5828:	fa1f f389 	uxth.w	r3, r9
    582c:	4638      	mov	r0, r7
    582e:	47d0      	blx	sl
    5830:	42a8      	cmp	r0, r5
    5832:	da08      	bge.n	5846 <cmd_i2c_read_byte+0x8e>
		shell_error(shell, "Failed to read from device: %s", argv[1]);
    5834:	4630      	mov	r0, r6
    5836:	6863      	ldr	r3, [r4, #4]
    5838:	4a08      	ldr	r2, [pc, #32]	; (585c <cmd_i2c_read_byte+0xa4>)
    583a:	4641      	mov	r1, r8
    583c:	f003 ffa1 	bl	9782 <shell_fprintf>
		return -EIO;
    5840:	f06f 0004 	mvn.w	r0, #4
    5844:	e7ca      	b.n	57dc <cmd_i2c_read_byte+0x24>
	shell_print(shell, "Output: 0x%x", out);
    5846:	4630      	mov	r0, r6
    5848:	f89d 3006 	ldrb.w	r3, [sp, #6]
    584c:	4a04      	ldr	r2, [pc, #16]	; (5860 <cmd_i2c_read_byte+0xa8>)
    584e:	2108      	movs	r1, #8
    5850:	f003 ff97 	bl	9782 <shell_fprintf>
	return 0;
    5854:	4628      	mov	r0, r5
    5856:	e7c1      	b.n	57dc <cmd_i2c_read_byte+0x24>
    5858:	0000d6f9 	.word	0x0000d6f9
    585c:	0000d7b5 	.word	0x0000d7b5
    5860:	0000d7d5 	.word	0x0000d7d5

00005864 <cmd_i2c_write>:
{
    5864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5868:	4607      	mov	r7, r0
    586a:	b08f      	sub	sp, #60	; 0x3c
	dev = device_get_binding(argv[1]);
    586c:	6850      	ldr	r0, [r2, #4]
{
    586e:	460c      	mov	r4, r1
    5870:	4615      	mov	r5, r2
    5872:	f001 fe4d 	bl	7510 <z_impl_device_get_binding>
	if (!dev) {
    5876:	4606      	mov	r6, r0
    5878:	b950      	cbnz	r0, 5890 <cmd_i2c_write+0x2c>
		shell_error(shell, "I2C: Device driver %s not found.", argv[1]);
    587a:	4638      	mov	r0, r7
    587c:	686b      	ldr	r3, [r5, #4]
    587e:	4a29      	ldr	r2, [pc, #164]	; (5924 <cmd_i2c_write+0xc0>)
    5880:	2101      	movs	r1, #1
    5882:	f003 ff7e 	bl	9782 <shell_fprintf>
		return -ENODEV;
    5886:	f06f 0012 	mvn.w	r0, #18
}
    588a:	b00f      	add	sp, #60	; 0x3c
    588c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dev_addr = strtol(argv[2], NULL, 16);
    5890:	2210      	movs	r2, #16
    5892:	2100      	movs	r1, #0
    5894:	68a8      	ldr	r0, [r5, #8]
    5896:	f004 fee1 	bl	a65c <strtol>
	reg_addr = strtol(argv[3], NULL, 16);
    589a:	2210      	movs	r2, #16
	dev_addr = strtol(argv[2], NULL, 16);
    589c:	4683      	mov	fp, r0
	reg_addr = strtol(argv[3], NULL, 16);
    589e:	2100      	movs	r1, #0
    58a0:	68e8      	ldr	r0, [r5, #12]
    58a2:	f004 fedb 	bl	a65c <strtol>
	if (num_bytes < 0) {
    58a6:	3c04      	subs	r4, #4
	reg_addr = strtol(argv[3], NULL, 16);
    58a8:	4681      	mov	r9, r0
	if (num_bytes < 0) {
    58aa:	d501      	bpl.n	58b0 <cmd_i2c_write+0x4c>
		return 0;
    58ac:	2000      	movs	r0, #0
    58ae:	e7ec      	b.n	588a <cmd_i2c_write+0x26>
	for (i = 0; i < num_bytes; i++) {
    58b0:	2c10      	cmp	r4, #16
    58b2:	f105 080c 	add.w	r8, r5, #12
    58b6:	bfa8      	it	ge
    58b8:	2410      	movge	r4, #16
    58ba:	f10d 0a10 	add.w	sl, sp, #16
    58be:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    58c2:	4598      	cmp	r8, r3
    58c4:	d123      	bne.n	590e <cmd_i2c_write+0xaa>
				  const uint8_t *buf,
				  uint32_t num_bytes)
{
	struct i2c_msg msg[2];

	msg[0].buf = &start_addr;
    58c6:	f10d 030f 	add.w	r3, sp, #15
    58ca:	9308      	str	r3, [sp, #32]
	msg[0].len = 1U;
	msg[0].flags = I2C_MSG_WRITE;
    58cc:	2300      	movs	r3, #0
	msg[0].len = 1U;
    58ce:	f04f 0801 	mov.w	r8, #1
	msg[0].flags = I2C_MSG_WRITE;
    58d2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28

	msg[1].buf = (uint8_t *)buf;
	msg[1].len = num_bytes;
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    58d6:	2202      	movs	r2, #2
	msg[1].buf = (uint8_t *)buf;
    58d8:	ab04      	add	r3, sp, #16
	msg[1].len = num_bytes;
    58da:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
	if (i2c_burst_write(dev, dev_addr, reg_addr, buf, num_bytes) < 0) {
    58de:	f88d 900f 	strb.w	r9, [sp, #15]
	msg[0].len = 1U;
    58e2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    58e6:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    58ea:	68b3      	ldr	r3, [r6, #8]
    58ec:	a908      	add	r1, sp, #32
    58ee:	689c      	ldr	r4, [r3, #8]
    58f0:	4630      	mov	r0, r6
    58f2:	fa1f f38b 	uxth.w	r3, fp
    58f6:	47a0      	blx	r4
    58f8:	2800      	cmp	r0, #0
    58fa:	dad7      	bge.n	58ac <cmd_i2c_write+0x48>
		shell_error(shell, "Failed to write to device: %s", argv[1]);
    58fc:	4638      	mov	r0, r7
    58fe:	686b      	ldr	r3, [r5, #4]
    5900:	4a09      	ldr	r2, [pc, #36]	; (5928 <cmd_i2c_write+0xc4>)
    5902:	4641      	mov	r1, r8
    5904:	f003 ff3d 	bl	9782 <shell_fprintf>
		return -EIO;
    5908:	f06f 0004 	mvn.w	r0, #4
    590c:	e7bd      	b.n	588a <cmd_i2c_write+0x26>
		buf[i] = (uint8_t)strtol(argv[4 + i], NULL, 16);
    590e:	f858 0f04 	ldr.w	r0, [r8, #4]!
    5912:	9301      	str	r3, [sp, #4]
    5914:	2210      	movs	r2, #16
    5916:	2100      	movs	r1, #0
    5918:	f004 fea0 	bl	a65c <strtol>
    591c:	9b01      	ldr	r3, [sp, #4]
    591e:	f80a 0b01 	strb.w	r0, [sl], #1
    5922:	e7ce      	b.n	58c2 <cmd_i2c_write+0x5e>
    5924:	0000d6f9 	.word	0x0000d6f9
    5928:	0000d796 	.word	0x0000d796

0000592c <bme280_channel_get>:
			      enum sensor_channel chan,
			      struct sensor_value *val)
{
	struct bme280_data *data = to_data(dev);

	switch (chan) {
    592c:	290e      	cmp	r1, #14
{
    592e:	b510      	push	{r4, lr}
	struct bme280_data *data = to_data(dev);
    5930:	6903      	ldr	r3, [r0, #16]
	switch (chan) {
    5932:	d010      	beq.n	5956 <bme280_channel_get+0x2a>
    5934:	2910      	cmp	r1, #16
    5936:	d01d      	beq.n	5974 <bme280_channel_get+0x48>
    5938:	290d      	cmp	r1, #13
    593a:	d124      	bne.n	5986 <bme280_channel_get+0x5a>
	case SENSOR_CHAN_AMBIENT_TEMP:
		/*
		 * data->comp_temp has a resolution of 0.01 degC.  So
		 * 5123 equals 51.23 degC.
		 */
		val->val1 = data->comp_temp / 100;
    593c:	6a58      	ldr	r0, [r3, #36]	; 0x24
    593e:	2164      	movs	r1, #100	; 0x64
    5940:	fb90 f3f1 	sdiv	r3, r0, r1
    5944:	6013      	str	r3, [r2, #0]
		val->val2 = data->comp_temp % 100 * 10000;
    5946:	fb01 0313 	mls	r3, r1, r3, r0
    594a:	f242 7110 	movw	r1, #10000	; 0x2710
    594e:	434b      	muls	r3, r1
		 * data->comp_humidity has 22 integer bits and 10
		 * fractional.  Output value of 47445 represents
		 * 47445/1024 = 46.333 %RH
		 */
		val->val1 = (data->comp_humidity >> 10);
		val->val2 = (((data->comp_humidity & 0x3ff) * 1000U * 1000U) >> 10);
    5950:	6053      	str	r3, [r2, #4]
		break;
	default:
		return -EINVAL;
	}

	return 0;
    5952:	2000      	movs	r0, #0
}
    5954:	bd10      	pop	{r4, pc}
		val->val1 = (data->comp_press >> 8) / 1000U;
    5956:	6a99      	ldr	r1, [r3, #40]	; 0x28
    5958:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    595c:	0a0c      	lsrs	r4, r1, #8
			(((data->comp_press & 0xff) * 1000U) >> 8);
    595e:	b2c9      	uxtb	r1, r1
		val->val1 = (data->comp_press >> 8) / 1000U;
    5960:	fbb4 f0f3 	udiv	r0, r4, r3
    5964:	6010      	str	r0, [r2, #0]
		val->val2 = (data->comp_press >> 8) % 1000 * 1000U +
    5966:	fb03 4010 	mls	r0, r3, r0, r4
			(((data->comp_press & 0xff) * 1000U) >> 8);
    596a:	4359      	muls	r1, r3
		val->val2 = (data->comp_press >> 8) % 1000 * 1000U +
    596c:	4343      	muls	r3, r0
    596e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
    5972:	e7ed      	b.n	5950 <bme280_channel_get+0x24>
		val->val1 = (data->comp_humidity >> 10);
    5974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5976:	0a99      	lsrs	r1, r3, #10
    5978:	6011      	str	r1, [r2, #0]
		val->val2 = (((data->comp_humidity & 0x3ff) * 1000U * 1000U) >> 10);
    597a:	f3c3 0109 	ubfx	r1, r3, #0, #10
    597e:	4b03      	ldr	r3, [pc, #12]	; (598c <bme280_channel_get+0x60>)
    5980:	434b      	muls	r3, r1
    5982:	0a9b      	lsrs	r3, r3, #10
    5984:	e7e4      	b.n	5950 <bme280_channel_get+0x24>
	switch (chan) {
    5986:	f06f 0015 	mvn.w	r0, #21
    598a:	e7e3      	b.n	5954 <bme280_channel_get+0x28>
    598c:	000f4240 	.word	0x000f4240

00005990 <channel_name_get>:

static void channel_name_get(size_t idx, struct shell_static_entry *entry)
{
	int cnt = 0;

	entry->syntax = NULL;
    5990:	2300      	movs	r3, #0
	entry->handler = NULL;
	entry->help  = NULL;
	entry->subcmd = &dsub_channel_name;
    5992:	4a0a      	ldr	r2, [pc, #40]	; (59bc <channel_name_get+0x2c>)
    5994:	608a      	str	r2, [r1, #8]
{
    5996:	b530      	push	{r4, r5, lr}
    5998:	4c09      	ldr	r4, [pc, #36]	; (59c0 <channel_name_get+0x30>)
	entry->syntax = NULL;
    599a:	600b      	str	r3, [r1, #0]
	entry->handler = NULL;
    599c:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    599e:	604b      	str	r3, [r1, #4]
	int cnt = 0;
    59a0:	461a      	mov	r2, r3

	for (int i = 0; i < SENSOR_CHAN_ALL; i++) {
		if (sensor_channel_name[i] != NULL) {
    59a2:	f854 5b04 	ldr.w	r5, [r4], #4
    59a6:	b125      	cbz	r5, 59b2 <channel_name_get+0x22>
			if (cnt == idx) {
    59a8:	4282      	cmp	r2, r0
    59aa:	d101      	bne.n	59b0 <channel_name_get+0x20>
				entry->syntax = sensor_channel_name[i];
    59ac:	600d      	str	r5, [r1, #0]
				break;
			}
			cnt++;
		}
	}
}
    59ae:	bd30      	pop	{r4, r5, pc}
			cnt++;
    59b0:	3201      	adds	r2, #1
	for (int i = 0; i < SENSOR_CHAN_ALL; i++) {
    59b2:	3301      	adds	r3, #1
    59b4:	2b39      	cmp	r3, #57	; 0x39
    59b6:	d1f4      	bne.n	59a2 <channel_name_get+0x12>
    59b8:	e7f9      	b.n	59ae <channel_name_get+0x1e>
    59ba:	bf00      	nop
    59bc:	0000c4fc 	.word	0x0000c4fc
    59c0:	200000e0 	.word	0x200000e0

000059c4 <device_name_get>:
static void device_name_get(size_t idx, struct shell_static_entry *entry);

SHELL_DYNAMIC_CMD_CREATE(dsub_device_name, device_name_get);

static void device_name_get(size_t idx, struct shell_static_entry *entry)
{
    59c4:	b510      	push	{r4, lr}
    59c6:	460c      	mov	r4, r1
	const struct device *dev = shell_device_lookup(idx, NULL);
    59c8:	2100      	movs	r1, #0
    59ca:	f004 fcc9 	bl	a360 <shell_device_lookup>

	entry->syntax = (dev != NULL) ? dev->name : NULL;
    59ce:	b100      	cbz	r0, 59d2 <device_name_get+0xe>
    59d0:	6800      	ldr	r0, [r0, #0]
    59d2:	6020      	str	r0, [r4, #0]
	entry->handler = NULL;
    59d4:	2300      	movs	r3, #0
    59d6:	60e3      	str	r3, [r4, #12]
	entry->help  = NULL;
    59d8:	6063      	str	r3, [r4, #4]
	entry->subcmd = &dsub_channel_name;
    59da:	4b01      	ldr	r3, [pc, #4]	; (59e0 <device_name_get+0x1c>)
    59dc:	60a3      	str	r3, [r4, #8]
}
    59de:	bd10      	pop	{r4, pc}
    59e0:	0000c4fc 	.word	0x0000c4fc

000059e4 <cmd_get_sensor>:
{
    59e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    59e8:	4604      	mov	r4, r0
    59ea:	4688      	mov	r8, r1
	dev = device_get_binding(argv[1]);
    59ec:	6850      	ldr	r0, [r2, #4]
{
    59ee:	4616      	mov	r6, r2
    59f0:	f001 fd8e 	bl	7510 <z_impl_device_get_binding>
	if (dev == NULL) {
    59f4:	4605      	mov	r5, r0
    59f6:	b948      	cbnz	r0, 5a0c <cmd_get_sensor+0x28>
		shell_error(shell, "Device unknown (%s)", argv[1]);
    59f8:	4620      	mov	r0, r4
    59fa:	6873      	ldr	r3, [r6, #4]
    59fc:	4a1d      	ldr	r2, [pc, #116]	; (5a74 <cmd_get_sensor+0x90>)
    59fe:	2101      	movs	r1, #1
    5a00:	f003 febf 	bl	9782 <shell_fprintf>
		return -ENODEV;
    5a04:	f06f 0012 	mvn.w	r0, #18
}
    5a08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    5a0c:	6883      	ldr	r3, [r0, #8]
    5a0e:	2139      	movs	r1, #57	; 0x39
    5a10:	68db      	ldr	r3, [r3, #12]
    5a12:	4798      	blx	r3
	if (err < 0) {
    5a14:	1e03      	subs	r3, r0, #0
    5a16:	da04      	bge.n	5a22 <cmd_get_sensor+0x3e>
		shell_error(shell, "Failed to read sensor: %d", err);
    5a18:	4a17      	ldr	r2, [pc, #92]	; (5a78 <cmd_get_sensor+0x94>)
    5a1a:	2101      	movs	r1, #1
    5a1c:	4620      	mov	r0, r4
    5a1e:	f003 feb0 	bl	9782 <shell_fprintf>
	if (argc == 2) {
    5a22:	f1b8 0f02 	cmp.w	r8, #2
    5a26:	d120      	bne.n	5a6a <cmd_get_sensor+0x86>
    5a28:	4f14      	ldr	r7, [pc, #80]	; (5a7c <cmd_get_sensor+0x98>)
		for (int i = 0; i < ARRAY_SIZE(sensor_channel_name); i++) {
    5a2a:	2600      	movs	r6, #0
			if (sensor_channel_name[i]) {
    5a2c:	f857 2b04 	ldr.w	r2, [r7], #4
    5a30:	b11a      	cbz	r2, 5a3a <cmd_get_sensor+0x56>
				handle_channel_by_name(shell, dev,
    5a32:	4629      	mov	r1, r5
    5a34:	4620      	mov	r0, r4
    5a36:	f7fb f8fb 	bl	c30 <handle_channel_by_name>
		for (int i = 0; i < ARRAY_SIZE(sensor_channel_name); i++) {
    5a3a:	3601      	adds	r6, #1
    5a3c:	2e39      	cmp	r6, #57	; 0x39
    5a3e:	d1f5      	bne.n	5a2c <cmd_get_sensor+0x48>
	return 0;
    5a40:	2000      	movs	r0, #0
    5a42:	e7e1      	b.n	5a08 <cmd_get_sensor+0x24>
			err = handle_channel_by_name(shell, dev, argv[i]);
    5a44:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
    5a48:	4629      	mov	r1, r5
    5a4a:	4620      	mov	r0, r4
    5a4c:	f7fb f8f0 	bl	c30 <handle_channel_by_name>
			if (err < 0) {
    5a50:	2800      	cmp	r0, #0
    5a52:	da06      	bge.n	5a62 <cmd_get_sensor+0x7e>
				shell_error(shell,
    5a54:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
    5a58:	464a      	mov	r2, r9
    5a5a:	2101      	movs	r1, #1
    5a5c:	4620      	mov	r0, r4
    5a5e:	f003 fe90 	bl	9782 <shell_fprintf>
		for (int i = 2; i < argc; i++) {
    5a62:	3701      	adds	r7, #1
    5a64:	45b8      	cmp	r8, r7
    5a66:	d8ed      	bhi.n	5a44 <cmd_get_sensor+0x60>
    5a68:	e7ea      	b.n	5a40 <cmd_get_sensor+0x5c>
				shell_error(shell,
    5a6a:	f8df 9014 	ldr.w	r9, [pc, #20]	; 5a80 <cmd_get_sensor+0x9c>
		for (int i = 2; i < argc; i++) {
    5a6e:	2702      	movs	r7, #2
    5a70:	e7f8      	b.n	5a64 <cmd_get_sensor+0x80>
    5a72:	bf00      	nop
    5a74:	0000d94c 	.word	0x0000d94c
    5a78:	0000d961 	.word	0x0000d961
    5a7c:	200000e0 	.word	0x200000e0
    5a80:	0000d97c 	.word	0x0000d97c

00005a84 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    5a84:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    5a86:	794b      	ldrb	r3, [r1, #5]
    5a88:	2b01      	cmp	r3, #1
    5a8a:	d026      	beq.n	5ada <uarte_nrfx_configure+0x56>
    5a8c:	2b03      	cmp	r3, #3
    5a8e:	d121      	bne.n	5ad4 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    5a90:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    5a92:	798b      	ldrb	r3, [r1, #6]
    5a94:	2b03      	cmp	r3, #3
    5a96:	d11d      	bne.n	5ad4 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    5a98:	79cc      	ldrb	r4, [r1, #7]
    5a9a:	b10c      	cbz	r4, 5aa0 <uarte_nrfx_configure+0x1c>
    5a9c:	2c01      	cmp	r4, #1
    5a9e:	d119      	bne.n	5ad4 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    5aa0:	790a      	ldrb	r2, [r1, #4]
    5aa2:	b112      	cbz	r2, 5aaa <uarte_nrfx_configure+0x26>
    5aa4:	2a02      	cmp	r2, #2
    5aa6:	d115      	bne.n	5ad4 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    5aa8:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    5aaa:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    5aac:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    5aae:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    5ab2:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    5ab4:	d065      	beq.n	5b82 <uarte_nrfx_configure+0xfe>
    5ab6:	d82d      	bhi.n	5b14 <uarte_nrfx_configure+0x90>
    5ab8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    5abc:	d064      	beq.n	5b88 <uarte_nrfx_configure+0x104>
    5abe:	d816      	bhi.n	5aee <uarte_nrfx_configure+0x6a>
    5ac0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    5ac4:	d062      	beq.n	5b8c <uarte_nrfx_configure+0x108>
    5ac6:	d80a      	bhi.n	5ade <uarte_nrfx_configure+0x5a>
    5ac8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    5acc:	d061      	beq.n	5b92 <uarte_nrfx_configure+0x10e>
    5ace:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    5ad2:	d061      	beq.n	5b98 <uarte_nrfx_configure+0x114>
    5ad4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5ad8:	e052      	b.n	5b80 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    5ada:	2600      	movs	r6, #0
    5adc:	e7d9      	b.n	5a92 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    5ade:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    5ae2:	d05c      	beq.n	5b9e <uarte_nrfx_configure+0x11a>
    5ae4:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    5ae8:	d1f4      	bne.n	5ad4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    5aea:	4b37      	ldr	r3, [pc, #220]	; (5bc8 <uarte_nrfx_configure+0x144>)
    5aec:	e03c      	b.n	5b68 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5aee:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    5af2:	d057      	beq.n	5ba4 <uarte_nrfx_configure+0x120>
    5af4:	d807      	bhi.n	5b06 <uarte_nrfx_configure+0x82>
    5af6:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    5afa:	d055      	beq.n	5ba8 <uarte_nrfx_configure+0x124>
    5afc:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    5b00:	d1e8      	bne.n	5ad4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    5b02:	4b32      	ldr	r3, [pc, #200]	; (5bcc <uarte_nrfx_configure+0x148>)
    5b04:	e030      	b.n	5b68 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5b06:	f647 2712 	movw	r7, #31250	; 0x7a12
    5b0a:	42bb      	cmp	r3, r7
    5b0c:	d1e2      	bne.n	5ad4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    5b0e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    5b12:	e029      	b.n	5b68 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5b14:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    5b18:	d048      	beq.n	5bac <uarte_nrfx_configure+0x128>
    5b1a:	d813      	bhi.n	5b44 <uarte_nrfx_configure+0xc0>
    5b1c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    5b20:	d047      	beq.n	5bb2 <uarte_nrfx_configure+0x12e>
    5b22:	d809      	bhi.n	5b38 <uarte_nrfx_configure+0xb4>
    5b24:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    5b28:	42bb      	cmp	r3, r7
    5b2a:	d044      	beq.n	5bb6 <uarte_nrfx_configure+0x132>
    5b2c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    5b30:	d1d0      	bne.n	5ad4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    5b32:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    5b36:	e017      	b.n	5b68 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5b38:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    5b3c:	d1ca      	bne.n	5ad4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    5b3e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    5b42:	e011      	b.n	5b68 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5b44:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    5b48:	d038      	beq.n	5bbc <uarte_nrfx_configure+0x138>
    5b4a:	d808      	bhi.n	5b5e <uarte_nrfx_configure+0xda>
    5b4c:	4f20      	ldr	r7, [pc, #128]	; (5bd0 <uarte_nrfx_configure+0x14c>)
    5b4e:	42bb      	cmp	r3, r7
    5b50:	d037      	beq.n	5bc2 <uarte_nrfx_configure+0x13e>
    5b52:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    5b56:	d1bd      	bne.n	5ad4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    5b58:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    5b5c:	e004      	b.n	5b68 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5b5e:	4f1d      	ldr	r7, [pc, #116]	; (5bd4 <uarte_nrfx_configure+0x150>)
    5b60:	42bb      	cmp	r3, r7
    5b62:	d1b7      	bne.n	5ad4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    5b64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    5b68:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    5b6c:	6903      	ldr	r3, [r0, #16]
    5b6e:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    5b70:	4334      	orrs	r4, r6
    5b72:	4322      	orrs	r2, r4
    5b74:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5b76:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    5b7a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    5b7e:	2000      	movs	r0, #0
}
    5b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    5b82:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    5b86:	e7ef      	b.n	5b68 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    5b88:	4b13      	ldr	r3, [pc, #76]	; (5bd8 <uarte_nrfx_configure+0x154>)
    5b8a:	e7ed      	b.n	5b68 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    5b8c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    5b90:	e7ea      	b.n	5b68 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    5b92:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    5b96:	e7e7      	b.n	5b68 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5b98:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    5b9c:	e7e4      	b.n	5b68 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    5b9e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    5ba2:	e7e1      	b.n	5b68 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    5ba4:	4b0d      	ldr	r3, [pc, #52]	; (5bdc <uarte_nrfx_configure+0x158>)
    5ba6:	e7df      	b.n	5b68 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    5ba8:	4b0d      	ldr	r3, [pc, #52]	; (5be0 <uarte_nrfx_configure+0x15c>)
    5baa:	e7dd      	b.n	5b68 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    5bac:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    5bb0:	e7da      	b.n	5b68 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    5bb2:	4b0c      	ldr	r3, [pc, #48]	; (5be4 <uarte_nrfx_configure+0x160>)
    5bb4:	e7d8      	b.n	5b68 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    5bb6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    5bba:	e7d5      	b.n	5b68 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    5bbc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    5bc0:	e7d2      	b.n	5b68 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    5bc2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5bc6:	e7cf      	b.n	5b68 <uarte_nrfx_configure+0xe4>
    5bc8:	0013b000 	.word	0x0013b000
    5bcc:	004ea000 	.word	0x004ea000
    5bd0:	0003d090 	.word	0x0003d090
    5bd4:	000f4240 	.word	0x000f4240
    5bd8:	00275000 	.word	0x00275000
    5bdc:	0075c000 	.word	0x0075c000
    5be0:	003af000 	.word	0x003af000
    5be4:	013a9000 	.word	0x013a9000

00005be8 <nrf_gpio_cfg_input>:
    *p_pin = pin_number & 0x1F;
    5be8:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    5bec:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5bee:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    5bf0:	4b04      	ldr	r3, [pc, #16]	; (5c04 <nrf_gpio_cfg_input+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
    5bf2:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    5bf6:	bf18      	it	ne
    5bf8:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5bfc:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    5bfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5c02:	4770      	bx	lr
    5c04:	50000300 	.word	0x50000300

00005c08 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    5c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    5c0a:	6906      	ldr	r6, [r0, #16]
{
    5c0c:	4605      	mov	r5, r0
    5c0e:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5c10:	f005 feb9 	bl	b986 <k_is_in_isr>
    5c14:	b910      	cbnz	r0, 5c1c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    5c16:	4b20      	ldr	r3, [pc, #128]	; (5c98 <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
    5c18:	781b      	ldrb	r3, [r3, #0]
    5c1a:	b983      	cbnz	r3, 5c3e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    5c1c:	f04f 0320 	mov.w	r3, #32
    5c20:	f3ef 8411 	mrs	r4, BASEPRI
    5c24:	f383 8812 	msr	BASEPRI_MAX, r3
    5c28:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    5c2c:	4628      	mov	r0, r5
    5c2e:	f005 f9f3 	bl	b018 <is_tx_ready>
    5c32:	bb28      	cbnz	r0, 5c80 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    5c34:	f384 8811 	msr	BASEPRI, r4
    5c38:	f3bf 8f6f 	isb	sy
}
    5c3c:	e7ee      	b.n	5c1c <uarte_nrfx_poll_out+0x14>
{
    5c3e:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    5c40:	4628      	mov	r0, r5
    5c42:	f005 f9e9 	bl	b018 <is_tx_ready>
    5c46:	b970      	cbnz	r0, 5c66 <uarte_nrfx_poll_out+0x5e>
    5c48:	2001      	movs	r0, #1
    5c4a:	f005 fb2c 	bl	b2a6 <nrfx_busy_wait>
    5c4e:	3c01      	subs	r4, #1
    5c50:	d1f6      	bne.n	5c40 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    5c52:	2100      	movs	r1, #0
    5c54:	2021      	movs	r0, #33	; 0x21
    5c56:	f002 f9f5 	bl	8044 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    5c5a:	e7f0      	b.n	5c3e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    5c5c:	f384 8811 	msr	BASEPRI, r4
    5c60:	f3bf 8f6f 	isb	sy
}
    5c64:	e7f5      	b.n	5c52 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    5c66:	f04f 0320 	mov.w	r3, #32
    5c6a:	f3ef 8411 	mrs	r4, BASEPRI
    5c6e:	f383 8812 	msr	BASEPRI_MAX, r3
    5c72:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    5c76:	4628      	mov	r0, r5
    5c78:	f005 f9ce 	bl	b018 <is_tx_ready>
    5c7c:	2800      	cmp	r0, #0
    5c7e:	d0ed      	beq.n	5c5c <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    5c80:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    5c82:	2201      	movs	r2, #1
	data->char_out = c;
    5c84:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    5c88:	4628      	mov	r0, r5
    5c8a:	f005 fa58 	bl	b13e <tx_start>
	__asm__ volatile(
    5c8e:	f384 8811 	msr	BASEPRI, r4
    5c92:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    5c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c98:	2000170c 	.word	0x2000170c

00005c9c <nrf_gpio_cfg_output>:
    *p_pin = pin_number & 0x1F;
    5c9c:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    5ca0:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5ca2:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    5ca4:	4b04      	ldr	r3, [pc, #16]	; (5cb8 <nrf_gpio_cfg_output+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
    5ca6:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    5caa:	bf18      	it	ne
    5cac:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    5cb0:	2103      	movs	r1, #3
    5cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5cb6:	4770      	bx	lr
    5cb8:	50000300 	.word	0x50000300

00005cbc <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    5cbc:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    5cc0:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5cc2:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    5cc4:	4b04      	ldr	r3, [pc, #16]	; (5cd8 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5cc6:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    5cca:	bf18      	it	ne
    5ccc:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5cd0:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    5cd2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    5cd6:	4770      	bx	lr
    5cd8:	50000300 	.word	0x50000300

00005cdc <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    5cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    5ce0:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    5ce4:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
    5ce6:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5cea:	2300      	movs	r3, #0
    5cec:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    5cf0:	6038      	str	r0, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    5cf2:	6845      	ldr	r5, [r0, #4]
static int uarte_instance_init(const struct device *dev,
    5cf4:	4606      	mov	r6, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    5cf6:	68e8      	ldr	r0, [r5, #12]
    5cf8:	1c42      	adds	r2, r0, #1
    5cfa:	d004      	beq.n	5d06 <uarte_instance_init.isra.0+0x2a>
        nrf_gpio_pin_set(pin_number);
    5cfc:	f7ff ffde 	bl	5cbc <nrf_gpio_pin_set>
			nrf_gpio_cfg_output(cfg->tx_pin);
    5d00:	68e8      	ldr	r0, [r5, #12]
    5d02:	f7ff ffcb 	bl	5c9c <nrf_gpio_cfg_output>
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    5d06:	6928      	ldr	r0, [r5, #16]
    5d08:	1c43      	adds	r3, r0, #1
    5d0a:	d006      	beq.n	5d1a <uarte_instance_init.isra.0+0x3e>
			nrf_gpio_cfg_input(cfg->rx_pin,
    5d0c:	7f2b      	ldrb	r3, [r5, #28]
    5d0e:	2b00      	cmp	r3, #0
    5d10:	bf14      	ite	ne
    5d12:	2103      	movne	r1, #3
    5d14:	2100      	moveq	r1, #0
    5d16:	f7ff ff67 	bl	5be8 <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    5d1a:	6968      	ldr	r0, [r5, #20]
    5d1c:	1c42      	adds	r2, r0, #1
    5d1e:	d004      	beq.n	5d2a <uarte_instance_init.isra.0+0x4e>
    5d20:	f7ff ffcc 	bl	5cbc <nrf_gpio_pin_set>
			nrf_gpio_cfg_output(cfg->rts_pin);
    5d24:	6968      	ldr	r0, [r5, #20]
    5d26:	f7ff ffb9 	bl	5c9c <nrf_gpio_cfg_output>
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    5d2a:	69a8      	ldr	r0, [r5, #24]
    5d2c:	1c43      	adds	r3, r0, #1
    5d2e:	d006      	beq.n	5d3e <uarte_instance_init.isra.0+0x62>
			nrf_gpio_cfg_input(cfg->cts_pin,
    5d30:	7f6b      	ldrb	r3, [r5, #29]
    5d32:	2b00      	cmp	r3, #0
    5d34:	bf14      	ite	ne
    5d36:	2103      	movne	r1, #3
    5d38:	2100      	moveq	r1, #0
    5d3a:	f7ff ff55 	bl	5be8 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    5d3e:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    5d42:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    5d44:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    5d48:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    5d4c:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    5d50:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    5d54:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
    5d56:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    5d5a:	3104      	adds	r1, #4
    5d5c:	4630      	mov	r0, r6
    5d5e:	f7ff fe91 	bl	5a84 <uarte_nrfx_configure>
	if (err) {
    5d62:	4605      	mov	r5, r0
    5d64:	2800      	cmp	r0, #0
    5d66:	d146      	bne.n	5df6 <uarte_instance_init.isra.0+0x11a>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    5d68:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    5d6c:	0799      	lsls	r1, r3, #30
    5d6e:	d519      	bpl.n	5da4 <uarte_instance_init.isra.0+0xc8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    5d70:	f107 0016 	add.w	r0, r7, #22
    5d74:	f000 fee2 	bl	6b3c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    5d78:	4b22      	ldr	r3, [pc, #136]	; (5e04 <uarte_instance_init.isra.0+0x128>)
    5d7a:	4298      	cmp	r0, r3
    5d7c:	d13e      	bne.n	5dfc <uarte_instance_init.isra.0+0x120>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    5d7e:	7db8      	ldrb	r0, [r7, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    5d80:	00c3      	lsls	r3, r0, #3
    5d82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5d86:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    5d8a:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    5d8e:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    5d92:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    5d96:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    5d9a:	4a1b      	ldr	r2, [pc, #108]	; (5e08 <uarte_instance_init.isra.0+0x12c>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    5d9c:	2301      	movs	r3, #1
    5d9e:	4083      	lsls	r3, r0
    5da0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5da4:	2308      	movs	r3, #8
    5da6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    5daa:	f898 3008 	ldrb.w	r3, [r8, #8]
    5dae:	b95b      	cbnz	r3, 5dc8 <uarte_instance_init.isra.0+0xec>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5db0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    5db4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    5db8:	f107 0315 	add.w	r3, r7, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5dbc:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5dc0:	2301      	movs	r3, #1
    5dc2:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5dc6:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    5dc8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    5dcc:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    5dce:	bf5c      	itt	pl
    5dd0:	f44f 7280 	movpl.w	r2, #256	; 0x100
    5dd4:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5dd8:	06db      	lsls	r3, r3, #27
    5dda:	bf44      	itt	mi
    5ddc:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    5de0:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    5de4:	3714      	adds	r7, #20
    p_reg->TXD.MAXCNT = length;
    5de6:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5de8:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5dec:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5df0:	2301      	movs	r3, #1
    5df2:	60a3      	str	r3, [r4, #8]
    5df4:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    5df6:	4628      	mov	r0, r5
    5df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
    5dfc:	f06f 0504 	mvn.w	r5, #4
    5e00:	e7f9      	b.n	5df6 <uarte_instance_init.isra.0+0x11a>
    5e02:	bf00      	nop
    5e04:	0bad0000 	.word	0x0bad0000
    5e08:	4001f000 	.word	0x4001f000

00005e0c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5e0c:	4919      	ldr	r1, [pc, #100]	; (5e74 <sys_clock_timeout_handler+0x68>)
{
    5e0e:	b570      	push	{r4, r5, r6, lr}
    5e10:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    5e12:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5e16:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    5e18:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    5e1c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5e20:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    5e22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    5e26:	f04f 0500 	mov.w	r5, #0
    5e2a:	d20a      	bcs.n	5e42 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    5e2c:	4b12      	ldr	r3, [pc, #72]	; (5e78 <sys_clock_timeout_handler+0x6c>)
    5e2e:	6819      	ldr	r1, [r3, #0]
    5e30:	060a      	lsls	r2, r1, #24
    5e32:	0a0b      	lsrs	r3, r1, #8
    5e34:	1992      	adds	r2, r2, r6
    5e36:	4911      	ldr	r1, [pc, #68]	; (5e7c <sys_clock_timeout_handler+0x70>)
    5e38:	f143 0300 	adc.w	r3, r3, #0
    5e3c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    5e40:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    5e42:	f002 fc4d 	bl	86e0 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    5e46:	00a3      	lsls	r3, r4, #2
    5e48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5e4c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    5e50:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    5e54:	42b2      	cmp	r2, r6
    5e56:	d10b      	bne.n	5e70 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    5e58:	b91d      	cbnz	r5, 5e62 <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    5e5a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    5e5e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    5e62:	4b07      	ldr	r3, [pc, #28]	; (5e80 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5e64:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    5e68:	fa00 f404 	lsl.w	r4, r0, r4
    5e6c:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    5e70:	bd70      	pop	{r4, r5, r6, pc}
    5e72:	bf00      	nop
    5e74:	20000460 	.word	0x20000460
    5e78:	20001144 	.word	0x20001144
    5e7c:	20000448 	.word	0x20000448
    5e80:	40011000 	.word	0x40011000

00005e84 <compare_int_lock>:
{
    5e84:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    5e86:	2301      	movs	r3, #1
    5e88:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5e8a:	4a11      	ldr	r2, [pc, #68]	; (5ed0 <compare_int_lock+0x4c>)
    5e8c:	f3bf 8f5b 	dmb	ish
    5e90:	43dc      	mvns	r4, r3
    5e92:	e852 1f00 	ldrex	r1, [r2]
    5e96:	ea01 0c04 	and.w	ip, r1, r4
    5e9a:	e842 ce00 	strex	lr, ip, [r2]
    5e9e:	f1be 0f00 	cmp.w	lr, #0
    5ea2:	d1f6      	bne.n	5e92 <compare_int_lock+0xe>
    5ea4:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5ea8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5eac:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    5eb0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5eb4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    5eb8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    5ebc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5ec0:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    5ec4:	420b      	tst	r3, r1
}
    5ec6:	bf14      	ite	ne
    5ec8:	2001      	movne	r0, #1
    5eca:	2000      	moveq	r0, #0
    5ecc:	bd10      	pop	{r4, pc}
    5ece:	bf00      	nop
    5ed0:	20001140 	.word	0x20001140

00005ed4 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    5ed4:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5ed6:	4a12      	ldr	r2, [pc, #72]	; (5f20 <compare_int_unlock.part.0+0x4c>)
    5ed8:	f3bf 8f5b 	dmb	ish
    5edc:	4083      	lsls	r3, r0
    5ede:	e852 1f00 	ldrex	r1, [r2]
    5ee2:	4319      	orrs	r1, r3
    5ee4:	e842 1c00 	strex	ip, r1, [r2]
    5ee8:	f1bc 0f00 	cmp.w	ip, #0
    5eec:	d1f7      	bne.n	5ede <compare_int_unlock.part.0+0xa>
    5eee:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    5ef2:	4a0c      	ldr	r2, [pc, #48]	; (5f24 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5ef4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5ef8:	4083      	lsls	r3, r0
    5efa:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5efe:	4b0a      	ldr	r3, [pc, #40]	; (5f28 <compare_int_unlock.part.0+0x54>)
    5f00:	f3bf 8f5b 	dmb	ish
    5f04:	681b      	ldr	r3, [r3, #0]
    5f06:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    5f0a:	fa23 f000 	lsr.w	r0, r3, r0
    5f0e:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5f10:	bf42      	ittt	mi
    5f12:	4b06      	ldrmi	r3, [pc, #24]	; (5f2c <compare_int_unlock.part.0+0x58>)
    5f14:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    5f18:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    5f1c:	4770      	bx	lr
    5f1e:	bf00      	nop
    5f20:	20001140 	.word	0x20001140
    5f24:	40011000 	.word	0x40011000
    5f28:	2000113c 	.word	0x2000113c
    5f2c:	e000e100 	.word	0xe000e100

00005f30 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    5f30:	4b0d      	ldr	r3, [pc, #52]	; (5f68 <z_nrf_rtc_timer_read+0x38>)
    5f32:	681b      	ldr	r3, [r3, #0]
    5f34:	0a19      	lsrs	r1, r3, #8
    5f36:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    5f38:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    5f3c:	4b0b      	ldr	r3, [pc, #44]	; (5f6c <z_nrf_rtc_timer_read+0x3c>)
    5f3e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    5f42:	18c0      	adds	r0, r0, r3
    5f44:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    5f48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    5f4c:	d20a      	bcs.n	5f64 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    5f4e:	4b08      	ldr	r3, [pc, #32]	; (5f70 <z_nrf_rtc_timer_read+0x40>)
    5f50:	e9d3 2300 	ldrd	r2, r3, [r3]
    5f54:	4299      	cmp	r1, r3
    5f56:	bf08      	it	eq
    5f58:	4290      	cmpeq	r0, r2
    5f5a:	d203      	bcs.n	5f64 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    5f5c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    5f60:	f141 0100 	adc.w	r1, r1, #0
}
    5f64:	4770      	bx	lr
    5f66:	bf00      	nop
    5f68:	20001144 	.word	0x20001144
    5f6c:	40011000 	.word	0x40011000
    5f70:	20000448 	.word	0x20000448

00005f74 <compare_set>:
{
    5f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f78:	b085      	sub	sp, #20
    5f7a:	4616      	mov	r6, r2
    5f7c:	461f      	mov	r7, r3
    5f7e:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    5f80:	f7ff ff80 	bl	5e84 <compare_int_lock>
    5f84:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    5f86:	f7ff ffd3 	bl	5f30 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    5f8a:	42b9      	cmp	r1, r7
    5f8c:	bf08      	it	eq
    5f8e:	42b0      	cmpeq	r0, r6
    5f90:	d27f      	bcs.n	6092 <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    5f92:	ebb6 0800 	subs.w	r8, r6, r0
    5f96:	eb67 0901 	sbc.w	r9, r7, r1
    5f9a:	2300      	movs	r3, #0
    5f9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5fa0:	454b      	cmp	r3, r9
    5fa2:	bf08      	it	eq
    5fa4:	4542      	cmpeq	r2, r8
    5fa6:	f0c0 8085 	bcc.w	60b4 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
    5faa:	4b44      	ldr	r3, [pc, #272]	; (60bc <compare_set+0x148>)
    5fac:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    5fb0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    5fb4:	429f      	cmp	r7, r3
    5fb6:	bf08      	it	eq
    5fb8:	4296      	cmpeq	r6, r2
    5fba:	d054      	beq.n	6066 <compare_set+0xf2>
    5fbc:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5fc0:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    5fc4:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5fc8:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5fcc:	fa0b f205 	lsl.w	r2, fp, r5
    5fd0:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5fd4:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5fd8:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5fdc:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    5fde:	4a38      	ldr	r2, [pc, #224]	; (60c0 <compare_set+0x14c>)
    return p_reg->CC[ch];
    5fe0:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    5fe4:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5fe8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    5fec:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    5ff0:	461c      	mov	r4, r3
    5ff2:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    5ff4:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    5ff8:	eba0 000a 	sub.w	r0, r0, sl
    5ffc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    6000:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    6004:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    6006:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    600a:	d105      	bne.n	6018 <compare_set+0xa4>
    600c:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    600e:	2013      	movs	r0, #19
    6010:	f005 fd17 	bl	ba42 <z_impl_k_busy_wait>
    6014:	4a2a      	ldr	r2, [pc, #168]	; (60c0 <compare_set+0x14c>)
    6016:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    6018:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    601a:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    601e:	eba4 000c 	sub.w	r0, r4, ip
    6022:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    6026:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    602a:	bf88      	it	hi
    602c:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    602e:	2000      	movs	r0, #0
    6030:	f8c8 0000 	str.w	r0, [r8]
    6034:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    6038:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    603c:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    6040:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    6044:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    6048:	4582      	cmp	sl, r0
    604a:	d006      	beq.n	605a <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    604c:	1a20      	subs	r0, r4, r0
    604e:	3802      	subs	r0, #2
    6050:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    6054:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6058:	d819      	bhi.n	608e <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    605a:	1ae4      	subs	r4, r4, r3
    605c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    6060:	1932      	adds	r2, r6, r4
    6062:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    6066:	4c15      	ldr	r4, [pc, #84]	; (60bc <compare_set+0x148>)
    6068:	0129      	lsls	r1, r5, #4
    606a:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    606e:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    6072:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    6074:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    6076:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    6078:	6043      	str	r3, [r0, #4]
	return ret;
    607a:	2400      	movs	r4, #0
	if (key) {
    607c:	9b01      	ldr	r3, [sp, #4]
    607e:	b113      	cbz	r3, 6086 <compare_set+0x112>
    6080:	4628      	mov	r0, r5
    6082:	f7ff ff27 	bl	5ed4 <compare_int_unlock.part.0>
}
    6086:	4620      	mov	r0, r4
    6088:	b005      	add	sp, #20
    608a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    608e:	4620      	mov	r0, r4
    6090:	e7b0      	b.n	5ff4 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    6092:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6094:	4a0b      	ldr	r2, [pc, #44]	; (60c4 <compare_set+0x150>)
    6096:	f3bf 8f5b 	dmb	ish
    609a:	40ab      	lsls	r3, r5
    609c:	e852 1f00 	ldrex	r1, [r2]
    60a0:	4319      	orrs	r1, r3
    60a2:	e842 1000 	strex	r0, r1, [r2]
    60a6:	2800      	cmp	r0, #0
    60a8:	d1f8      	bne.n	609c <compare_set+0x128>
    60aa:	f3bf 8f5b 	dmb	ish
    60ae:	4632      	mov	r2, r6
    60b0:	463b      	mov	r3, r7
    60b2:	e7d8      	b.n	6066 <compare_set+0xf2>
			return -EINVAL;
    60b4:	f06f 0415 	mvn.w	r4, #21
    60b8:	e7e0      	b.n	607c <compare_set+0x108>
    60ba:	bf00      	nop
    60bc:	20000450 	.word	0x20000450
    60c0:	40011000 	.word	0x40011000
    60c4:	2000113c 	.word	0x2000113c

000060c8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    60c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    60ca:	4b19      	ldr	r3, [pc, #100]	; (6130 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    60cc:	4d19      	ldr	r5, [pc, #100]	; (6134 <sys_clock_driver_init+0x6c>)
    60ce:	2400      	movs	r4, #0
    60d0:	f04f 30ff 	mov.w	r0, #4294967295
    60d4:	f04f 31ff 	mov.w	r1, #4294967295
    60d8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    60dc:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    60e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    60e4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    60e8:	4b13      	ldr	r3, [pc, #76]	; (6138 <sys_clock_driver_init+0x70>)
    60ea:	2602      	movs	r6, #2
    60ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    60f0:	2101      	movs	r1, #1
    60f2:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    60f6:	2011      	movs	r0, #17
    60f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    60fc:	4622      	mov	r2, r4
    60fe:	f7fe f889 	bl	4214 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    6102:	2011      	movs	r0, #17
    6104:	f7fe f868 	bl	41d8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    6108:	4a0c      	ldr	r2, [pc, #48]	; (613c <sys_clock_driver_init+0x74>)
    610a:	2301      	movs	r3, #1
    610c:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    610e:	4a0c      	ldr	r2, [pc, #48]	; (6140 <sys_clock_driver_init+0x78>)
    6110:	602b      	str	r3, [r5, #0]
    6112:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    6114:	4b0b      	ldr	r3, [pc, #44]	; (6144 <sys_clock_driver_init+0x7c>)
    6116:	4a0c      	ldr	r2, [pc, #48]	; (6148 <sys_clock_driver_init+0x80>)
    6118:	9300      	str	r3, [sp, #0]
    611a:	9401      	str	r4, [sp, #4]
    611c:	2300      	movs	r3, #0
    611e:	4620      	mov	r0, r4
    6120:	f7ff ff28 	bl	5f74 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    6124:	4630      	mov	r0, r6
    6126:	f7fe fd95 	bl	4c54 <z_nrf_clock_control_lf_on>

	return 0;
}
    612a:	4620      	mov	r0, r4
    612c:	b002      	add	sp, #8
    612e:	bd70      	pop	{r4, r5, r6, pc}
    6130:	20000450 	.word	0x20000450
    6134:	40011000 	.word	0x40011000
    6138:	e000e100 	.word	0xe000e100
    613c:	40011008 	.word	0x40011008
    6140:	20001140 	.word	0x20001140
    6144:	00005e0d 	.word	0x00005e0d
    6148:	007fffff 	.word	0x007fffff

0000614c <rtc_nrf_isr>:
{
    614c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    6150:	4c34      	ldr	r4, [pc, #208]	; (6224 <rtc_nrf_isr+0xd8>)
    6152:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    6156:	079a      	lsls	r2, r3, #30
    6158:	d509      	bpl.n	616e <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    615a:	4b33      	ldr	r3, [pc, #204]	; (6228 <rtc_nrf_isr+0xdc>)
    615c:	681a      	ldr	r2, [r3, #0]
    615e:	b132      	cbz	r2, 616e <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6160:	2200      	movs	r2, #0
    6162:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    6164:	4a31      	ldr	r2, [pc, #196]	; (622c <rtc_nrf_isr+0xe0>)
    6166:	681b      	ldr	r3, [r3, #0]
    6168:	6813      	ldr	r3, [r2, #0]
    616a:	3301      	adds	r3, #1
    616c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    616e:	f04f 0320 	mov.w	r3, #32
    6172:	f3ef 8211 	mrs	r2, BASEPRI
    6176:	f383 8812 	msr	BASEPRI_MAX, r3
    617a:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    617e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    6182:	03db      	lsls	r3, r3, #15
    6184:	d512      	bpl.n	61ac <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6186:	f3bf 8f5b 	dmb	ish
    618a:	4b29      	ldr	r3, [pc, #164]	; (6230 <rtc_nrf_isr+0xe4>)
    618c:	e853 1f00 	ldrex	r1, [r3]
    6190:	f021 0001 	bic.w	r0, r1, #1
    6194:	e843 0600 	strex	r6, r0, [r3]
    6198:	2e00      	cmp	r6, #0
    619a:	d1f7      	bne.n	618c <rtc_nrf_isr+0x40>
    619c:	f3bf 8f5b 	dmb	ish
    61a0:	4b24      	ldr	r3, [pc, #144]	; (6234 <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    61a2:	2900      	cmp	r1, #0
    61a4:	d136      	bne.n	6214 <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    61a6:	6819      	ldr	r1, [r3, #0]
		if (result) {
    61a8:	2900      	cmp	r1, #0
    61aa:	d133      	bne.n	6214 <rtc_nrf_isr+0xc8>
{
    61ac:	2300      	movs	r3, #0
	__asm__ volatile(
    61ae:	f382 8811 	msr	BASEPRI, r2
    61b2:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    61b6:	b353      	cbz	r3, 620e <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
    61b8:	f7ff feba 	bl	5f30 <z_nrf_rtc_timer_read>
    61bc:	4606      	mov	r6, r0
	__asm__ volatile(
    61be:	f04f 0320 	mov.w	r3, #32
    61c2:	f3ef 8011 	mrs	r0, BASEPRI
    61c6:	f383 8812 	msr	BASEPRI_MAX, r3
    61ca:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    61ce:	4b1a      	ldr	r3, [pc, #104]	; (6238 <rtc_nrf_isr+0xec>)
    61d0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    61d4:	4549      	cmp	r1, r9
    61d6:	bf08      	it	eq
    61d8:	4546      	cmpeq	r6, r8
    61da:	f04f 0200 	mov.w	r2, #0
    61de:	d31e      	bcc.n	621e <rtc_nrf_isr+0xd2>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    61e0:	f04f 36ff 	mov.w	r6, #4294967295
    61e4:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
    61e8:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    61ec:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    61f0:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    61f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    61f6:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    61fa:	f380 8811 	msr	BASEPRI, r0
    61fe:	f3bf 8f6f 	isb	sy
		if (handler) {
    6202:	b121      	cbz	r1, 620e <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
    6204:	9500      	str	r5, [sp, #0]
    6206:	4642      	mov	r2, r8
    6208:	464b      	mov	r3, r9
    620a:	2000      	movs	r0, #0
    620c:	4788      	blx	r1
}
    620e:	b003      	add	sp, #12
    6210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6214:	2100      	movs	r1, #0
    6216:	6019      	str	r1, [r3, #0]
    6218:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    621a:	2301      	movs	r3, #1
}
    621c:	e7c7      	b.n	61ae <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    621e:	4611      	mov	r1, r2
    6220:	e7eb      	b.n	61fa <rtc_nrf_isr+0xae>
    6222:	bf00      	nop
    6224:	40011000 	.word	0x40011000
    6228:	40011104 	.word	0x40011104
    622c:	20001144 	.word	0x20001144
    6230:	2000113c 	.word	0x2000113c
    6234:	40011140 	.word	0x40011140
    6238:	20000450 	.word	0x20000450

0000623c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    623c:	4b14      	ldr	r3, [pc, #80]	; (6290 <sys_clock_set_timeout+0x54>)
{
    623e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    6240:	f1b0 3fff 	cmp.w	r0, #4294967295
    6244:	bf08      	it	eq
    6246:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    6248:	1e44      	subs	r4, r0, #1
    624a:	2c00      	cmp	r4, #0
    624c:	dd1e      	ble.n	628c <sys_clock_set_timeout+0x50>
    624e:	429c      	cmp	r4, r3
    6250:	bfa8      	it	ge
    6252:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    6254:	f7ff fe6c 	bl	5f30 <z_nrf_rtc_timer_read>
    6258:	4b0e      	ldr	r3, [pc, #56]	; (6294 <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    625a:	490f      	ldr	r1, [pc, #60]	; (6298 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    625c:	e9d3 2300 	ldrd	r2, r3, [r3]
    6260:	1a80      	subs	r0, r0, r2
		ticks = 0;
    6262:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6266:	bf28      	it	cs
    6268:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    626a:	3001      	adds	r0, #1
    626c:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    626e:	4808      	ldr	r0, [pc, #32]	; (6290 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    6270:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    6272:	4284      	cmp	r4, r0
    6274:	bf28      	it	cs
    6276:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    6278:	1912      	adds	r2, r2, r4
    627a:	f04f 0000 	mov.w	r0, #0
    627e:	9001      	str	r0, [sp, #4]
    6280:	f143 0300 	adc.w	r3, r3, #0
    6284:	f7ff fe76 	bl	5f74 <compare_set>
}
    6288:	b002      	add	sp, #8
    628a:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    628c:	2400      	movs	r4, #0
    628e:	e7e1      	b.n	6254 <sys_clock_set_timeout+0x18>
    6290:	007fffff 	.word	0x007fffff
    6294:	20000460 	.word	0x20000460
    6298:	00005e0d 	.word	0x00005e0d

0000629c <sys_clock_elapsed>:
{
    629c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    629e:	f7ff fe47 	bl	5f30 <z_nrf_rtc_timer_read>
    62a2:	4b02      	ldr	r3, [pc, #8]	; (62ac <sys_clock_elapsed+0x10>)
    62a4:	681b      	ldr	r3, [r3, #0]
}
    62a6:	1ac0      	subs	r0, r0, r3
    62a8:	bd08      	pop	{r3, pc}
    62aa:	bf00      	nop
    62ac:	20000460 	.word	0x20000460

000062b0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    62b0:	4b04      	ldr	r3, [pc, #16]	; (62c4 <nrfx_clock_init+0x14>)
    62b2:	791a      	ldrb	r2, [r3, #4]
    62b4:	b922      	cbnz	r2, 62c0 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    62b6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    62b8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    62ba:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    62bc:	4802      	ldr	r0, [pc, #8]	; (62c8 <nrfx_clock_init+0x18>)
    62be:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    62c0:	4802      	ldr	r0, [pc, #8]	; (62cc <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    62c2:	4770      	bx	lr
    62c4:	20001148 	.word	0x20001148
    62c8:	0bad0000 	.word	0x0bad0000
    62cc:	0bad000c 	.word	0x0bad000c

000062d0 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    62d0:	b110      	cbz	r0, 62d8 <nrfx_clock_start+0x8>
    62d2:	2801      	cmp	r0, #1
    62d4:	d020      	beq.n	6318 <nrfx_clock_start+0x48>
    62d6:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    62d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    62dc:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    62e0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    62e4:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    62e8:	4619      	mov	r1, r3
    62ea:	d011      	beq.n	6310 <nrfx_clock_start+0x40>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    62ec:	f002 0203 	and.w	r2, r2, #3
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    62f0:	2a01      	cmp	r2, #1
    62f2:	d10d      	bne.n	6310 <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
    62f4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    62f8:	4b0c      	ldr	r3, [pc, #48]	; (632c <nrfx_clock_start+0x5c>)
    62fa:	2200      	movs	r2, #0
    62fc:	601a      	str	r2, [r3, #0]
    62fe:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    6300:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6304:	2202      	movs	r2, #2
    6306:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    630a:	2201      	movs	r2, #1
    630c:	609a      	str	r2, [r3, #8]
}
    630e:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    6310:	2300      	movs	r3, #0
    6312:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
    6316:	e7ef      	b.n	62f8 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6318:	4b05      	ldr	r3, [pc, #20]	; (6330 <nrfx_clock_start+0x60>)
    631a:	2200      	movs	r2, #0
    631c:	601a      	str	r2, [r3, #0]
    631e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    6320:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6324:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6328:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    632a:	4770      	bx	lr
    632c:	40000104 	.word	0x40000104
    6330:	40000100 	.word	0x40000100

00006334 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    6334:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    6336:	b110      	cbz	r0, 633e <nrfx_clock_stop+0xa>
    6338:	2801      	cmp	r0, #1
    633a:	d018      	beq.n	636e <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    633c:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    633e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6342:	2202      	movs	r2, #2
    6344:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6348:	4a18      	ldr	r2, [pc, #96]	; (63ac <nrfx_clock_stop+0x78>)
    634a:	6010      	str	r0, [r2, #0]
    634c:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    634e:	4a18      	ldr	r2, [pc, #96]	; (63b0 <nrfx_clock_stop+0x7c>)
    6350:	2101      	movs	r1, #1
    6352:	6011      	str	r1, [r2, #0]
    6354:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6358:	461c      	mov	r4, r3
    635a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    635e:	03db      	lsls	r3, r3, #15
    6360:	d5ec      	bpl.n	633c <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    6362:	2001      	movs	r0, #1
    6364:	f004 ff9f 	bl	b2a6 <nrfx_busy_wait>
    6368:	3d01      	subs	r5, #1
    636a:	d1f6      	bne.n	635a <nrfx_clock_stop+0x26>
    636c:	e7e6      	b.n	633c <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    636e:	4b11      	ldr	r3, [pc, #68]	; (63b4 <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
    6370:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6374:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    6376:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    637a:	601a      	str	r2, [r3, #0]
    637c:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    637e:	4b0e      	ldr	r3, [pc, #56]	; (63b8 <nrfx_clock_stop+0x84>)
    6380:	f242 7510 	movw	r5, #10000	; 0x2710
    6384:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6386:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    638a:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    638e:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6390:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6394:	d505      	bpl.n	63a2 <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    6396:	b123      	cbz	r3, 63a2 <nrfx_clock_stop+0x6e>
    6398:	2001      	movs	r0, #1
    639a:	f004 ff84 	bl	b2a6 <nrfx_busy_wait>
    639e:	3d01      	subs	r5, #1
    63a0:	d1f1      	bne.n	6386 <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
    63a2:	4b06      	ldr	r3, [pc, #24]	; (63bc <nrfx_clock_stop+0x88>)
    63a4:	2200      	movs	r2, #0
    63a6:	715a      	strb	r2, [r3, #5]
    63a8:	e7c8      	b.n	633c <nrfx_clock_stop+0x8>
    63aa:	bf00      	nop
    63ac:	40000104 	.word	0x40000104
    63b0:	4000000c 	.word	0x4000000c
    63b4:	40000100 	.word	0x40000100
    63b8:	40000004 	.word	0x40000004
    63bc:	20001148 	.word	0x20001148

000063c0 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    63c0:	4b16      	ldr	r3, [pc, #88]	; (641c <nrfx_power_clock_irq_handler+0x5c>)
    63c2:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    63c4:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    63c6:	b16a      	cbz	r2, 63e4 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    63c8:	2200      	movs	r2, #0
    63ca:	601a      	str	r2, [r3, #0]
    63cc:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    63ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    63d2:	2201      	movs	r2, #1
    63d4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    63d8:	4b11      	ldr	r3, [pc, #68]	; (6420 <nrfx_power_clock_irq_handler+0x60>)
    63da:	7958      	ldrb	r0, [r3, #5]
    63dc:	b910      	cbnz	r0, 63e4 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    63de:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    63e0:	681b      	ldr	r3, [r3, #0]
    63e2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    63e4:	4b0f      	ldr	r3, [pc, #60]	; (6424 <nrfx_power_clock_irq_handler+0x64>)
    63e6:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    63e8:	b172      	cbz	r2, 6408 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    63ea:	2200      	movs	r2, #0
    63ec:	601a      	str	r2, [r3, #0]
    63ee:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    63f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    63f4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    63f8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    63fc:	0792      	lsls	r2, r2, #30
    63fe:	d104      	bne.n	640a <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6400:	2201      	movs	r2, #1
    6402:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6406:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    6408:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    640a:	2202      	movs	r2, #2
    640c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    6410:	4b03      	ldr	r3, [pc, #12]	; (6420 <nrfx_power_clock_irq_handler+0x60>)
}
    6412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    6416:	681b      	ldr	r3, [r3, #0]
    6418:	2001      	movs	r0, #1
    641a:	4718      	bx	r3
    641c:	40000100 	.word	0x40000100
    6420:	20001148 	.word	0x20001148
    6424:	40000104 	.word	0x40000104

00006428 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    6428:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    642a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    642c:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    642e:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    6432:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    6434:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    6438:	d014      	beq.n	6464 <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    643a:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    643e:	fa05 f204 	lsl.w	r2, r5, r4
    6442:	ea23 0202 	bic.w	r2, r3, r2
    6446:	e850 6f00 	ldrex	r6, [r0]
    644a:	429e      	cmp	r6, r3
    644c:	d104      	bne.n	6458 <nrfx_flag32_alloc+0x30>
    644e:	e840 2c00 	strex	ip, r2, [r0]
    6452:	f1bc 0f00 	cmp.w	ip, #0
    6456:	d1f6      	bne.n	6446 <nrfx_flag32_alloc+0x1e>
    6458:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    645c:	d1e6      	bne.n	642c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    645e:	4802      	ldr	r0, [pc, #8]	; (6468 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
    6460:	700c      	strb	r4, [r1, #0]
}
    6462:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    6464:	4801      	ldr	r0, [pc, #4]	; (646c <nrfx_flag32_alloc+0x44>)
    6466:	e7fc      	b.n	6462 <nrfx_flag32_alloc+0x3a>
    6468:	0bad0000 	.word	0x0bad0000
    646c:	0bad0002 	.word	0x0bad0002

00006470 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    6470:	6803      	ldr	r3, [r0, #0]
    6472:	40cb      	lsrs	r3, r1
    6474:	07db      	lsls	r3, r3, #31
{
    6476:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    6478:	d415      	bmi.n	64a6 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    647a:	2301      	movs	r3, #1
    647c:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    6480:	6803      	ldr	r3, [r0, #0]
    6482:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    6486:	ea41 0203 	orr.w	r2, r1, r3
    648a:	e850 4f00 	ldrex	r4, [r0]
    648e:	429c      	cmp	r4, r3
    6490:	d104      	bne.n	649c <nrfx_flag32_free+0x2c>
    6492:	e840 2c00 	strex	ip, r2, [r0]
    6496:	f1bc 0f00 	cmp.w	ip, #0
    649a:	d1f6      	bne.n	648a <nrfx_flag32_free+0x1a>
    649c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    64a0:	d1ee      	bne.n	6480 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    64a2:	4802      	ldr	r0, [pc, #8]	; (64ac <nrfx_flag32_free+0x3c>)
}
    64a4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    64a6:	4802      	ldr	r0, [pc, #8]	; (64b0 <nrfx_flag32_free+0x40>)
    64a8:	e7fc      	b.n	64a4 <nrfx_flag32_free+0x34>
    64aa:	bf00      	nop
    64ac:	0bad0000 	.word	0x0bad0000
    64b0:	0bad0004 	.word	0x0bad0004

000064b4 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    64b4:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    64b6:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    64ba:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    64bc:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    64be:	6002      	str	r2, [r0, #0]
}
    64c0:	4802      	ldr	r0, [pc, #8]	; (64cc <nrf_gpio_pin_port_decode+0x18>)
    64c2:	bf18      	it	ne
    64c4:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    64c8:	4770      	bx	lr
    64ca:	bf00      	nop
    64cc:	50000300 	.word	0x50000300

000064d0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    64d0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    64d2:	f100 0308 	add.w	r3, r0, #8
    64d6:	4c0c      	ldr	r4, [pc, #48]	; (6508 <call_handler+0x38>)
    64d8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    64dc:	05da      	lsls	r2, r3, #23
{
    64de:	4605      	mov	r5, r0
    64e0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    64e2:	d507      	bpl.n	64f4 <call_handler+0x24>
    64e4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    64e8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    64ec:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    64f0:	6852      	ldr	r2, [r2, #4]
    64f2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    64f4:	68a3      	ldr	r3, [r4, #8]
    64f6:	b12b      	cbz	r3, 6504 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    64f8:	68e2      	ldr	r2, [r4, #12]
    64fa:	4631      	mov	r1, r6
    64fc:	4628      	mov	r0, r5
    }
}
    64fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    6502:	4718      	bx	r3
}
    6504:	bd70      	pop	{r4, r5, r6, pc}
    6506:	bf00      	nop
    6508:	2000021c 	.word	0x2000021c

0000650c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    650c:	4b12      	ldr	r3, [pc, #72]	; (6558 <release_handler+0x4c>)
    650e:	3008      	adds	r0, #8
{
    6510:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6512:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    6516:	05d1      	lsls	r1, r2, #23
    6518:	d51b      	bpl.n	6552 <release_handler+0x46>
    651a:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    651e:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    6522:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    6526:	f103 0410 	add.w	r4, r3, #16
    652a:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    652c:	f834 2b02 	ldrh.w	r2, [r4], #2
    6530:	f412 7f80 	tst.w	r2, #256	; 0x100
    6534:	d003      	beq.n	653e <release_handler+0x32>
    6536:	f3c2 2243 	ubfx	r2, r2, #9, #4
    653a:	4291      	cmp	r1, r2
    653c:	d009      	beq.n	6552 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    653e:	3001      	adds	r0, #1
    6540:	2830      	cmp	r0, #48	; 0x30
    6542:	d1f3      	bne.n	652c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    6544:	2200      	movs	r2, #0
    6546:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    654a:	4804      	ldr	r0, [pc, #16]	; (655c <release_handler+0x50>)
}
    654c:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    654e:	f7ff bf8f 	b.w	6470 <nrfx_flag32_free>
}
    6552:	bc10      	pop	{r4}
    6554:	4770      	bx	lr
    6556:	bf00      	nop
    6558:	2000021c 	.word	0x2000021c
    655c:	20000290 	.word	0x20000290

00006560 <pin_handler_trigger_uninit>:
{
    6560:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    6562:	4c0a      	ldr	r4, [pc, #40]	; (658c <pin_handler_trigger_uninit+0x2c>)
    6564:	f100 0508 	add.w	r5, r0, #8
    6568:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    656c:	069a      	lsls	r2, r3, #26
    656e:	d506      	bpl.n	657e <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    6570:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    6572:	4a07      	ldr	r2, [pc, #28]	; (6590 <pin_handler_trigger_uninit+0x30>)
    6574:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    6578:	2100      	movs	r1, #0
    657a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
    657e:	f7ff ffc5 	bl	650c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    6582:	2300      	movs	r3, #0
    6584:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    6588:	bd38      	pop	{r3, r4, r5, pc}
    658a:	bf00      	nop
    658c:	2000021c 	.word	0x2000021c
    6590:	40006000 	.word	0x40006000

00006594 <nrfx_gpiote_input_configure>:
{
    6594:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    6598:	461d      	mov	r5, r3
    659a:	4604      	mov	r4, r0
    659c:	4617      	mov	r7, r2
    if (p_input_config)
    659e:	460b      	mov	r3, r1
    65a0:	b309      	cbz	r1, 65e6 <nrfx_gpiote_input_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    65a2:	4e4d      	ldr	r6, [pc, #308]	; (66d8 <nrfx_gpiote_input_configure+0x144>)
    65a4:	f100 0808 	add.w	r8, r0, #8
        if (pin_is_task_output(pin))
    65a8:	f836 2018 	ldrh.w	r2, [r6, r8, lsl #1]
    65ac:	f002 0222 	and.w	r2, r2, #34	; 0x22
    65b0:	2a22      	cmp	r2, #34	; 0x22
    65b2:	d103      	bne.n	65bc <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    65b4:	4849      	ldr	r0, [pc, #292]	; (66dc <nrfx_gpiote_input_configure+0x148>)
}
    65b6:	b004      	add	sp, #16
    65b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    65bc:	2200      	movs	r2, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    65be:	e9cd 2200 	strd	r2, r2, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    65c2:	f88d 200e 	strb.w	r2, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    65c6:	f88d 200f 	strb.w	r2, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    65ca:	f10d 010e 	add.w	r1, sp, #14
    65ce:	f10d 020f 	add.w	r2, sp, #15
    65d2:	f004 fe6a 	bl	b2aa <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    65d6:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    65da:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    65de:	f043 0301 	orr.w	r3, r3, #1
    65e2:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    65e6:	b197      	cbz	r7, 660e <nrfx_gpiote_input_configure+0x7a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    65e8:	483b      	ldr	r0, [pc, #236]	; (66d8 <nrfx_gpiote_input_configure+0x144>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    65ea:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    65ec:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    65ee:	f104 0308 	add.w	r3, r4, #8
    65f2:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
        if (pin_is_output(pin))
    65f6:	078f      	lsls	r7, r1, #30
    65f8:	d50c      	bpl.n	6614 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
    65fa:	2a00      	cmp	r2, #0
    65fc:	d1da      	bne.n	65b4 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    65fe:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
    6602:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    6606:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    660a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    if (p_handler_config)
    660e:	bbcd      	cbnz	r5, 6684 <nrfx_gpiote_input_configure+0xf0>
    return NRFX_SUCCESS;
    6610:	4833      	ldr	r0, [pc, #204]	; (66e0 <nrfx_gpiote_input_configure+0x14c>)
    6612:	e7d0      	b.n	65b6 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    6614:	f021 0120 	bic.w	r1, r1, #32
    6618:	04c9      	lsls	r1, r1, #19
    661a:	0cc9      	lsrs	r1, r1, #19
    661c:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
            if (use_evt)
    6620:	2a00      	cmp	r2, #0
    6622:	d0ec      	beq.n	65fe <nrfx_gpiote_input_configure+0x6a>
                if (!edge)
    6624:	2e03      	cmp	r6, #3
    6626:	d8c5      	bhi.n	65b4 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    6628:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    662a:	b92e      	cbnz	r6, 6638 <nrfx_gpiote_input_configure+0xa4>
    662c:	4a2d      	ldr	r2, [pc, #180]	; (66e4 <nrfx_gpiote_input_configure+0x150>)
    662e:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    6632:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    6636:	e7e2      	b.n	65fe <nrfx_gpiote_input_configure+0x6a>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6638:	00ba      	lsls	r2, r7, #2
    663a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    663e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6642:	ea4f 2e04 	mov.w	lr, r4, lsl #8
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6646:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    664a:	f02c 0c03 	bic.w	ip, ip, #3
    664e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    6652:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    6656:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    665a:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    665e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6662:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    6666:	f40e 5e7c 	and.w	lr, lr, #16128	; 0x3f00
    666a:	ea4c 4c06 	orr.w	ip, ip, r6, lsl #16
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    666e:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    6672:	ea4c 0c0e 	orr.w	ip, ip, lr
    6676:	f041 0120 	orr.w	r1, r1, #32
    667a:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
    667e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    6682:	e7bc      	b.n	65fe <nrfx_gpiote_input_configure+0x6a>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    6684:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    6688:	4620      	mov	r0, r4
    668a:	f7ff ff3f 	bl	650c <release_handler>
    if (!handler)
    668e:	2e00      	cmp	r6, #0
    6690:	d0be      	beq.n	6610 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6692:	4d11      	ldr	r5, [pc, #68]	; (66d8 <nrfx_gpiote_input_configure+0x144>)
    6694:	682b      	ldr	r3, [r5, #0]
    6696:	429e      	cmp	r6, r3
    6698:	d104      	bne.n	66a4 <nrfx_gpiote_input_configure+0x110>
    669a:	686b      	ldr	r3, [r5, #4]
    669c:	429f      	cmp	r7, r3
    669e:	d101      	bne.n	66a4 <nrfx_gpiote_input_configure+0x110>
    66a0:	2200      	movs	r2, #0
    66a2:	e009      	b.n	66b8 <nrfx_gpiote_input_configure+0x124>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    66a4:	4810      	ldr	r0, [pc, #64]	; (66e8 <nrfx_gpiote_input_configure+0x154>)
    66a6:	f10d 010f 	add.w	r1, sp, #15
    66aa:	f7ff febd 	bl	6428 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    66ae:	4b0c      	ldr	r3, [pc, #48]	; (66e0 <nrfx_gpiote_input_configure+0x14c>)
    66b0:	4298      	cmp	r0, r3
    66b2:	d180      	bne.n	65b6 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    66b4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    66b8:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    66bc:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    66c0:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    66c2:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    66c4:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    66c8:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    66cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    66d0:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    66d4:	e79c      	b.n	6610 <nrfx_gpiote_input_configure+0x7c>
    66d6:	bf00      	nop
    66d8:	2000021c 	.word	0x2000021c
    66dc:	0bad0004 	.word	0x0bad0004
    66e0:	0bad0000 	.word	0x0bad0000
    66e4:	40006000 	.word	0x40006000
    66e8:	20000290 	.word	0x20000290

000066ec <nrfx_gpiote_output_configure>:
{
    66ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    66ee:	4604      	mov	r4, r0
    66f0:	b085      	sub	sp, #20
    66f2:	4615      	mov	r5, r2
    if (p_config)
    66f4:	b309      	cbz	r1, 673a <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    66f6:	f100 0708 	add.w	r7, r0, #8
    66fa:	4e31      	ldr	r6, [pc, #196]	; (67c0 <nrfx_gpiote_output_configure+0xd4>)
    66fc:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    6700:	0798      	lsls	r0, r3, #30
    6702:	d401      	bmi.n	6708 <nrfx_gpiote_output_configure+0x1c>
    6704:	069a      	lsls	r2, r3, #26
    6706:	d458      	bmi.n	67ba <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    6708:	f013 0f1c 	tst.w	r3, #28
    670c:	d002      	beq.n	6714 <nrfx_gpiote_output_configure+0x28>
    670e:	784b      	ldrb	r3, [r1, #1]
    6710:	2b01      	cmp	r3, #1
    6712:	d052      	beq.n	67ba <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    6714:	2301      	movs	r3, #1
    6716:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    671a:	2300      	movs	r3, #0
    671c:	e9cd 1300 	strd	r1, r3, [sp]
    6720:	1c4a      	adds	r2, r1, #1
    6722:	1c8b      	adds	r3, r1, #2
    6724:	4620      	mov	r0, r4
    6726:	f10d 010f 	add.w	r1, sp, #15
    672a:	f004 fdbe 	bl	b2aa <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    672e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    6732:	f043 0303 	orr.w	r3, r3, #3
    6736:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    673a:	b915      	cbnz	r5, 6742 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    673c:	4821      	ldr	r0, [pc, #132]	; (67c4 <nrfx_gpiote_output_configure+0xd8>)
}
    673e:	b005      	add	sp, #20
    6740:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6742:	4e1f      	ldr	r6, [pc, #124]	; (67c0 <nrfx_gpiote_output_configure+0xd4>)
    6744:	f104 0708 	add.w	r7, r4, #8
    6748:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    674c:	0783      	lsls	r3, r0, #30
    674e:	d534      	bpl.n	67ba <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
    6750:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    6754:	4661      	mov	r1, ip
    6756:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    6758:	f020 0020 	bic.w	r0, r0, #32
    675c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    6760:	04c0      	lsls	r0, r0, #19
    6762:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    6766:	0cc0      	lsrs	r0, r0, #19
    6768:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    676c:	2300      	movs	r3, #0
    676e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    6772:	786a      	ldrb	r2, [r5, #1]
    6774:	2a00      	cmp	r2, #0
    6776:	d0e1      	beq.n	673c <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    6778:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    677c:	78ad      	ldrb	r5, [r5, #2]
    677e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    6782:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    6786:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    678a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    678e:	0223      	lsls	r3, r4, #8
    6790:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6794:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6796:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    679a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    679e:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    67a0:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    67a2:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    67a6:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    67aa:	432b      	orrs	r3, r5
    67ac:	f040 0020 	orr.w	r0, r0, #32
    67b0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    67b4:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    67b8:	e7c0      	b.n	673c <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    67ba:	4803      	ldr	r0, [pc, #12]	; (67c8 <nrfx_gpiote_output_configure+0xdc>)
    67bc:	e7bf      	b.n	673e <nrfx_gpiote_output_configure+0x52>
    67be:	bf00      	nop
    67c0:	2000021c 	.word	0x2000021c
    67c4:	0bad0000 	.word	0x0bad0000
    67c8:	0bad0004 	.word	0x0bad0004

000067cc <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    67cc:	4b01      	ldr	r3, [pc, #4]	; (67d4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    67ce:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    67d2:	4770      	bx	lr
    67d4:	2000021c 	.word	0x2000021c

000067d8 <nrfx_gpiote_channel_get>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    67d8:	3008      	adds	r0, #8
    67da:	4b05      	ldr	r3, [pc, #20]	; (67f0 <nrfx_gpiote_channel_get+0x18>)
    67dc:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    if (pin_in_use_by_te(pin))
    67e0:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    67e2:	bf43      	ittte	mi
    67e4:	0b5b      	lsrmi	r3, r3, #13
        return NRFX_SUCCESS;
    67e6:	4803      	ldrmi	r0, [pc, #12]	; (67f4 <nrfx_gpiote_channel_get+0x1c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    67e8:	700b      	strbmi	r3, [r1, #0]
        return NRFX_ERROR_INVALID_PARAM;
    67ea:	4803      	ldrpl	r0, [pc, #12]	; (67f8 <nrfx_gpiote_channel_get+0x20>)
}
    67ec:	4770      	bx	lr
    67ee:	bf00      	nop
    67f0:	2000021c 	.word	0x2000021c
    67f4:	0bad0000 	.word	0x0bad0000
    67f8:	0bad0004 	.word	0x0bad0004

000067fc <nrfx_gpiote_init>:
{
    67fc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    67fe:	4c0e      	ldr	r4, [pc, #56]	; (6838 <nrfx_gpiote_init+0x3c>)
    6800:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    6804:	b9b5      	cbnz	r5, 6834 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    6806:	2260      	movs	r2, #96	; 0x60
    6808:	4629      	mov	r1, r5
    680a:	f104 0010 	add.w	r0, r4, #16
    680e:	f003 fefc 	bl	a60a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    6812:	2006      	movs	r0, #6
    6814:	f7fd fce0 	bl	41d8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6818:	4b08      	ldr	r3, [pc, #32]	; (683c <nrfx_gpiote_init+0x40>)
    return err_code;
    681a:	4809      	ldr	r0, [pc, #36]	; (6840 <nrfx_gpiote_init+0x44>)
    681c:	601d      	str	r5, [r3, #0]
    681e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    6820:	4b08      	ldr	r3, [pc, #32]	; (6844 <nrfx_gpiote_init+0x48>)
    6822:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6826:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    682a:	2301      	movs	r3, #1
    682c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    6830:	6763      	str	r3, [r4, #116]	; 0x74
}
    6832:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    6834:	4804      	ldr	r0, [pc, #16]	; (6848 <nrfx_gpiote_init+0x4c>)
    6836:	e7fc      	b.n	6832 <nrfx_gpiote_init+0x36>
    6838:	2000021c 	.word	0x2000021c
    683c:	4000617c 	.word	0x4000617c
    6840:	0bad0000 	.word	0x0bad0000
    6844:	40006000 	.word	0x40006000
    6848:	0bad0005 	.word	0x0bad0005

0000684c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    684c:	4b03      	ldr	r3, [pc, #12]	; (685c <nrfx_gpiote_is_init+0x10>)
    684e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    6852:	3800      	subs	r0, #0
    6854:	bf18      	it	ne
    6856:	2001      	movne	r0, #1
    6858:	4770      	bx	lr
    685a:	bf00      	nop
    685c:	2000021c 	.word	0x2000021c

00006860 <nrfx_gpiote_channel_free>:
{
    6860:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    6862:	4801      	ldr	r0, [pc, #4]	; (6868 <nrfx_gpiote_channel_free+0x8>)
    6864:	f7ff be04 	b.w	6470 <nrfx_flag32_free>
    6868:	2000028c 	.word	0x2000028c

0000686c <nrfx_gpiote_channel_alloc>:
{
    686c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    686e:	4801      	ldr	r0, [pc, #4]	; (6874 <nrfx_gpiote_channel_alloc+0x8>)
    6870:	f7ff bdda 	b.w	6428 <nrfx_flag32_alloc>
    6874:	2000028c 	.word	0x2000028c

00006878 <nrfx_gpiote_trigger_enable>:
{
    6878:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    687a:	4b1f      	ldr	r3, [pc, #124]	; (68f8 <nrfx_gpiote_trigger_enable+0x80>)
    687c:	f100 0208 	add.w	r2, r0, #8
{
    6880:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    6882:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6886:	069a      	lsls	r2, r3, #26
    6888:	d51d      	bpl.n	68c6 <nrfx_gpiote_trigger_enable+0x4e>
    688a:	f013 0502 	ands.w	r5, r3, #2
    688e:	d11a      	bne.n	68c6 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6890:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    6892:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    6894:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    6898:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    689c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    68a0:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    68a4:	6005      	str	r5, [r0, #0]
    68a6:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    68a8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    68ac:	f040 0001 	orr.w	r0, r0, #1
    68b0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    68b4:	b129      	cbz	r1, 68c2 <nrfx_gpiote_trigger_enable+0x4a>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    68b6:	2201      	movs	r2, #1
    68b8:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    68bc:	4a0f      	ldr	r2, [pc, #60]	; (68fc <nrfx_gpiote_trigger_enable+0x84>)
    68be:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    68c2:	b003      	add	sp, #12
    68c4:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    68c6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    68ca:	2b04      	cmp	r3, #4
    68cc:	d010      	beq.n	68f0 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    68ce:	2b05      	cmp	r3, #5
    68d0:	d010      	beq.n	68f4 <nrfx_gpiote_trigger_enable+0x7c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    68d2:	a801      	add	r0, sp, #4
    68d4:	9401      	str	r4, [sp, #4]
    68d6:	f7ff fded 	bl	64b4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    68da:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    68dc:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    68e0:	40d9      	lsrs	r1, r3
    68e2:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    68e6:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    68e8:	4620      	mov	r0, r4
    68ea:	f004 fd25 	bl	b338 <nrf_gpio_cfg_sense_set>
}
    68ee:	e7e8      	b.n	68c2 <nrfx_gpiote_trigger_enable+0x4a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    68f0:	2103      	movs	r1, #3
    68f2:	e7f9      	b.n	68e8 <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    68f4:	2102      	movs	r1, #2
    68f6:	e7f7      	b.n	68e8 <nrfx_gpiote_trigger_enable+0x70>
    68f8:	2000021c 	.word	0x2000021c
    68fc:	40006000 	.word	0x40006000

00006900 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    6900:	4b0e      	ldr	r3, [pc, #56]	; (693c <nrfx_gpiote_trigger_disable+0x3c>)
    6902:	f100 0208 	add.w	r2, r0, #8
    6906:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    690a:	0699      	lsls	r1, r3, #26
    690c:	d513      	bpl.n	6936 <nrfx_gpiote_trigger_disable+0x36>
    690e:	079a      	lsls	r2, r3, #30
    6910:	d411      	bmi.n	6936 <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6912:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    6914:	2201      	movs	r2, #1
    6916:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    6918:	009b      	lsls	r3, r3, #2
    691a:	4909      	ldr	r1, [pc, #36]	; (6940 <nrfx_gpiote_trigger_disable+0x40>)
    691c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6920:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    6924:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6928:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    692c:	f022 0203 	bic.w	r2, r2, #3
    6930:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    6934:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    6936:	2100      	movs	r1, #0
    6938:	f004 bcfe 	b.w	b338 <nrf_gpio_cfg_sense_set>
    693c:	2000021c 	.word	0x2000021c
    6940:	40006000 	.word	0x40006000

00006944 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    6944:	4b0e      	ldr	r3, [pc, #56]	; (6980 <nrfx_gpiote_pin_uninit+0x3c>)
    6946:	f100 0208 	add.w	r2, r0, #8
{
    694a:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    694c:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    6950:	07db      	lsls	r3, r3, #31
{
    6952:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    6954:	d511      	bpl.n	697a <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    6956:	f7ff ffd3 	bl	6900 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    695a:	4620      	mov	r0, r4
    695c:	f7ff fe00 	bl	6560 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6960:	a801      	add	r0, sp, #4
    6962:	9401      	str	r4, [sp, #4]
    6964:	f7ff fda6 	bl	64b4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    6968:	9b01      	ldr	r3, [sp, #4]
    696a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    696e:	2202      	movs	r2, #2
    6970:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    6974:	4803      	ldr	r0, [pc, #12]	; (6984 <nrfx_gpiote_pin_uninit+0x40>)
}
    6976:	b002      	add	sp, #8
    6978:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    697a:	4803      	ldr	r0, [pc, #12]	; (6988 <nrfx_gpiote_pin_uninit+0x44>)
    697c:	e7fb      	b.n	6976 <nrfx_gpiote_pin_uninit+0x32>
    697e:	bf00      	nop
    6980:	2000021c 	.word	0x2000021c
    6984:	0bad0000 	.word	0x0bad0000
    6988:	0bad0004 	.word	0x0bad0004

0000698c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    698c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6990:	4b64      	ldr	r3, [pc, #400]	; (6b24 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    6992:	4865      	ldr	r0, [pc, #404]	; (6b28 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6994:	4965      	ldr	r1, [pc, #404]	; (6b2c <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    6996:	2500      	movs	r5, #0
{
    6998:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    699a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    699c:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    699e:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    69a0:	b136      	cbz	r6, 69b0 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    69a2:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    69a6:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    69a8:	bf1e      	ittt	ne
    69aa:	601c      	strne	r4, [r3, #0]
    69ac:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    69ae:	4315      	orrne	r5, r2
        }
        mask <<= 1;
    69b0:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    69b2:	428b      	cmp	r3, r1
        mask <<= 1;
    69b4:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    69b8:	d1f1      	bne.n	699e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    69ba:	4f5d      	ldr	r7, [pc, #372]	; (6b30 <nrfx_gpiote_irq_handler+0x1a4>)
    69bc:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    69be:	b37b      	cbz	r3, 6a20 <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
    69c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    69c4:	4e5b      	ldr	r6, [pc, #364]	; (6b34 <nrfx_gpiote_irq_handler+0x1a8>)
    69c6:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    69ca:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    69cc:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    69d0:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    69d4:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    69d6:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    69da:	9600      	str	r6, [sp, #0]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    69dc:	f10d 0910 	add.w	r9, sp, #16
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    69e0:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    69e4:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
    69e8:	f8d9 3000 	ldr.w	r3, [r9]
    69ec:	b9f3      	cbnz	r3, 6a2c <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    69ee:	f108 0820 	add.w	r8, r8, #32
    69f2:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    69f6:	f109 0904 	add.w	r9, r9, #4
    69fa:	d1f5      	bne.n	69e8 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    69fc:	603b      	str	r3, [r7, #0]
    69fe:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
    6a00:	9900      	ldr	r1, [sp, #0]
        *p_masks = gpio_regs[i]->LATCH;
    6a02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6a06:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    6a0a:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    6a0c:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    6a10:	9b00      	ldr	r3, [sp, #0]
    6a12:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    6a16:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    6a18:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    6a1c:	4313      	orrs	r3, r2
    6a1e:	d1dd      	bne.n	69dc <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
    6a20:	2401      	movs	r4, #1
    while (mask)
    6a22:	2d00      	cmp	r5, #0
    6a24:	d166      	bne.n	6af4 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    6a26:	b007      	add	sp, #28
    6a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    6a2c:	fa93 f3a3 	rbit	r3, r3
    6a30:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
    6a34:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6a38:	f106 0208 	add.w	r2, r6, #8
    6a3c:	4b3e      	ldr	r3, [pc, #248]	; (6b38 <nrfx_gpiote_irq_handler+0x1ac>)
    6a3e:	9603      	str	r6, [sp, #12]
    6a40:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    6a44:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    6a48:	08f4      	lsrs	r4, r6, #3
    6a4a:	9301      	str	r3, [sp, #4]
    6a4c:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
    6a4e:	ab04      	add	r3, sp, #16
    bit = BITMASK_RELBIT_GET(bit);
    6a50:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    6a54:	fa0b fc00 	lsl.w	ip, fp, r0
    6a58:	5d18      	ldrb	r0, [r3, r4]
    6a5a:	ea20 000c 	bic.w	r0, r0, ip
    6a5e:	5518      	strb	r0, [r3, r4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6a60:	a803      	add	r0, sp, #12
    6a62:	0891      	lsrs	r1, r2, #2
    6a64:	f7ff fd26 	bl	64b4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6a68:	9c03      	ldr	r4, [sp, #12]
    6a6a:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    if (is_level(trigger))
    6a6e:	074b      	lsls	r3, r1, #29
    6a70:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    6a74:	f3c4 4401 	ubfx	r4, r4, #16, #2
    6a78:	d523      	bpl.n	6ac2 <nrfx_gpiote_irq_handler+0x136>
        call_handler(pin, trigger);
    6a7a:	4651      	mov	r1, sl
    6a7c:	4630      	mov	r0, r6
    6a7e:	f7ff fd27 	bl	64d0 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6a82:	a803      	add	r0, sp, #12
    6a84:	9603      	str	r6, [sp, #12]
    6a86:	f7ff fd15 	bl	64b4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6a8a:	9a03      	ldr	r2, [sp, #12]
    6a8c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    6a90:	b2e4      	uxtb	r4, r4
    6a92:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    6a96:	f3c2 4201 	ubfx	r2, r2, #16, #2
    6a9a:	4294      	cmp	r4, r2
    6a9c:	d107      	bne.n	6aae <nrfx_gpiote_irq_handler+0x122>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    6a9e:	2100      	movs	r1, #0
    6aa0:	4630      	mov	r0, r6
    6aa2:	f004 fc49 	bl	b338 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    6aa6:	4621      	mov	r1, r4
    6aa8:	4630      	mov	r0, r6
    6aaa:	f004 fc45 	bl	b338 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6aae:	a803      	add	r0, sp, #12
    6ab0:	9603      	str	r6, [sp, #12]
    6ab2:	f7ff fcff 	bl	64b4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    6ab6:	9b03      	ldr	r3, [sp, #12]
    6ab8:	fa0b f303 	lsl.w	r3, fp, r3
    6abc:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
    6ac0:	e792      	b.n	69e8 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6ac2:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    6ac4:	bf0c      	ite	eq
    6ac6:	2103      	moveq	r1, #3
    6ac8:	2102      	movne	r1, #2
    6aca:	4630      	mov	r0, r6
    6acc:	f004 fc34 	bl	b338 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    6ad0:	9b01      	ldr	r3, [sp, #4]
    6ad2:	2b03      	cmp	r3, #3
    6ad4:	d004      	beq.n	6ae0 <nrfx_gpiote_irq_handler+0x154>
    6ad6:	2c02      	cmp	r4, #2
    6ad8:	d107      	bne.n	6aea <nrfx_gpiote_irq_handler+0x15e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    6ada:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    6ade:	d1e6      	bne.n	6aae <nrfx_gpiote_irq_handler+0x122>
            call_handler(pin, trigger);
    6ae0:	4651      	mov	r1, sl
    6ae2:	4630      	mov	r0, r6
    6ae4:	f7ff fcf4 	bl	64d0 <call_handler>
    6ae8:	e7e1      	b.n	6aae <nrfx_gpiote_irq_handler+0x122>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    6aea:	2c03      	cmp	r4, #3
    6aec:	d1df      	bne.n	6aae <nrfx_gpiote_irq_handler+0x122>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    6aee:	f1ba 0f02 	cmp.w	sl, #2
    6af2:	e7f4      	b.n	6ade <nrfx_gpiote_irq_handler+0x152>
        uint32_t ch = NRF_CTZ(mask);
    6af4:	fa95 f3a5 	rbit	r3, r5
    6af8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    6afc:	fa04 f203 	lsl.w	r2, r4, r3
    6b00:	009b      	lsls	r3, r3, #2
    6b02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6b06:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    6b0a:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    6b0e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    6b12:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    6b16:	f3c0 2005 	ubfx	r0, r0, #8, #6
    6b1a:	f3c1 4101 	ubfx	r1, r1, #16, #2
    6b1e:	f7ff fcd7 	bl	64d0 <call_handler>
    6b22:	e77e      	b.n	6a22 <nrfx_gpiote_irq_handler+0x96>
    6b24:	40006100 	.word	0x40006100
    6b28:	40006000 	.word	0x40006000
    6b2c:	40006120 	.word	0x40006120
    6b30:	4000617c 	.word	0x4000617c
    6b34:	50000300 	.word	0x50000300
    6b38:	2000021c 	.word	0x2000021c

00006b3c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    6b3c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    6b3e:	4801      	ldr	r0, [pc, #4]	; (6b44 <nrfx_ppi_channel_alloc+0x8>)
    6b40:	f7ff bc72 	b.w	6428 <nrfx_flag32_alloc>
    6b44:	20000298 	.word	0x20000298

00006b48 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    6b48:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    6b4a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    6b4e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6b50:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    6b52:	6002      	str	r2, [r0, #0]
}
    6b54:	4802      	ldr	r0, [pc, #8]	; (6b60 <nrf_gpio_pin_port_decode+0x18>)
    6b56:	bf18      	it	ne
    6b58:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    6b5c:	4770      	bx	lr
    6b5e:	bf00      	nop
    6b60:	50000300 	.word	0x50000300

00006b64 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    6b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6b66:	460c      	mov	r4, r1
    6b68:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
    6b6a:	f004 fbf4 	bl	b356 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    6b6e:	4608      	mov	r0, r1
    6b70:	f004 fbf1 	bl	b356 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6b74:	a801      	add	r0, sp, #4
    6b76:	9601      	str	r6, [sp, #4]
    6b78:	f7ff ffe6 	bl	6b48 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    6b7c:	9b01      	ldr	r3, [sp, #4]
    6b7e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6b82:	f240 610d 	movw	r1, #1549	; 0x60d
    6b86:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6b8a:	a801      	add	r0, sp, #4
    6b8c:	9401      	str	r4, [sp, #4]
    6b8e:	f7ff ffdb 	bl	6b48 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    6b92:	9b01      	ldr	r3, [sp, #4]
    6b94:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    6b98:	2509      	movs	r5, #9
    6b9a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    6b9e:	2004      	movs	r0, #4
    6ba0:	f004 fb81 	bl	b2a6 <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6ba4:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6ba6:	a801      	add	r0, sp, #4
    6ba8:	9401      	str	r4, [sp, #4]
    6baa:	f7ff ffcd 	bl	6b48 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6bae:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    6bb0:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6bb4:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    6bb6:	07db      	lsls	r3, r3, #31
    6bb8:	d415      	bmi.n	6be6 <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6bba:	a801      	add	r0, sp, #4
    6bbc:	9601      	str	r6, [sp, #4]
    6bbe:	f7ff ffc3 	bl	6b48 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6bc2:	9b01      	ldr	r3, [sp, #4]
    6bc4:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    6bc8:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    6bcc:	2004      	movs	r0, #4
    6bce:	f004 fb6a 	bl	b2a6 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    6bd2:	4630      	mov	r0, r6
    6bd4:	f004 fbbf 	bl	b356 <nrf_gpio_pin_set>
            NRFX_DELAY_US(4);
    6bd8:	3d01      	subs	r5, #1
    6bda:	2004      	movs	r0, #4
    6bdc:	f004 fb63 	bl	b2a6 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    6be0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    6be4:	d1df      	bne.n	6ba6 <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6be6:	a801      	add	r0, sp, #4
    6be8:	9401      	str	r4, [sp, #4]
    6bea:	f7ff ffad 	bl	6b48 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6bee:	9a01      	ldr	r2, [sp, #4]
    6bf0:	2301      	movs	r3, #1
    6bf2:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    6bf4:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    6bf8:	2004      	movs	r0, #4
    6bfa:	f004 fb54 	bl	b2a6 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    6bfe:	4620      	mov	r0, r4
    6c00:	f004 fba9 	bl	b356 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    6c04:	2004      	movs	r0, #4
    6c06:	f004 fb4e 	bl	b2a6 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6c0a:	a801      	add	r0, sp, #4
    6c0c:	9401      	str	r4, [sp, #4]
    6c0e:	f7ff ff9b 	bl	6b48 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6c12:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    6c14:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    6c18:	4803      	ldr	r0, [pc, #12]	; (6c28 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6c1a:	40d3      	lsrs	r3, r2
    6c1c:	f003 0301 	and.w	r3, r3, #1
    6c20:	1ac0      	subs	r0, r0, r3
    6c22:	b003      	add	sp, #12
    6c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c26:	bf00      	nop
    6c28:	0bad0001 	.word	0x0bad0001

00006c2c <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
    6c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    6c30:	7906      	ldrb	r6, [r0, #4]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    6c32:	4d2b      	ldr	r5, [pc, #172]	; (6ce0 <nrfx_twim_init+0xb4>)
    6c34:	f04f 0c34 	mov.w	ip, #52	; 0x34
    6c38:	fb0c fc06 	mul.w	ip, ip, r6
    6c3c:	eb05 040c 	add.w	r4, r5, ip
    6c40:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
    6c44:	2f00      	cmp	r7, #0
    6c46:	d149      	bne.n	6cdc <nrfx_twim_init+0xb0>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    6c48:	6800      	ldr	r0, [r0, #0]
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    6c4a:	6063      	str	r3, [r4, #4]
    p_cb->int_mask        = 0;
    p_cb->repeated        = false;
    p_cb->busy            = false;
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    6c4c:	7b4b      	ldrb	r3, [r1, #13]
    6c4e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    6c52:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->handler         = event_handler;
    6c54:	f845 200c 	str.w	r2, [r5, ip]
    p_cb->int_mask        = 0;
    6c58:	60a7      	str	r7, [r4, #8]
    p_cb->repeated        = false;
    6c5a:	f891 c00f 	ldrb.w	ip, [r1, #15]
    6c5e:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
    6c62:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    6c66:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    6c6a:	b1cb      	cbz	r3, 6ca0 <nrfx_twim_init+0x74>
    6c6c:	f1bc 0f00 	cmp.w	ip, #0
    6c70:	d105      	bne.n	6c7e <nrfx_twim_init+0x52>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    6c72:	e9d1 4300 	ldrd	r4, r3, [r1]

NRF_STATIC_INLINE void nrf_twim_pins_set(NRF_TWIM_Type * p_reg,
                                         uint32_t scl_pin,
                                         uint32_t sda_pin)
{
    p_reg->PSEL.SCL = scl_pin;
    6c76:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    6c7a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
    6c7e:	688b      	ldr	r3, [r1, #8]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    6c80:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524

    if (p_cb->handler)
    6c84:	b11a      	cbz	r2, 6c8e <nrfx_twim_init+0x62>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    6c86:	f340 3007 	sbfx	r0, r0, #12, #8
    6c8a:	f7fd faa5 	bl	41d8 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    6c8e:	2334      	movs	r3, #52	; 0x34
    6c90:	fb03 5506 	mla	r5, r3, r6, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    6c94:	4813      	ldr	r0, [pc, #76]	; (6ce4 <nrfx_twim_init+0xb8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    6c96:	2301      	movs	r3, #1
    6c98:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    6c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TWIM_PIN_INIT(p_config->scl, drive);
    6ca0:	680c      	ldr	r4, [r1, #0]
        case 1: return NRF_P1;
    6ca2:	4b11      	ldr	r3, [pc, #68]	; (6ce8 <nrfx_twim_init+0xbc>)
    *p_pin = pin_number & 0x1F;
    6ca4:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
    6ca8:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
    6caa:	2c01      	cmp	r4, #1
    6cac:	bf18      	it	ne
    6cae:	f04f 48a0 	movne.w	r8, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    6cb2:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
        case 1: return NRF_P1;
    6cb6:	bf08      	it	eq
    6cb8:	4698      	moveq	r8, r3
    reg->PIN_CNF[pin_number] = cnf;
    6cba:	f240 6e0c 	movw	lr, #1548	; 0x60c
    6cbe:	f848 e024 	str.w	lr, [r8, r4, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
    6cc2:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
    6cc4:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
    6cc8:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
    6cca:	2c01      	cmp	r4, #1
    6ccc:	bf18      	it	ne
    6cce:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    6cd2:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
    6cd6:	f843 e024 	str.w	lr, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
    6cda:	e7c7      	b.n	6c6c <nrfx_twim_init+0x40>
        return err_code;
    6cdc:	4803      	ldr	r0, [pc, #12]	; (6cec <nrfx_twim_init+0xc0>)
    6cde:	e7dd      	b.n	6c9c <nrfx_twim_init+0x70>
    6ce0:	20001150 	.word	0x20001150
    6ce4:	0bad0000 	.word	0x0bad0000
    6ce8:	50000300 	.word	0x50000300
    6cec:	0bad0005 	.word	0x0bad0005

00006cf0 <nrfx_twim_enable>:
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
    6cf0:	6802      	ldr	r2, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    6cf2:	7903      	ldrb	r3, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    6cf4:	2106      	movs	r1, #6
    6cf6:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    6cfa:	4a04      	ldr	r2, [pc, #16]	; (6d0c <nrfx_twim_enable+0x1c>)
    6cfc:	2134      	movs	r1, #52	; 0x34
    6cfe:	fb01 2303 	mla	r3, r1, r3, r2
    6d02:	2202      	movs	r2, #2
    6d04:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
    6d08:	4770      	bx	lr
    6d0a:	bf00      	nop
    6d0c:	20001150 	.word	0x20001150

00006d10 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    6d10:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
    6d12:	490c      	ldr	r1, [pc, #48]	; (6d44 <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    6d14:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
    6d16:	2034      	movs	r0, #52	; 0x34
    6d18:	fb00 1303 	mla	r3, r0, r3, r1
    6d1c:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    6d1e:	480a      	ldr	r0, [pc, #40]	; (6d48 <nrfx_twim_disable+0x38>)
    6d20:	6099      	str	r1, [r3, #8]
    6d22:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    6d26:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    6d2a:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
    6d2e:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    6d32:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    6d36:	2201      	movs	r2, #1
    6d38:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
    6d3c:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
    6d40:	4770      	bx	lr
    6d42:	bf00      	nop
    6d44:	20001150 	.word	0x20001150
    6d48:	019c0202 	.word	0x019c0202

00006d4c <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    6d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
    6d50:	4fb4      	ldr	r7, [pc, #720]	; (7024 <nrfx_twim_xfer+0x2d8>)
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    6d52:	f890 e004 	ldrb.w	lr, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    6d56:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
    6d58:	2334      	movs	r3, #52	; 0x34
    6d5a:	fb03 730e 	mla	r3, r3, lr, r7
{
    6d5e:	4694      	mov	ip, r2
    p_cb->error = false;
    6d60:	2200      	movs	r2, #0
    6d62:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    6d66:	684b      	ldr	r3, [r1, #4]
{
    6d68:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    6d6a:	b14b      	cbz	r3, 6d80 <nrfx_twim_xfer+0x34>
    6d6c:	68cb      	ldr	r3, [r1, #12]
    6d6e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    6d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    6d76:	d003      	beq.n	6d80 <nrfx_twim_xfer+0x34>
        return err_code;
    6d78:	4eab      	ldr	r6, [pc, #684]	; (7028 <nrfx_twim_xfer+0x2dc>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    6d7a:	4630      	mov	r0, r6
    6d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
    6d80:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
    6d82:	4baa      	ldr	r3, [pc, #680]	; (702c <nrfx_twim_xfer+0x2e0>)
    6d84:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    6d88:	fb06 760e 	mla	r6, r6, lr, r7
    6d8c:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
    6d90:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    6d94:	b123      	cbz	r3, 6da0 <nrfx_twim_xfer+0x54>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    6d96:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
    6d98:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
    6d9c:	4ea4      	ldr	r6, [pc, #656]	; (7030 <nrfx_twim_xfer+0x2e4>)
    6d9e:	e7ec      	b.n	6d7a <nrfx_twim_xfer+0x2e>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    6da0:	f01c 0f14 	tst.w	ip, #20
    6da4:	bf0c      	ite	eq
    6da6:	2301      	moveq	r3, #1
    6da8:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    6daa:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    6dae:	46a9      	mov	r9, r5
    6db0:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
    6db4:	f106 080c 	add.w	r8, r6, #12
    6db8:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    6dbc:	f8d9 3000 	ldr.w	r3, [r9]
    6dc0:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    6dc4:	f3cc 1300 	ubfx	r3, ip, #4, #1
    6dc8:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
    6dcc:	f8c6 c020 	str.w	ip, [r6, #32]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
    6dd0:	786b      	ldrb	r3, [r5, #1]
    6dd2:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6dd6:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
    6dda:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    6dde:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
    6de2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    6de6:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
    6dea:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    6dee:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
    6df2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    6df6:	f01c 0301 	ands.w	r3, ip, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    6dfa:	bf18      	it	ne
    6dfc:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    6dfe:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    6e02:	f01c 0302 	ands.w	r3, ip, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    6e06:	bf18      	it	ne
    6e08:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    6e0a:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    6e0e:	782b      	ldrb	r3, [r5, #0]
    6e10:	2b03      	cmp	r3, #3
    6e12:	f200 80b5 	bhi.w	6f80 <nrfx_twim_xfer+0x234>
    6e16:	e8df f003 	tbb	[pc, r3]
    6e1a:	a084      	.short	0xa084
    6e1c:	0269      	.short	0x0269
    6e1e:	692a      	ldr	r2, [r5, #16]
    6e20:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    6e24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    6e28:	d1a6      	bne.n	6d78 <nrfx_twim_xfer+0x2c>
    p_reg->SHORTS = mask;
    6e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
    6e2e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6e32:	68e9      	ldr	r1, [r5, #12]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    6e34:	686b      	ldr	r3, [r5, #4]
    6e36:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6e3a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6e3e:	2300      	movs	r3, #0
    6e40:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    6e44:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6e48:	2101      	movs	r1, #1
    6e4a:	6221      	str	r1, [r4, #32]
    6e4c:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6e4e:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    6e52:	2900      	cmp	r1, #0
    6e54:	d0fb      	beq.n	6e4e <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6e56:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    6e5a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    6e5e:	68ab      	ldr	r3, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6e60:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6e64:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    6e68:	2334      	movs	r3, #52	; 0x34
    6e6a:	fb03 730e 	mla	r3, r3, lr, r7
    6e6e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    6e72:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    6e74:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    6e76:	4e6f      	ldr	r6, [pc, #444]	; (7034 <nrfx_twim_xfer+0x2e8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    6e78:	f01c 0f08 	tst.w	ip, #8
    6e7c:	d107      	bne.n	6e8e <nrfx_twim_xfer+0x142>
    6e7e:	782a      	ldrb	r2, [r5, #0]
    6e80:	2a03      	cmp	r2, #3
    6e82:	d004      	beq.n	6e8e <nrfx_twim_xfer+0x142>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6e84:	2201      	movs	r2, #1
    6e86:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
    6e88:	686b      	ldr	r3, [r5, #4]
    6e8a:	b903      	cbnz	r3, 6e8e <nrfx_twim_xfer+0x142>
    6e8c:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
    6e8e:	2334      	movs	r3, #52	; 0x34
    6e90:	fb03 f30e 	mul.w	r3, r3, lr
    6e94:	18fa      	adds	r2, r7, r3
    6e96:	58fb      	ldr	r3, [r7, r3]
    6e98:	2b00      	cmp	r3, #0
    6e9a:	d174      	bne.n	6f86 <nrfx_twim_xfer+0x23a>
                transmission_finished = true;
    6e9c:	2501      	movs	r5, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6e9e:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    6ea2:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    6ea6:	2900      	cmp	r1, #0
    6ea8:	f040 8087 	bne.w	6fba <nrfx_twim_xfer+0x26e>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    6eac:	3a00      	subs	r2, #0
    6eae:	bf18      	it	ne
    6eb0:	2201      	movne	r2, #1
    6eb2:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    6eb6:	2900      	cmp	r1, #0
    6eb8:	f000 8085 	beq.w	6fc6 <nrfx_twim_xfer+0x27a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6ebc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    6ec0:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6ec4:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    return p_reg->SHORTS;
    6ec8:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    6ecc:	b110      	cbz	r0, 6ed4 <nrfx_twim_xfer+0x188>
    6ece:	f411 7f00 	tst.w	r1, #512	; 0x200
    6ed2:	d104      	bne.n	6ede <nrfx_twim_xfer+0x192>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6ed4:	6225      	str	r5, [r4, #32]
    6ed6:	6165      	str	r5, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    6ed8:	2800      	cmp	r0, #0
    6eda:	d0e0      	beq.n	6e9e <nrfx_twim_xfer+0x152>
                    transmission_finished = false;
    6edc:	2200      	movs	r2, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    6ede:	05c9      	lsls	r1, r1, #23
    6ee0:	d571      	bpl.n	6fc6 <nrfx_twim_xfer+0x27a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6ee2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    6ee6:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
        } while (!transmission_finished);
    6eea:	e7d8      	b.n	6e9e <nrfx_twim_xfer+0x152>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    6eec:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6eee:	68ea      	ldr	r2, [r5, #12]
    6ef0:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6ef4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    6ef8:	692b      	ldr	r3, [r5, #16]
    6efa:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    6efe:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    6f02:	f47f af39 	bne.w	6d78 <nrfx_twim_xfer+0x2c>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    6f06:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    6f08:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
    6f0c:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
    6f10:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    6f14:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    6f18:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    6f1a:	fb03 730e 	mla	r3, r3, lr, r7
    6f1e:	2202      	movs	r2, #2
    6f20:	e012      	b.n	6f48 <nrfx_twim_xfer+0x1fc>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    6f22:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6f24:	68ea      	ldr	r2, [r5, #12]
    6f26:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    6f2a:	f01c 0f20 	tst.w	ip, #32
    p_reg->TXD.MAXCNT = length;
    6f2e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    6f32:	f04f 0334 	mov.w	r3, #52	; 0x34
    6f36:	d00b      	beq.n	6f50 <nrfx_twim_xfer+0x204>
    p_reg->SHORTS = mask;
    6f38:	f44f 7280 	mov.w	r2, #256	; 0x100
    6f3c:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    6f40:	fb03 730e 	mla	r3, r3, lr, r7
    6f44:	f44f 2280 	mov.w	r2, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    6f48:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6f4a:	2301      	movs	r3, #1
    6f4c:	6223      	str	r3, [r4, #32]
    6f4e:	e791      	b.n	6e74 <nrfx_twim_xfer+0x128>
    p_reg->SHORTS = mask;
    6f50:	f44f 7200 	mov.w	r2, #512	; 0x200
    6f54:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    6f58:	e7df      	b.n	6f1a <nrfx_twim_xfer+0x1ce>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    6f5a:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    6f5c:	68ea      	ldr	r2, [r5, #12]
    6f5e:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    6f62:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    6f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    6f6a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    6f6e:	2334      	movs	r3, #52	; 0x34
    6f70:	fb03 730e 	mla	r3, r3, lr, r7
    6f74:	2202      	movs	r2, #2
    6f76:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6f78:	2301      	movs	r3, #1
    6f7a:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    6f7c:	2300      	movs	r3, #0
    6f7e:	e77a      	b.n	6e76 <nrfx_twim_xfer+0x12a>
    switch (p_xfer_desc->type)
    6f80:	4e2d      	ldr	r6, [pc, #180]	; (7038 <nrfx_twim_xfer+0x2ec>)
    6f82:	2308      	movs	r3, #8
    6f84:	e778      	b.n	6e78 <nrfx_twim_xfer+0x12c>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    6f86:	f01c 0f04 	tst.w	ip, #4
            p_cb->int_mask = 0;
    6f8a:	bf1c      	itt	ne
    6f8c:	2300      	movne	r3, #0
    6f8e:	6093      	strne	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    6f90:	f01c 0f40 	tst.w	ip, #64	; 0x40
    6f94:	d106      	bne.n	6fa4 <nrfx_twim_xfer+0x258>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    6f96:	2334      	movs	r3, #52	; 0x34
    6f98:	fb03 730e 	mla	r3, r3, lr, r7
    6f9c:	689a      	ldr	r2, [r3, #8]
    6f9e:	f042 0202 	orr.w	r2, r2, #2
    6fa2:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    6fa4:	2334      	movs	r3, #52	; 0x34
    6fa6:	fb03 770e 	mla	r7, r3, lr, r7
    6faa:	68bb      	ldr	r3, [r7, #8]
    6fac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    6fb0:	60bb      	str	r3, [r7, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    6fb2:	68bb      	ldr	r3, [r7, #8]
    p_reg->INTENSET = mask;
    6fb4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    6fb8:	e6df      	b.n	6d7a <nrfx_twim_xfer+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6fba:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    6fbe:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
                transmission_finished = true;
    6fc2:	2201      	movs	r2, #1
    6fc4:	e775      	b.n	6eb2 <nrfx_twim_xfer+0x166>
        } while (!transmission_finished);
    6fc6:	2a00      	cmp	r2, #0
    6fc8:	f43f af69 	beq.w	6e9e <nrfx_twim_xfer+0x152>
        p_cb->busy = false;
    6fcc:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
    6fce:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    6fd2:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    6fd6:	fb01 720e 	mla	r2, r1, lr, r7
    6fda:	2000      	movs	r0, #0
    6fdc:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
    6fe0:	b18b      	cbz	r3, 7006 <nrfx_twim_xfer+0x2ba>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    6fe2:	4a16      	ldr	r2, [pc, #88]	; (703c <nrfx_twim_xfer+0x2f0>)
    6fe4:	4e16      	ldr	r6, [pc, #88]	; (7040 <nrfx_twim_xfer+0x2f4>)
    6fe6:	f013 0f01 	tst.w	r3, #1
    6fea:	bf18      	it	ne
    6fec:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    6fee:	f013 0f02 	tst.w	r3, #2
    6ff2:	f102 0201 	add.w	r2, r2, #1
    6ff6:	bf18      	it	ne
    6ff8:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    6ffa:	f013 0f04 	tst.w	r3, #4
    6ffe:	4b11      	ldr	r3, [pc, #68]	; (7044 <nrfx_twim_xfer+0x2f8>)
    7000:	bf18      	it	ne
    7002:	461e      	movne	r6, r3
    7004:	e6b9      	b.n	6d7a <nrfx_twim_xfer+0x2e>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    7006:	f01c 0f40 	tst.w	ip, #64	; 0x40
    700a:	f47f aeb6 	bne.w	6d7a <nrfx_twim_xfer+0x2e>
                !xfer_completeness_check(p_twim, p_cb))
    700e:	fb0e 7101 	mla	r1, lr, r1, r7
    7012:	4620      	mov	r0, r4
    7014:	f004 f9ac 	bl	b370 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
    7018:	4b09      	ldr	r3, [pc, #36]	; (7040 <nrfx_twim_xfer+0x2f4>)
    701a:	2800      	cmp	r0, #0
    701c:	bf08      	it	eq
    701e:	461e      	moveq	r6, r3
    7020:	e6ab      	b.n	6d7a <nrfx_twim_xfer+0x2e>
    7022:	bf00      	nop
    7024:	20001150 	.word	0x20001150
    7028:	0bad000a 	.word	0x0bad000a
    702c:	019c0202 	.word	0x019c0202
    7030:	0bad000b 	.word	0x0bad000b
    7034:	0bad0000 	.word	0x0bad0000
    7038:	0bad0004 	.word	0x0bad0004
    703c:	0bae0000 	.word	0x0bae0000
    7040:	0bad0001 	.word	0x0bad0001
    7044:	0bae0002 	.word	0x0bae0002

00007048 <nrfx_twim_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    7048:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    704a:	4b5b      	ldr	r3, [pc, #364]	; (71b8 <nrfx_twim_0_irq_handler+0x170>)
    704c:	4c5b      	ldr	r4, [pc, #364]	; (71bc <nrfx_twim_0_irq_handler+0x174>)
    704e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    7052:	b087      	sub	sp, #28
    7054:	461d      	mov	r5, r3
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    7056:	b1fa      	cbz	r2, 7098 <nrfx_twim_0_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7058:	2200      	movs	r2, #0
    705a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    705e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7062:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    7066:	b9ba      	cbnz	r2, 7098 <nrfx_twim_0_irq_handler+0x50>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    7068:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    706a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    706e:	2202      	movs	r2, #2
    7070:	60a2      	str	r2, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    7072:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENSET = mask;
    7074:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7078:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    707c:	b11a      	cbz	r2, 7086 <nrfx_twim_0_irq_handler+0x3e>
    return p_reg->SHORTS;
    707e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    7082:	059e      	lsls	r6, r3, #22
    7084:	d403      	bmi.n	708e <nrfx_twim_0_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7086:	4b4c      	ldr	r3, [pc, #304]	; (71b8 <nrfx_twim_0_irq_handler+0x170>)
    7088:	2201      	movs	r2, #1
    708a:	621a      	str	r2, [r3, #32]
    708c:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
    708e:	2301      	movs	r3, #1
    7090:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
}
    7094:	b007      	add	sp, #28
    7096:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7098:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    709c:	2b00      	cmp	r3, #0
    709e:	d053      	beq.n	7148 <nrfx_twim_0_irq_handler+0x100>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    70a0:	2300      	movs	r3, #0
    70a2:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
    70a6:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    70aa:	6a23      	ldr	r3, [r4, #32]
    70ac:	065d      	lsls	r5, r3, #25
    70ae:	d40a      	bmi.n	70c6 <nrfx_twim_0_irq_handler+0x7e>
    70b0:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    70b4:	b93b      	cbnz	r3, 70c6 <nrfx_twim_0_irq_handler+0x7e>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    70b6:	4941      	ldr	r1, [pc, #260]	; (71bc <nrfx_twim_0_irq_handler+0x174>)
    70b8:	483f      	ldr	r0, [pc, #252]	; (71b8 <nrfx_twim_0_irq_handler+0x170>)
    70ba:	f004 f959 	bl	b370 <xfer_completeness_check>
    70be:	f080 0001 	eor.w	r0, r0, #1
    70c2:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    70c6:	6a23      	ldr	r3, [r4, #32]
    70c8:	f013 0704 	ands.w	r7, r3, #4
    70cc:	d121      	bne.n	7112 <nrfx_twim_0_irq_handler+0xca>
            event.xfer_desc = p_cb->xfer_desc;
    70ce:	4e3c      	ldr	r6, [pc, #240]	; (71c0 <nrfx_twim_0_irq_handler+0x178>)
    70d0:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
    70d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    70d6:	ad01      	add	r5, sp, #4
    70d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    70da:	6833      	ldr	r3, [r6, #0]
    70dc:	602b      	str	r3, [r5, #0]
    70de:	4b36      	ldr	r3, [pc, #216]	; (71b8 <nrfx_twim_0_irq_handler+0x170>)
    70e0:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
    70e4:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    70e8:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
    70ec:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
    70f0:	f1bc 0f00 	cmp.w	ip, #0
    70f4:	d002      	beq.n	70fc <nrfx_twim_0_irq_handler+0xb4>
    70f6:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    70fa:	b152      	cbz	r2, 7112 <nrfx_twim_0_irq_handler+0xca>
    p_reg->SHORTS = mask;
    70fc:	2200      	movs	r2, #0
    70fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
    7102:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    7104:	4a2f      	ldr	r2, [pc, #188]	; (71c4 <nrfx_twim_0_irq_handler+0x17c>)
    7106:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    710a:	4b2f      	ldr	r3, [pc, #188]	; (71c8 <nrfx_twim_0_irq_handler+0x180>)
    710c:	2208      	movs	r2, #8
    710e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
    7112:	4a29      	ldr	r2, [pc, #164]	; (71b8 <nrfx_twim_0_irq_handler+0x170>)
    7114:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    7118:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    711c:	0798      	lsls	r0, r3, #30
    711e:	d53c      	bpl.n	719a <nrfx_twim_0_irq_handler+0x152>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    7120:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
    7122:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    7126:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    712a:	b90b      	cbnz	r3, 7130 <nrfx_twim_0_irq_handler+0xe8>
        p_cb->busy = false;
    712c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    7130:	6a23      	ldr	r3, [r4, #32]
    7132:	075b      	lsls	r3, r3, #29
    7134:	d503      	bpl.n	713e <nrfx_twim_0_irq_handler+0xf6>
    7136:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    713a:	2b00      	cmp	r3, #0
    713c:	d0aa      	beq.n	7094 <nrfx_twim_0_irq_handler+0x4c>
        p_cb->handler(&event, p_cb->p_context);
    713e:	e9d4 3100 	ldrd	r3, r1, [r4]
    7142:	4668      	mov	r0, sp
    7144:	4798      	blx	r3
}
    7146:	e7a5      	b.n	7094 <nrfx_twim_0_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7148:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
    714c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    7150:	7b23      	ldrb	r3, [r4, #12]
    7152:	b983      	cbnz	r3, 7176 <nrfx_twim_0_irq_handler+0x12e>
            event.xfer_desc = p_cb->xfer_desc;
    7154:	4f1a      	ldr	r7, [pc, #104]	; (71c0 <nrfx_twim_0_irq_handler+0x178>)
    7156:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    7158:	ae01      	add	r6, sp, #4
    715a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    715c:	683b      	ldr	r3, [r7, #0]
    715e:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    7160:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    7164:	2b00      	cmp	r3, #0
    7166:	d1d4      	bne.n	7112 <nrfx_twim_0_irq_handler+0xca>
    p_reg->SHORTS = mask;
    7168:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
    716c:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    716e:	4b15      	ldr	r3, [pc, #84]	; (71c4 <nrfx_twim_0_irq_handler+0x17c>)
    7170:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    7174:	e7c9      	b.n	710a <nrfx_twim_0_irq_handler+0xc2>
    p_reg->SHORTS = mask;
    7176:	f44f 7300 	mov.w	r3, #512	; 0x200
    717a:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    717e:	f240 2302 	movw	r3, #514	; 0x202
    7182:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    7184:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    7188:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    718c:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    718e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7192:	2301      	movs	r3, #1
    7194:	60ab      	str	r3, [r5, #8]
    7196:	622b      	str	r3, [r5, #32]
            return;
    7198:	e77c      	b.n	7094 <nrfx_twim_0_irq_handler+0x4c>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    719a:	0759      	lsls	r1, r3, #29
    719c:	d501      	bpl.n	71a2 <nrfx_twim_0_irq_handler+0x15a>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
    719e:	2302      	movs	r3, #2
    71a0:	e7bf      	b.n	7122 <nrfx_twim_0_irq_handler+0xda>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    71a2:	07da      	lsls	r2, r3, #31
    71a4:	d501      	bpl.n	71aa <nrfx_twim_0_irq_handler+0x162>
        event.type = NRFX_TWIM_EVT_OVERRUN;
    71a6:	2303      	movs	r3, #3
    71a8:	e7bb      	b.n	7122 <nrfx_twim_0_irq_handler+0xda>
    else if (p_cb->error)
    71aa:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    71ae:	2b00      	cmp	r3, #0
    71b0:	d0b7      	beq.n	7122 <nrfx_twim_0_irq_handler+0xda>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
    71b2:	2304      	movs	r3, #4
    71b4:	e7b5      	b.n	7122 <nrfx_twim_0_irq_handler+0xda>
    71b6:	bf00      	nop
    71b8:	40003000 	.word	0x40003000
    71bc:	20001150 	.word	0x20001150
    71c0:	2000115c 	.word	0x2000115c
    71c4:	019c0202 	.word	0x019c0202
    71c8:	e000e100 	.word	0xe000e100

000071cc <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    71cc:	4b03      	ldr	r3, [pc, #12]	; (71dc <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
    71ce:	6818      	ldr	r0, [r3, #0]
}
    71d0:	f1a0 0308 	sub.w	r3, r0, #8
    71d4:	4258      	negs	r0, r3
    71d6:	4158      	adcs	r0, r3
    71d8:	4770      	bx	lr
    71da:	bf00      	nop
    71dc:	10000130 	.word	0x10000130

000071e0 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    71e0:	4b06      	ldr	r3, [pc, #24]	; (71fc <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
    71e2:	681b      	ldr	r3, [r3, #0]
    71e4:	2b08      	cmp	r3, #8
    71e6:	d106      	bne.n	71f6 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    71e8:	4b05      	ldr	r3, [pc, #20]	; (7200 <nrf52_errata_103+0x20>)
    71ea:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    71ec:	2b05      	cmp	r3, #5
    71ee:	d802      	bhi.n	71f6 <nrf52_errata_103+0x16>
    71f0:	4a04      	ldr	r2, [pc, #16]	; (7204 <nrf52_errata_103+0x24>)
    71f2:	5cd0      	ldrb	r0, [r2, r3]
    71f4:	4770      	bx	lr
        return false;
    71f6:	2000      	movs	r0, #0
}
    71f8:	4770      	bx	lr
    71fa:	bf00      	nop
    71fc:	10000130 	.word	0x10000130
    7200:	10000134 	.word	0x10000134
    7204:	0000dcaa 	.word	0x0000dcaa

00007208 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    7208:	4a02      	ldr	r2, [pc, #8]	; (7214 <nvmc_wait+0xc>)
    720a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    720e:	2b00      	cmp	r3, #0
    7210:	d0fb      	beq.n	720a <nvmc_wait+0x2>
}
    7212:	4770      	bx	lr
    7214:	4001e000 	.word	0x4001e000

00007218 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    7218:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    721a:	f7ff ffd7 	bl	71cc <nrf52_errata_136>
    721e:	b140      	cbz	r0, 7232 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    7220:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7224:	2200      	movs	r2, #0
    7226:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    722a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    722e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    7232:	f7ff ffcb 	bl	71cc <nrf52_errata_136>
    7236:	2800      	cmp	r0, #0
    7238:	d046      	beq.n	72c8 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    723a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    723e:	4b5b      	ldr	r3, [pc, #364]	; (73ac <SystemInit+0x194>)
    7240:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    7244:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    7248:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    724c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    7250:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    7254:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    7258:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    725c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    7260:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    7264:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    7268:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    726c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    7270:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    7274:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    7278:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    727c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    7280:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    7284:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    7288:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    728c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    7290:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    7294:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    7298:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    729c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    72a0:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    72a4:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    72a8:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    72ac:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    72b0:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    72b4:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    72b8:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    72bc:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    72c0:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    72c4:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    72c8:	f7ff ff8a 	bl	71e0 <nrf52_errata_103>
    72cc:	b110      	cbz	r0, 72d4 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    72ce:	4b38      	ldr	r3, [pc, #224]	; (73b0 <SystemInit+0x198>)
    72d0:	4a38      	ldr	r2, [pc, #224]	; (73b4 <SystemInit+0x19c>)
    72d2:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    72d4:	f7ff ff84 	bl	71e0 <nrf52_errata_103>
    72d8:	b118      	cbz	r0, 72e2 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    72da:	4b37      	ldr	r3, [pc, #220]	; (73b8 <SystemInit+0x1a0>)
    72dc:	22fb      	movs	r2, #251	; 0xfb
    72de:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    72e2:	f7ff ff7d 	bl	71e0 <nrf52_errata_103>
    72e6:	b148      	cbz	r0, 72fc <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    72e8:	4934      	ldr	r1, [pc, #208]	; (73bc <SystemInit+0x1a4>)
    72ea:	4b35      	ldr	r3, [pc, #212]	; (73c0 <SystemInit+0x1a8>)
    72ec:	680a      	ldr	r2, [r1, #0]
    72ee:	681b      	ldr	r3, [r3, #0]
    72f0:	f022 020f 	bic.w	r2, r2, #15
    72f4:	f003 030f 	and.w	r3, r3, #15
    72f8:	4313      	orrs	r3, r2
    72fa:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    72fc:	f7ff ff70 	bl	71e0 <nrf52_errata_103>
    7300:	b118      	cbz	r0, 730a <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    7302:	4b30      	ldr	r3, [pc, #192]	; (73c4 <SystemInit+0x1ac>)
    7304:	f44f 7200 	mov.w	r2, #512	; 0x200
    7308:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    730a:	f7ff ff5f 	bl	71cc <nrf52_errata_136>
    730e:	b148      	cbz	r0, 7324 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    7310:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7314:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    7318:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    731a:	bf44      	itt	mi
    731c:	f06f 0201 	mvnmi.w	r2, #1
    7320:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7324:	4b28      	ldr	r3, [pc, #160]	; (73c8 <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    7326:	681b      	ldr	r3, [r3, #0]
    7328:	2b08      	cmp	r3, #8
    732a:	d10e      	bne.n	734a <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    732c:	4b27      	ldr	r3, [pc, #156]	; (73cc <SystemInit+0x1b4>)
    732e:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    7330:	2b05      	cmp	r3, #5
    7332:	d802      	bhi.n	733a <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    7334:	4a26      	ldr	r2, [pc, #152]	; (73d0 <SystemInit+0x1b8>)
    7336:	5cd3      	ldrb	r3, [r2, r3]
    7338:	b13b      	cbz	r3, 734a <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    733a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    733e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    7342:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7346:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    734a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    734e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    7352:	2a00      	cmp	r2, #0
    7354:	db03      	blt.n	735e <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    7356:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    735a:	2b00      	cmp	r3, #0
    735c:	da22      	bge.n	73a4 <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    735e:	491d      	ldr	r1, [pc, #116]	; (73d4 <SystemInit+0x1bc>)
    7360:	2301      	movs	r3, #1
    7362:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    7366:	f7ff ff4f 	bl	7208 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    736a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    736e:	2412      	movs	r4, #18
    7370:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    7374:	f7ff ff48 	bl	7208 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    7378:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    737c:	f7ff ff44 	bl	7208 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    7380:	2300      	movs	r3, #0
    7382:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    7386:	f7ff ff3f 	bl	7208 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    738a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    738e:	4912      	ldr	r1, [pc, #72]	; (73d8 <SystemInit+0x1c0>)
    7390:	4b12      	ldr	r3, [pc, #72]	; (73dc <SystemInit+0x1c4>)
    7392:	68ca      	ldr	r2, [r1, #12]
    7394:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    7398:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    739a:	60cb      	str	r3, [r1, #12]
    739c:	f3bf 8f4f 	dsb	sy
    __NOP();
    73a0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    73a2:	e7fd      	b.n	73a0 <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    73a4:	4b0e      	ldr	r3, [pc, #56]	; (73e0 <SystemInit+0x1c8>)
    73a6:	4a0f      	ldr	r2, [pc, #60]	; (73e4 <SystemInit+0x1cc>)
    73a8:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    73aa:	bd10      	pop	{r4, pc}
    73ac:	4000c000 	.word	0x4000c000
    73b0:	4000568c 	.word	0x4000568c
    73b4:	00038148 	.word	0x00038148
    73b8:	4000f000 	.word	0x4000f000
    73bc:	40000ee4 	.word	0x40000ee4
    73c0:	10000258 	.word	0x10000258
    73c4:	40029640 	.word	0x40029640
    73c8:	10000130 	.word	0x10000130
    73cc:	10000134 	.word	0x10000134
    73d0:	0000dca4 	.word	0x0000dca4
    73d4:	4001e000 	.word	0x4001e000
    73d8:	e000ed00 	.word	0xe000ed00
    73dc:	05fa0004 	.word	0x05fa0004
    73e0:	2000029c 	.word	0x2000029c
    73e4:	03d09000 	.word	0x03d09000

000073e8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    73e8:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    73ea:	4c14      	ldr	r4, [pc, #80]	; (743c <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    73ec:	4a14      	ldr	r2, [pc, #80]	; (7440 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    73ee:	4915      	ldr	r1, [pc, #84]	; (7444 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    73f0:	2303      	movs	r3, #3
    73f2:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    73f4:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    73f6:	4b14      	ldr	r3, [pc, #80]	; (7448 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    73f8:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    73fa:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    73fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    7400:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    7402:	2300      	movs	r3, #0
    7404:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    7406:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    7408:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    740a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    740c:	4a0f      	ldr	r2, [pc, #60]	; (744c <_DoInit+0x64>)
    740e:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    7410:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    7412:	2210      	movs	r2, #16
    7414:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    7416:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    7418:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    741a:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    741c:	f003 f86d 	bl	a4fa <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    7420:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    7424:	490a      	ldr	r1, [pc, #40]	; (7450 <_DoInit+0x68>)
    7426:	4620      	mov	r0, r4
    7428:	f003 f867 	bl	a4fa <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    742c:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    7430:	2320      	movs	r3, #32
    7432:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    7434:	f3bf 8f5f 	dmb	sy
}
    7438:	bd10      	pop	{r4, pc}
    743a:	bf00      	nop
    743c:	20001184 	.word	0x20001184
    7440:	0000dcb0 	.word	0x0000dcb0
    7444:	0000dcb9 	.word	0x0000dcb9
    7448:	2000130c 	.word	0x2000130c
    744c:	200012fc 	.word	0x200012fc
    7450:	0000dcbd 	.word	0x0000dcbd

00007454 <device_visitor>:

static int device_visitor(const device_handle_t *handles,
			   size_t handle_count,
			   device_visitor_callback_t visitor_cb,
			   void *context)
{
    7454:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t numdev = __device_end - __device_start;
    7458:	4e13      	ldr	r6, [pc, #76]	; (74a8 <device_visitor+0x54>)
    745a:	460f      	mov	r7, r1
    745c:	4619      	mov	r1, r3
    745e:	4b13      	ldr	r3, [pc, #76]	; (74ac <device_visitor+0x58>)
    7460:	4692      	mov	sl, r2
    7462:	eba3 0806 	sub.w	r8, r3, r6
    7466:	4a12      	ldr	r2, [pc, #72]	; (74b0 <device_visitor+0x5c>)
    7468:	ea4f 03e8 	mov.w	r3, r8, asr #3
    746c:	4681      	mov	r9, r0
    746e:	fb02 f803 	mul.w	r8, r2, r3
	/* Iterate over fixed devices */
	for (size_t i = 0; i < handle_count; ++i) {
    7472:	2500      	movs	r5, #0
		dev = &__device_start[dev_handle - 1];
    7474:	f04f 0b18 	mov.w	fp, #24
    7478:	42bd      	cmp	r5, r7
    747a:	d103      	bne.n	7484 <device_visitor+0x30>
		if (rc < 0) {
			return rc;
		}
	}

	return handle_count;
    747c:	4628      	mov	r0, r5
}
    747e:	b003      	add	sp, #12
    7480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		device_handle_t dh = handles[i];
    7484:	f939 4015 	ldrsh.w	r4, [r9, r5, lsl #1]
	if ((dev_handle > 0) && ((size_t)dev_handle <= numdev)) {
    7488:	2c00      	cmp	r4, #0
    748a:	dd0b      	ble.n	74a4 <device_visitor+0x50>
    748c:	45a0      	cmp	r8, r4
    748e:	d309      	bcc.n	74a4 <device_visitor+0x50>
		dev = &__device_start[dev_handle - 1];
    7490:	3c01      	subs	r4, #1
    7492:	fb0b 6004 	mla	r0, fp, r4, r6
		int rc = visitor_cb(rdev, context);
    7496:	9101      	str	r1, [sp, #4]
    7498:	47d0      	blx	sl
		if (rc < 0) {
    749a:	2800      	cmp	r0, #0
    749c:	dbef      	blt.n	747e <device_visitor+0x2a>
	for (size_t i = 0; i < handle_count; ++i) {
    749e:	9901      	ldr	r1, [sp, #4]
    74a0:	3501      	adds	r5, #1
    74a2:	e7e9      	b.n	7478 <device_visitor+0x24>
	const struct device *dev = NULL;
    74a4:	2000      	movs	r0, #0
    74a6:	e7f6      	b.n	7496 <device_visitor+0x42>
    74a8:	0000bb20 	.word	0x0000bb20
    74ac:	0000bbc8 	.word	0x0000bbc8
    74b0:	aaaaaaab 	.word	0xaaaaaaab

000074b4 <z_sys_init_run_level>:
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    74b4:	4b0e      	ldr	r3, [pc, #56]	; (74f0 <z_sys_init_run_level+0x3c>)
{
    74b6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    74b8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    74bc:	3001      	adds	r0, #1
    74be:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    74c2:	42a6      	cmp	r6, r4
    74c4:	d800      	bhi.n	74c8 <z_sys_init_run_level+0x14>
}
    74c6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    74c8:	e9d4 3500 	ldrd	r3, r5, [r4]
    74cc:	4628      	mov	r0, r5
    74ce:	4798      	blx	r3
		if (dev != NULL) {
    74d0:	b165      	cbz	r5, 74ec <z_sys_init_run_level+0x38>
			if (rc != 0) {
    74d2:	68eb      	ldr	r3, [r5, #12]
    74d4:	b130      	cbz	r0, 74e4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    74d6:	2800      	cmp	r0, #0
    74d8:	bfb8      	it	lt
    74da:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    74dc:	28ff      	cmp	r0, #255	; 0xff
    74de:	bfa8      	it	ge
    74e0:	20ff      	movge	r0, #255	; 0xff
    74e2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    74e4:	785a      	ldrb	r2, [r3, #1]
    74e6:	f042 0201 	orr.w	r2, r2, #1
    74ea:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    74ec:	3408      	adds	r4, #8
    74ee:	e7e8      	b.n	74c2 <z_sys_init_run_level+0xe>
    74f0:	0000c5c8 	.word	0x0000c5c8

000074f4 <z_device_get_all_static>:
	*devices = __device_start;
    74f4:	4a03      	ldr	r2, [pc, #12]	; (7504 <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
    74f6:	4b04      	ldr	r3, [pc, #16]	; (7508 <z_device_get_all_static+0x14>)
	*devices = __device_start;
    74f8:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
    74fa:	1a9b      	subs	r3, r3, r2
}
    74fc:	4803      	ldr	r0, [pc, #12]	; (750c <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
    74fe:	10db      	asrs	r3, r3, #3
}
    7500:	4358      	muls	r0, r3
    7502:	4770      	bx	lr
    7504:	0000bb20 	.word	0x0000bb20
    7508:	0000bbc8 	.word	0x0000bbc8
    750c:	aaaaaaab 	.word	0xaaaaaaab

00007510 <z_impl_device_get_binding>:
{
    7510:	b570      	push	{r4, r5, r6, lr}
	if ((name == NULL) || (name[0] == '\0')) {
    7512:	4605      	mov	r5, r0
    7514:	b910      	cbnz	r0, 751c <z_impl_device_get_binding+0xc>
		return NULL;
    7516:	2400      	movs	r4, #0
}
    7518:	4620      	mov	r0, r4
    751a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    751c:	7803      	ldrb	r3, [r0, #0]
    751e:	2b00      	cmp	r3, #0
    7520:	d0f9      	beq.n	7516 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    7522:	4a0f      	ldr	r2, [pc, #60]	; (7560 <z_impl_device_get_binding+0x50>)
    7524:	4c0f      	ldr	r4, [pc, #60]	; (7564 <z_impl_device_get_binding+0x54>)
    7526:	4616      	mov	r6, r2
    7528:	4294      	cmp	r4, r2
    752a:	d108      	bne.n	753e <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    752c:	4c0d      	ldr	r4, [pc, #52]	; (7564 <z_impl_device_get_binding+0x54>)
    752e:	42b4      	cmp	r4, r6
    7530:	d0f1      	beq.n	7516 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    7532:	4620      	mov	r0, r4
    7534:	f003 ff54 	bl	b3e0 <z_device_ready>
    7538:	b950      	cbnz	r0, 7550 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    753a:	3418      	adds	r4, #24
    753c:	e7f7      	b.n	752e <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    753e:	4620      	mov	r0, r4
    7540:	f003 ff4e 	bl	b3e0 <z_device_ready>
    7544:	b110      	cbz	r0, 754c <z_impl_device_get_binding+0x3c>
    7546:	6823      	ldr	r3, [r4, #0]
    7548:	42ab      	cmp	r3, r5
    754a:	d0e5      	beq.n	7518 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    754c:	3418      	adds	r4, #24
    754e:	e7eb      	b.n	7528 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    7550:	6821      	ldr	r1, [r4, #0]
    7552:	4628      	mov	r0, r5
    7554:	f003 f80c 	bl	a570 <strcmp>
    7558:	2800      	cmp	r0, #0
    755a:	d1ee      	bne.n	753a <z_impl_device_get_binding+0x2a>
    755c:	e7dc      	b.n	7518 <z_impl_device_get_binding+0x8>
    755e:	bf00      	nop
    7560:	0000bbc8 	.word	0x0000bbc8
    7564:	0000bb20 	.word	0x0000bb20

00007568 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    7568:	4b01      	ldr	r3, [pc, #4]	; (7570 <z_impl_z_errno+0x8>)
    756a:	6898      	ldr	r0, [r3, #8]
}
    756c:	3098      	adds	r0, #152	; 0x98
    756e:	4770      	bx	lr
    7570:	2000122c 	.word	0x2000122c

00007574 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    7574:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    7576:	4c09      	ldr	r4, [pc, #36]	; (759c <idle+0x28>)
	__asm__ volatile(
    7578:	f04f 0220 	mov.w	r2, #32
    757c:	f3ef 8311 	mrs	r3, BASEPRI
    7580:	f382 8812 	msr	BASEPRI_MAX, r2
    7584:	f3bf 8f6f 	isb	sy
    7588:	f004 fa2b 	bl	b9e2 <z_get_next_timeout_expiry>
    758c:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    758e:	f7fb f92b 	bl	27e8 <pm_system_suspend>
    7592:	2800      	cmp	r0, #0
    7594:	d1f0      	bne.n	7578 <idle+0x4>
	arch_cpu_idle();
    7596:	f7fc fda7 	bl	40e8 <arch_cpu_idle>
}
    759a:	e7ed      	b.n	7578 <idle+0x4>
    759c:	2000122c 	.word	0x2000122c

000075a0 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    75a0:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
    75a2:	4b15      	ldr	r3, [pc, #84]	; (75f8 <init_idle_thread+0x58>)
	k_thread_stack_t *stack = z_idle_stacks[i];

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    75a4:	4a15      	ldr	r2, [pc, #84]	; (75fc <init_idle_thread+0x5c>)
{
    75a6:	b088      	sub	sp, #32
	snprintk(tname, 8, "idle %02d", i);
    75a8:	ae06      	add	r6, sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    75aa:	25b8      	movs	r5, #184	; 0xb8
    75ac:	fb05 3500 	mla	r5, r5, r0, r3
{
    75b0:	4604      	mov	r4, r0
	snprintk(tname, 8, "idle %02d", i);
    75b2:	4603      	mov	r3, r0
    75b4:	2108      	movs	r1, #8
    75b6:	4630      	mov	r0, r6
    75b8:	f001 ff3c 	bl	9434 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    75bc:	230f      	movs	r3, #15
    75be:	2201      	movs	r2, #1
    75c0:	e9cd 3203 	strd	r3, r2, [sp, #12]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    75c4:	4a0e      	ldr	r2, [pc, #56]	; (7600 <init_idle_thread+0x60>)
	z_setup_new_thread(thread, stack,
    75c6:	490f      	ldr	r1, [pc, #60]	; (7604 <init_idle_thread+0x64>)
    75c8:	9605      	str	r6, [sp, #20]
    75ca:	2300      	movs	r3, #0
    75cc:	e9cd 3301 	strd	r3, r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    75d0:	2318      	movs	r3, #24
    75d2:	fb03 2304 	mla	r3, r3, r4, r2
	z_setup_new_thread(thread, stack,
    75d6:	f44f 70b0 	mov.w	r0, #352	; 0x160
    75da:	9300      	str	r3, [sp, #0]
    75dc:	fb00 1104 	mla	r1, r0, r4, r1
    75e0:	4b09      	ldr	r3, [pc, #36]	; (7608 <init_idle_thread+0x68>)
    75e2:	f44f 72a0 	mov.w	r2, #320	; 0x140
    75e6:	4628      	mov	r0, r5
    75e8:	f000 feb0 	bl	834c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    75ec:	7b6b      	ldrb	r3, [r5, #13]
    75ee:	f023 0304 	bic.w	r3, r3, #4
    75f2:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    75f4:	b008      	add	sp, #32
    75f6:	bd70      	pop	{r4, r5, r6, pc}
    75f8:	20000468 	.word	0x20000468
    75fc:	0000dcc4 	.word	0x0000dcc4
    7600:	2000122c 	.word	0x2000122c
    7604:	20002520 	.word	0x20002520
    7608:	00007575 	.word	0x00007575

0000760c <bg_thread_main>:
{
    760c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    760e:	4b0a      	ldr	r3, [pc, #40]	; (7638 <bg_thread_main+0x2c>)
    7610:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    7612:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    7614:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    7616:	f7ff ff4d 	bl	74b4 <z_sys_init_run_level>
	boot_banner();
    761a:	f001 fa2b 	bl	8a74 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    761e:	2003      	movs	r0, #3
    7620:	f7ff ff48 	bl	74b4 <z_sys_init_run_level>
	z_init_static_threads();
    7624:	f000 ff26 	bl	8474 <z_init_static_threads>
	main();
    7628:	f7f9 fbb4 	bl	d94 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    762c:	4a03      	ldr	r2, [pc, #12]	; (763c <bg_thread_main+0x30>)
    762e:	7b13      	ldrb	r3, [r2, #12]
    7630:	f023 0301 	bic.w	r3, r3, #1
    7634:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    7636:	bd08      	pop	{r3, pc}
    7638:	2000170c 	.word	0x2000170c
    763c:	20000520 	.word	0x20000520

00007640 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    7640:	4802      	ldr	r0, [pc, #8]	; (764c <z_bss_zero+0xc>)
    7642:	4a03      	ldr	r2, [pc, #12]	; (7650 <z_bss_zero+0x10>)
    7644:	2100      	movs	r1, #0
    7646:	1a12      	subs	r2, r2, r0
    7648:	f002 bfdf 	b.w	a60a <memset>
    764c:	20000380 	.word	0x20000380
    7650:	200018cc 	.word	0x200018cc

00007654 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    7654:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    7656:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 7730 <z_cstart+0xdc>
    765a:	b0b4      	sub	sp, #208	; 0xd0
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    765c:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    7660:	4d2d      	ldr	r5, [pc, #180]	; (7718 <z_cstart+0xc4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    7662:	4e2e      	ldr	r6, [pc, #184]	; (771c <z_cstart+0xc8>)
    7664:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7666:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 7734 <z_cstart+0xe0>
    766a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    766e:	2400      	movs	r4, #0
    7670:	616b      	str	r3, [r5, #20]
    7672:	23e0      	movs	r3, #224	; 0xe0
    7674:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    7678:	77ec      	strb	r4, [r5, #31]
    767a:	762c      	strb	r4, [r5, #24]
    767c:	766c      	strb	r4, [r5, #25]
    767e:	76ac      	strb	r4, [r5, #26]
    7680:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    7684:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7686:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    768a:	626b      	str	r3, [r5, #36]	; 0x24
    768c:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    7690:	f7fc ff92 	bl	45b8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    7694:	f7fc fd22 	bl	40dc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    7698:	f04f 33ff 	mov.w	r3, #4294967295
    769c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    769e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    76a0:	f7fd f882 	bl	47a8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    76a4:	f7fc fff0 	bl	4688 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    76a8:	f240 1301 	movw	r3, #257	; 0x101
    76ac:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    76b0:	ab06      	add	r3, sp, #24
    76b2:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    76b4:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    76b8:	f003 fe91 	bl	b3de <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    76bc:	4620      	mov	r0, r4
    76be:	f7ff fef9 	bl	74b4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    76c2:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    76c4:	4d16      	ldr	r5, [pc, #88]	; (7720 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    76c6:	f7ff fef5 	bl	74b4 <z_sys_init_run_level>
	z_sched_init();
    76ca:	f000 fc21 	bl	7f10 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    76ce:	4b15      	ldr	r3, [pc, #84]	; (7724 <z_cstart+0xd0>)
    76d0:	9305      	str	r3, [sp, #20]
    76d2:	2301      	movs	r3, #1
    76d4:	4914      	ldr	r1, [pc, #80]	; (7728 <z_cstart+0xd4>)
    76d6:	9400      	str	r4, [sp, #0]
    76d8:	e9cd 4303 	strd	r4, r3, [sp, #12]
    76dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    76e0:	464b      	mov	r3, r9
    76e2:	e9cd 4401 	strd	r4, r4, [sp, #4]
    76e6:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    76e8:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    76ea:	f000 fe2f 	bl	834c <z_setup_new_thread>
    76ee:	7b6a      	ldrb	r2, [r5, #13]
    76f0:	f022 0204 	bic.w	r2, r2, #4
    76f4:	736a      	strb	r2, [r5, #13]
    76f6:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
    76f8:	4628      	mov	r0, r5
    76fa:	f004 f8af 	bl	b85c <z_ready_thread>
		init_idle_thread(i);
    76fe:	4620      	mov	r0, r4
    7700:	f7ff ff4e 	bl	75a0 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    7704:	4b09      	ldr	r3, [pc, #36]	; (772c <z_cstart+0xd8>)
    7706:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    7708:	464a      	mov	r2, r9
    770a:	4639      	mov	r1, r7
    770c:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    770e:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    7710:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    7714:	f7fc fe06 	bl	4324 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    7718:	e000ed00 	.word	0xe000ed00
    771c:	2000122c 	.word	0x2000122c
    7720:	20000520 	.word	0x20000520
    7724:	0000dcce 	.word	0x0000dcce
    7728:	20002100 	.word	0x20002100
    772c:	20000468 	.word	0x20000468
    7730:	20002ea0 	.word	0x20002ea0
    7734:	0000760d 	.word	0x0000760d

00007738 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    7738:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    773a:	4b0e      	ldr	r3, [pc, #56]	; (7774 <init_mem_slab_module+0x3c>)
    773c:	4c0e      	ldr	r4, [pc, #56]	; (7778 <init_mem_slab_module+0x40>)
    773e:	42a3      	cmp	r3, r4
    7740:	d301      	bcc.n	7746 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    7742:	2000      	movs	r0, #0
	return rc;
}
    7744:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7746:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    774a:	ea41 0200 	orr.w	r2, r1, r0
    774e:	f012 0203 	ands.w	r2, r2, #3
    7752:	d10b      	bne.n	776c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    7754:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    7756:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    7758:	42aa      	cmp	r2, r5
    775a:	d101      	bne.n	7760 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    775c:	331c      	adds	r3, #28
    775e:	e7ee      	b.n	773e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    7760:	695e      	ldr	r6, [r3, #20]
    7762:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    7764:	3201      	adds	r2, #1
		slab->free_list = p;
    7766:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    7768:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    776a:	e7f5      	b.n	7758 <init_mem_slab_module+0x20>
		return -EINVAL;
    776c:	f06f 0015 	mvn.w	r0, #21
	return rc;
    7770:	e7e8      	b.n	7744 <init_mem_slab_module+0xc>
    7772:	bf00      	nop
    7774:	2000032c 	.word	0x2000032c
    7778:	2000032c 	.word	0x2000032c

0000777c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    777c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    777e:	460c      	mov	r4, r1
    7780:	4616      	mov	r6, r2
    7782:	461f      	mov	r7, r3
    7784:	f04f 0320 	mov.w	r3, #32
    7788:	f3ef 8111 	mrs	r1, BASEPRI
    778c:	f383 8812 	msr	BASEPRI_MAX, r3
    7790:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    7794:	6943      	ldr	r3, [r0, #20]
    7796:	b15b      	cbz	r3, 77b0 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    7798:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    779a:	681b      	ldr	r3, [r3, #0]
    779c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    779e:	6983      	ldr	r3, [r0, #24]
    77a0:	3301      	adds	r3, #1
    77a2:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    77a4:	2000      	movs	r0, #0
	__asm__ volatile(
    77a6:	f381 8811 	msr	BASEPRI, r1
    77aa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    77ae:	e011      	b.n	77d4 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    77b0:	ea56 0207 	orrs.w	r2, r6, r7
    77b4:	d103      	bne.n	77be <k_mem_slab_alloc+0x42>
		*mem = NULL;
    77b6:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    77b8:	f06f 000b 	mvn.w	r0, #11
    77bc:	e7f3      	b.n	77a6 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    77be:	4602      	mov	r2, r0
    77c0:	e9cd 6700 	strd	r6, r7, [sp]
    77c4:	3008      	adds	r0, #8
    77c6:	f000 faf5 	bl	7db4 <z_pend_curr>
		if (result == 0) {
    77ca:	b918      	cbnz	r0, 77d4 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    77cc:	4b02      	ldr	r3, [pc, #8]	; (77d8 <k_mem_slab_alloc+0x5c>)
    77ce:	689b      	ldr	r3, [r3, #8]
    77d0:	695b      	ldr	r3, [r3, #20]
    77d2:	6023      	str	r3, [r4, #0]
}
    77d4:	b002      	add	sp, #8
    77d6:	bdd0      	pop	{r4, r6, r7, pc}
    77d8:	2000122c 	.word	0x2000122c

000077dc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    77dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    77e0:	4604      	mov	r4, r0
    77e2:	4616      	mov	r6, r2
    77e4:	461f      	mov	r7, r3
	__asm__ volatile(
    77e6:	f04f 0320 	mov.w	r3, #32
    77ea:	f3ef 8811 	mrs	r8, BASEPRI
    77ee:	f383 8812 	msr	BASEPRI_MAX, r3
    77f2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    77f6:	68c3      	ldr	r3, [r0, #12]
    77f8:	4a35      	ldr	r2, [pc, #212]	; (78d0 <z_impl_k_mutex_lock+0xf4>)
    77fa:	b16b      	cbz	r3, 7818 <z_impl_k_mutex_lock+0x3c>
    77fc:	6880      	ldr	r0, [r0, #8]
    77fe:	6891      	ldr	r1, [r2, #8]
    7800:	4288      	cmp	r0, r1
    7802:	d019      	beq.n	7838 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    7804:	ea56 0307 	orrs.w	r3, r6, r7
    7808:	d118      	bne.n	783c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    780a:	f388 8811 	msr	BASEPRI, r8
    780e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    7812:	f06f 000f 	mvn.w	r0, #15
    7816:	e00c      	b.n	7832 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    7818:	6891      	ldr	r1, [r2, #8]
    781a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    781e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    7820:	3301      	adds	r3, #1
    7822:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    7824:	6893      	ldr	r3, [r2, #8]
    7826:	60a3      	str	r3, [r4, #8]
    7828:	f388 8811 	msr	BASEPRI, r8
    782c:	f3bf 8f6f 	isb	sy
		return 0;
    7830:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    7832:	b002      	add	sp, #8
    7834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    7838:	6921      	ldr	r1, [r4, #16]
    783a:	e7f0      	b.n	781e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    783c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    7840:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    7844:	4299      	cmp	r1, r3
    7846:	bfa8      	it	ge
    7848:	4619      	movge	r1, r3
    784a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    784e:	4291      	cmp	r1, r2
    7850:	bfb8      	it	lt
    7852:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    7854:	428b      	cmp	r3, r1
    7856:	dd2f      	ble.n	78b8 <z_impl_k_mutex_lock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
    7858:	f000 fac0 	bl	7ddc <z_set_prio>
    785c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    785e:	e9cd 6700 	strd	r6, r7, [sp]
    7862:	481c      	ldr	r0, [pc, #112]	; (78d4 <z_impl_k_mutex_lock+0xf8>)
    7864:	4622      	mov	r2, r4
    7866:	4641      	mov	r1, r8
    7868:	f000 faa4 	bl	7db4 <z_pend_curr>
	if (got_mutex == 0) {
    786c:	2800      	cmp	r0, #0
    786e:	d0e0      	beq.n	7832 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    7870:	f04f 0320 	mov.w	r3, #32
    7874:	f3ef 8611 	mrs	r6, BASEPRI
    7878:	f383 8812 	msr	BASEPRI_MAX, r3
    787c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    7880:	6823      	ldr	r3, [r4, #0]
    7882:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7884:	429c      	cmp	r4, r3
    7886:	d00a      	beq.n	789e <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7888:	b14b      	cbz	r3, 789e <z_impl_k_mutex_lock+0xc2>
    788a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    788e:	4299      	cmp	r1, r3
    7890:	bfa8      	it	ge
    7892:	4619      	movge	r1, r3
    7894:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    7898:	4299      	cmp	r1, r3
    789a:	bfb8      	it	lt
    789c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    789e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    78a0:	f990 300e 	ldrsb.w	r3, [r0, #14]
    78a4:	4299      	cmp	r1, r3
    78a6:	d109      	bne.n	78bc <z_impl_k_mutex_lock+0xe0>
	if (resched) {
    78a8:	b16d      	cbz	r5, 78c6 <z_impl_k_mutex_lock+0xea>
		z_reschedule(&lock, key);
    78aa:	480a      	ldr	r0, [pc, #40]	; (78d4 <z_impl_k_mutex_lock+0xf8>)
    78ac:	4631      	mov	r1, r6
    78ae:	f000 f927 	bl	7b00 <z_reschedule>
	return -EAGAIN;
    78b2:	f06f 000a 	mvn.w	r0, #10
    78b6:	e7bc      	b.n	7832 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    78b8:	2500      	movs	r5, #0
    78ba:	e7d0      	b.n	785e <z_impl_k_mutex_lock+0x82>
		return z_set_prio(mutex->owner, new_prio);
    78bc:	f000 fa8e 	bl	7ddc <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    78c0:	2800      	cmp	r0, #0
    78c2:	d1f2      	bne.n	78aa <z_impl_k_mutex_lock+0xce>
    78c4:	e7f0      	b.n	78a8 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    78c6:	f386 8811 	msr	BASEPRI, r6
    78ca:	f3bf 8f6f 	isb	sy
    78ce:	e7f0      	b.n	78b2 <z_impl_k_mutex_lock+0xd6>
    78d0:	2000122c 	.word	0x2000122c
    78d4:	2000170d 	.word	0x2000170d

000078d8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    78d8:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    78da:	6883      	ldr	r3, [r0, #8]
{
    78dc:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    78de:	2b00      	cmp	r3, #0
    78e0:	d037      	beq.n	7952 <z_impl_k_mutex_unlock+0x7a>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    78e2:	4a1f      	ldr	r2, [pc, #124]	; (7960 <z_impl_k_mutex_unlock+0x88>)
    78e4:	6892      	ldr	r2, [r2, #8]
    78e6:	4293      	cmp	r3, r2
    78e8:	d136      	bne.n	7958 <z_impl_k_mutex_unlock+0x80>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    78ea:	7bda      	ldrb	r2, [r3, #15]
    78ec:	3a01      	subs	r2, #1
    78ee:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    78f0:	68c3      	ldr	r3, [r0, #12]
    78f2:	2b01      	cmp	r3, #1
    78f4:	d905      	bls.n	7902 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    78f6:	3b01      	subs	r3, #1
    78f8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    78fa:	f000 faed 	bl	7ed8 <k_sched_unlock>

	return 0;
    78fe:	2000      	movs	r0, #0
}
    7900:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    7902:	f04f 0320 	mov.w	r3, #32
    7906:	f3ef 8511 	mrs	r5, BASEPRI
    790a:	f383 8812 	msr	BASEPRI_MAX, r3
    790e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    7912:	6901      	ldr	r1, [r0, #16]
    7914:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    7916:	f990 300e 	ldrsb.w	r3, [r0, #14]
    791a:	4299      	cmp	r1, r3
    791c:	d001      	beq.n	7922 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    791e:	f000 fa5d 	bl	7ddc <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    7922:	4620      	mov	r0, r4
    7924:	f003 fff9 	bl	b91a <z_unpend_first_thread>
	mutex->owner = new_owner;
    7928:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    792a:	b160      	cbz	r0, 7946 <z_impl_k_mutex_unlock+0x6e>
		mutex->owner_orig_prio = new_owner->base.prio;
    792c:	f990 200e 	ldrsb.w	r2, [r0, #14]
    7930:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    7932:	2200      	movs	r2, #0
    7934:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
    7938:	f003 ff90 	bl	b85c <z_ready_thread>
		z_reschedule(&lock, key);
    793c:	4809      	ldr	r0, [pc, #36]	; (7964 <z_impl_k_mutex_unlock+0x8c>)
    793e:	4629      	mov	r1, r5
    7940:	f000 f8de 	bl	7b00 <z_reschedule>
    7944:	e7d9      	b.n	78fa <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    7946:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    7948:	f385 8811 	msr	BASEPRI, r5
    794c:	f3bf 8f6f 	isb	sy
    7950:	e7d3      	b.n	78fa <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    7952:	f06f 0015 	mvn.w	r0, #21
    7956:	e7d3      	b.n	7900 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    7958:	f04f 30ff 	mov.w	r0, #4294967295
    795c:	e7d0      	b.n	7900 <z_impl_k_mutex_unlock+0x28>
    795e:	bf00      	nop
    7960:	2000122c 	.word	0x2000122c
    7964:	2000170d 	.word	0x2000170d

00007968 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
    7968:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    796c:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
    796e:	4b29      	ldr	r3, [pc, #164]	; (7a14 <z_impl_k_poll+0xac>)
    7970:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
    7972:	2301      	movs	r3, #1
    7974:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
    7978:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
    797c:	ea52 0307 	orrs.w	r3, r2, r7
{
    7980:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
    7982:	bf0c      	ite	eq
    7984:	2301      	moveq	r3, #1
    7986:	2300      	movne	r3, #0
    7988:	f105 0260 	add.w	r2, r5, #96	; 0x60
{
    798c:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
    798e:	f003 fe19 	bl	b5c4 <register_events>
    7992:	4681      	mov	r9, r0
	__asm__ volatile(
    7994:	f04f 0320 	mov.w	r3, #32
    7998:	f3ef 8a11 	mrs	sl, BASEPRI
    799c:	f383 8812 	msr	BASEPRI_MAX, r3
    79a0:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
    79a4:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
    79a8:	b964      	cbnz	r4, 79c4 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
    79aa:	4601      	mov	r1, r0
    79ac:	4652      	mov	r2, sl
    79ae:	4640      	mov	r0, r8
    79b0:	f003 fda6 	bl	b500 <clear_event_registrations>
	__asm__ volatile(
    79b4:	f38a 8811 	msr	BASEPRI, sl
    79b8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
    79bc:	4620      	mov	r0, r4
    79be:	b002      	add	sp, #8
    79c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
    79c4:	2300      	movs	r3, #0
    79c6:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    79ca:	ea56 0307 	orrs.w	r3, r6, r7
    79ce:	d106      	bne.n	79de <z_impl_k_poll+0x76>
    79d0:	f38a 8811 	msr	BASEPRI, sl
    79d4:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    79d8:	f06f 040a 	mvn.w	r4, #10
    79dc:	e7ee      	b.n	79bc <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    79de:	e9cd 6700 	strd	r6, r7, [sp]
    79e2:	4a0d      	ldr	r2, [pc, #52]	; (7a18 <z_impl_k_poll+0xb0>)
    79e4:	480d      	ldr	r0, [pc, #52]	; (7a1c <z_impl_k_poll+0xb4>)
    79e6:	4651      	mov	r1, sl
    79e8:	f000 f9e4 	bl	7db4 <z_pend_curr>
    79ec:	4604      	mov	r4, r0
	__asm__ volatile(
    79ee:	f04f 0320 	mov.w	r3, #32
    79f2:	f3ef 8511 	mrs	r5, BASEPRI
    79f6:	f383 8812 	msr	BASEPRI_MAX, r3
    79fa:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
    79fe:	462a      	mov	r2, r5
    7a00:	4649      	mov	r1, r9
    7a02:	4640      	mov	r0, r8
    7a04:	f003 fd7c 	bl	b500 <clear_event_registrations>
	__asm__ volatile(
    7a08:	f385 8811 	msr	BASEPRI, r5
    7a0c:	f3bf 8f6f 	isb	sy
	return swap_rc;
    7a10:	e7d4      	b.n	79bc <z_impl_k_poll+0x54>
    7a12:	bf00      	nop
    7a14:	2000122c 	.word	0x2000122c
    7a18:	200002a0 	.word	0x200002a0
    7a1c:	2000170d 	.word	0x2000170d

00007a20 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
    7a20:	b538      	push	{r3, r4, r5, lr}
    7a22:	4603      	mov	r3, r0
	__asm__ volatile(
    7a24:	f04f 0220 	mov.w	r2, #32
    7a28:	f3ef 8511 	mrs	r5, BASEPRI
    7a2c:	f382 8812 	msr	BASEPRI_MAX, r2
    7a30:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
    7a34:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
    7a36:	2101      	movs	r1, #1
    7a38:	6081      	str	r1, [r0, #8]
	return list->head == list;
    7a3a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    7a3c:	4283      	cmp	r3, r0
    7a3e:	d106      	bne.n	7a4e <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
    7a40:	f385 8811 	msr	BASEPRI, r5
    7a44:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
    7a48:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
    7a4a:	4620      	mov	r0, r4
    7a4c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
    7a4e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    7a52:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7a54:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7a56:	2300      	movs	r3, #0
	node->prev = NULL;
    7a58:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    7a5c:	f003 fe29 	bl	b6b2 <signal_poll_event>
	z_reschedule(&lock, key);
    7a60:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    7a62:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    7a64:	4801      	ldr	r0, [pc, #4]	; (7a6c <z_impl_k_poll_signal_raise+0x4c>)
    7a66:	f000 f84b 	bl	7b00 <z_reschedule>
	return rc;
    7a6a:	e7ee      	b.n	7a4a <z_impl_k_poll_signal_raise+0x2a>
    7a6c:	2000170d 	.word	0x2000170d

00007a70 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    7a70:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    7a72:	4c08      	ldr	r4, [pc, #32]	; (7a94 <z_reset_time_slice+0x24>)
    7a74:	6823      	ldr	r3, [r4, #0]
    7a76:	b15b      	cbz	r3, 7a90 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    7a78:	f7fe fc10 	bl	629c <sys_clock_elapsed>
    7a7c:	4603      	mov	r3, r0
    7a7e:	6820      	ldr	r0, [r4, #0]
    7a80:	4a05      	ldr	r2, [pc, #20]	; (7a98 <z_reset_time_slice+0x28>)
    7a82:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    7a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    7a88:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    7a8a:	2100      	movs	r1, #0
    7a8c:	f003 bfb9 	b.w	ba02 <z_set_timeout_expiry>
}
    7a90:	bd10      	pop	{r4, pc}
    7a92:	bf00      	nop
    7a94:	20001260 	.word	0x20001260
    7a98:	2000122c 	.word	0x2000122c

00007a9c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    7a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7a9e:	4604      	mov	r4, r0
    7aa0:	460d      	mov	r5, r1
	__asm__ volatile(
    7aa2:	f04f 0320 	mov.w	r3, #32
    7aa6:	f3ef 8611 	mrs	r6, BASEPRI
    7aaa:	f383 8812 	msr	BASEPRI_MAX, r3
    7aae:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    7ab2:	4b10      	ldr	r3, [pc, #64]	; (7af4 <k_sched_time_slice_set+0x58>)
    7ab4:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    7ab6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    7aba:	f240 30e7 	movw	r0, #999	; 0x3e7
    7abe:	2100      	movs	r1, #0
    7ac0:	611a      	str	r2, [r3, #16]
    7ac2:	fbe7 0104 	umlal	r0, r1, r7, r4
    7ac6:	2300      	movs	r3, #0
    7ac8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7acc:	f7f8 ff36 	bl	93c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    7ad0:	2c00      	cmp	r4, #0
    7ad2:	4b09      	ldr	r3, [pc, #36]	; (7af8 <k_sched_time_slice_set+0x5c>)
    7ad4:	dc09      	bgt.n	7aea <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    7ad6:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    7ad8:	4b08      	ldr	r3, [pc, #32]	; (7afc <k_sched_time_slice_set+0x60>)
    7ada:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    7adc:	f7ff ffc8 	bl	7a70 <z_reset_time_slice>
	__asm__ volatile(
    7ae0:	f386 8811 	msr	BASEPRI, r6
    7ae4:	f3bf 8f6f 	isb	sy
	}
}
    7ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    7aea:	2802      	cmp	r0, #2
    7aec:	bfb8      	it	lt
    7aee:	2002      	movlt	r0, #2
    7af0:	e7f1      	b.n	7ad6 <k_sched_time_slice_set+0x3a>
    7af2:	bf00      	nop
    7af4:	2000122c 	.word	0x2000122c
    7af8:	20001260 	.word	0x20001260
    7afc:	2000125c 	.word	0x2000125c

00007b00 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7b00:	b949      	cbnz	r1, 7b16 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7b02:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    7b06:	b930      	cbnz	r0, 7b16 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    7b08:	4b05      	ldr	r3, [pc, #20]	; (7b20 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    7b0a:	69da      	ldr	r2, [r3, #28]
    7b0c:	689b      	ldr	r3, [r3, #8]
    7b0e:	429a      	cmp	r2, r3
    7b10:	d001      	beq.n	7b16 <z_reschedule+0x16>
	ret = arch_swap(key);
    7b12:	f7fc bbb3 	b.w	427c <arch_swap>
    7b16:	f381 8811 	msr	BASEPRI, r1
    7b1a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    7b1e:	4770      	bx	lr
    7b20:	2000122c 	.word	0x2000122c

00007b24 <k_sched_lock>:
	__asm__ volatile(
    7b24:	f04f 0320 	mov.w	r3, #32
    7b28:	f3ef 8111 	mrs	r1, BASEPRI
    7b2c:	f383 8812 	msr	BASEPRI_MAX, r3
    7b30:	f3bf 8f6f 	isb	sy
    7b34:	4b04      	ldr	r3, [pc, #16]	; (7b48 <k_sched_lock+0x24>)
    7b36:	689a      	ldr	r2, [r3, #8]
    7b38:	7bd3      	ldrb	r3, [r2, #15]
    7b3a:	3b01      	subs	r3, #1
    7b3c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    7b3e:	f381 8811 	msr	BASEPRI, r1
    7b42:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    7b46:	4770      	bx	lr
    7b48:	2000122c 	.word	0x2000122c

00007b4c <update_cache>:
{
    7b4c:	b538      	push	{r3, r4, r5, lr}
    7b4e:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    7b50:	480c      	ldr	r0, [pc, #48]	; (7b84 <update_cache+0x38>)
    7b52:	4d0d      	ldr	r5, [pc, #52]	; (7b88 <update_cache+0x3c>)
    7b54:	f003 fe78 	bl	b848 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    7b58:	4604      	mov	r4, r0
    7b5a:	b900      	cbnz	r0, 7b5e <update_cache+0x12>
    7b5c:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    7b5e:	68ab      	ldr	r3, [r5, #8]
    7b60:	b94a      	cbnz	r2, 7b76 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    7b62:	7b5a      	ldrb	r2, [r3, #13]
    7b64:	06d2      	lsls	r2, r2, #27
    7b66:	d106      	bne.n	7b76 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    7b68:	69a2      	ldr	r2, [r4, #24]
    7b6a:	b922      	cbnz	r2, 7b76 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    7b6c:	89da      	ldrh	r2, [r3, #14]
    7b6e:	2a7f      	cmp	r2, #127	; 0x7f
    7b70:	d901      	bls.n	7b76 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    7b72:	61eb      	str	r3, [r5, #28]
}
    7b74:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    7b76:	429c      	cmp	r4, r3
    7b78:	d001      	beq.n	7b7e <update_cache+0x32>
			z_reset_time_slice();
    7b7a:	f7ff ff79 	bl	7a70 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    7b7e:	61ec      	str	r4, [r5, #28]
}
    7b80:	e7f8      	b.n	7b74 <update_cache+0x28>
    7b82:	bf00      	nop
    7b84:	2000124c 	.word	0x2000124c
    7b88:	2000122c 	.word	0x2000122c

00007b8c <move_thread_to_end_of_prio_q>:
{
    7b8c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    7b8e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    7b92:	7b43      	ldrb	r3, [r0, #13]
    7b94:	2a00      	cmp	r2, #0
{
    7b96:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    7b98:	da04      	bge.n	7ba4 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7b9e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    7ba0:	f003 fe0d 	bl	b7be <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    7ba4:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    7ba6:	4a17      	ldr	r2, [pc, #92]	; (7c04 <move_thread_to_end_of_prio_q+0x78>)
    7ba8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7bac:	4610      	mov	r0, r2
    7bae:	734b      	strb	r3, [r1, #13]
    7bb0:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7bb4:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7bb6:	4283      	cmp	r3, r0
    7bb8:	bf08      	it	eq
    7bba:	2300      	moveq	r3, #0
    7bbc:	2b00      	cmp	r3, #0
    7bbe:	bf38      	it	cc
    7bc0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7bc2:	b1cb      	cbz	r3, 7bf8 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
    7bc4:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    7bc8:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    7bcc:	42a6      	cmp	r6, r4
    7bce:	d00f      	beq.n	7bf0 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
    7bd0:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    7bd2:	2c00      	cmp	r4, #0
    7bd4:	dd0c      	ble.n	7bf0 <move_thread_to_end_of_prio_q+0x64>
	sys_dnode_t *const prev = successor->prev;
    7bd6:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
    7bd8:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    7bdc:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    7bde:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    7be0:	6890      	ldr	r0, [r2, #8]
    7be2:	1a43      	subs	r3, r0, r1
    7be4:	4258      	negs	r0, r3
}
    7be6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    7bea:	4158      	adcs	r0, r3
    7bec:	f7ff bfae 	b.w	7b4c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    7bf0:	42ab      	cmp	r3, r5
    7bf2:	d001      	beq.n	7bf8 <move_thread_to_end_of_prio_q+0x6c>
    7bf4:	681b      	ldr	r3, [r3, #0]
    7bf6:	e7e4      	b.n	7bc2 <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
    7bf8:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
    7bfc:	6029      	str	r1, [r5, #0]
	list->tail = node;
    7bfe:	6251      	str	r1, [r2, #36]	; 0x24
}
    7c00:	e7ee      	b.n	7be0 <move_thread_to_end_of_prio_q+0x54>
    7c02:	bf00      	nop
    7c04:	2000122c 	.word	0x2000122c

00007c08 <z_time_slice>:
{
    7c08:	b570      	push	{r4, r5, r6, lr}
    7c0a:	4601      	mov	r1, r0
	__asm__ volatile(
    7c0c:	f04f 0320 	mov.w	r3, #32
    7c10:	f3ef 8411 	mrs	r4, BASEPRI
    7c14:	f383 8812 	msr	BASEPRI_MAX, r3
    7c18:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    7c1c:	4b16      	ldr	r3, [pc, #88]	; (7c78 <z_time_slice+0x70>)
    7c1e:	4a17      	ldr	r2, [pc, #92]	; (7c7c <z_time_slice+0x74>)
    7c20:	6898      	ldr	r0, [r3, #8]
    7c22:	6815      	ldr	r5, [r2, #0]
    7c24:	42a8      	cmp	r0, r5
    7c26:	461d      	mov	r5, r3
    7c28:	d106      	bne.n	7c38 <z_time_slice+0x30>
			z_reset_time_slice();
    7c2a:	f7ff ff21 	bl	7a70 <z_reset_time_slice>
	__asm__ volatile(
    7c2e:	f384 8811 	msr	BASEPRI, r4
    7c32:	f3bf 8f6f 	isb	sy
}
    7c36:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    7c38:	2600      	movs	r6, #0
    7c3a:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    7c3c:	4a10      	ldr	r2, [pc, #64]	; (7c80 <z_time_slice+0x78>)
    7c3e:	6812      	ldr	r2, [r2, #0]
    7c40:	b1ba      	cbz	r2, 7c72 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    7c42:	89c2      	ldrh	r2, [r0, #14]
    7c44:	2a7f      	cmp	r2, #127	; 0x7f
    7c46:	d814      	bhi.n	7c72 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    7c48:	7b42      	ldrb	r2, [r0, #13]
    7c4a:	06d2      	lsls	r2, r2, #27
    7c4c:	d111      	bne.n	7c72 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    7c4e:	4a0d      	ldr	r2, [pc, #52]	; (7c84 <z_time_slice+0x7c>)
    7c50:	f990 600e 	ldrsb.w	r6, [r0, #14]
    7c54:	6812      	ldr	r2, [r2, #0]
    7c56:	4296      	cmp	r6, r2
    7c58:	db0b      	blt.n	7c72 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    7c5a:	4a0b      	ldr	r2, [pc, #44]	; (7c88 <z_time_slice+0x80>)
    7c5c:	4290      	cmp	r0, r2
    7c5e:	d008      	beq.n	7c72 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    7c60:	691a      	ldr	r2, [r3, #16]
    7c62:	428a      	cmp	r2, r1
    7c64:	dc02      	bgt.n	7c6c <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    7c66:	f7ff ff91 	bl	7b8c <move_thread_to_end_of_prio_q>
    7c6a:	e7de      	b.n	7c2a <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
    7c6c:	1a52      	subs	r2, r2, r1
    7c6e:	611a      	str	r2, [r3, #16]
    7c70:	e7dd      	b.n	7c2e <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    7c72:	2300      	movs	r3, #0
    7c74:	612b      	str	r3, [r5, #16]
    7c76:	e7da      	b.n	7c2e <z_time_slice+0x26>
    7c78:	2000122c 	.word	0x2000122c
    7c7c:	20001258 	.word	0x20001258
    7c80:	20001260 	.word	0x20001260
    7c84:	2000125c 	.word	0x2000125c
    7c88:	20000468 	.word	0x20000468

00007c8c <ready_thread>:
{
    7c8c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    7c8e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    7c92:	7b42      	ldrb	r2, [r0, #13]
    7c94:	2b00      	cmp	r3, #0
    7c96:	db2d      	blt.n	7cf4 <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    7c98:	06d3      	lsls	r3, r2, #27
    7c9a:	d12b      	bne.n	7cf4 <ready_thread+0x68>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *to)
{
	return !sys_dnode_is_linked(&to->node);
    7c9c:	6983      	ldr	r3, [r0, #24]
    7c9e:	bb4b      	cbnz	r3, 7cf4 <ready_thread+0x68>
	return list->head == list;
    7ca0:	4915      	ldr	r1, [pc, #84]	; (7cf8 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
    7ca2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    7ca6:	7342      	strb	r2, [r0, #13]
    7ca8:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7caa:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	return list->head == list;
    7cac:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7cb0:	4294      	cmp	r4, r2
    7cb2:	bf18      	it	ne
    7cb4:	4623      	movne	r3, r4
    7cb6:	2b00      	cmp	r3, #0
    7cb8:	bf38      	it	cc
    7cba:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7cbc:	b1ab      	cbz	r3, 7cea <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
    7cbe:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    7cc2:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    7cc6:	42a6      	cmp	r6, r4
    7cc8:	d00b      	beq.n	7ce2 <ready_thread+0x56>
		return b2 - b1;
    7cca:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    7ccc:	2c00      	cmp	r4, #0
    7cce:	dd08      	ble.n	7ce2 <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
    7cd0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7cd2:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    7cd6:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    7cd8:	6058      	str	r0, [r3, #4]
}
    7cda:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    7cdc:	2000      	movs	r0, #0
    7cde:	f7ff bf35 	b.w	7b4c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    7ce2:	42ab      	cmp	r3, r5
    7ce4:	d001      	beq.n	7cea <ready_thread+0x5e>
    7ce6:	681b      	ldr	r3, [r3, #0]
    7ce8:	e7e8      	b.n	7cbc <ready_thread+0x30>
	node->prev = tail;
    7cea:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
    7cee:	6028      	str	r0, [r5, #0]
	list->tail = node;
    7cf0:	6248      	str	r0, [r1, #36]	; 0x24
}
    7cf2:	e7f2      	b.n	7cda <ready_thread+0x4e>
}
    7cf4:	bc70      	pop	{r4, r5, r6}
    7cf6:	4770      	bx	lr
    7cf8:	2000122c 	.word	0x2000122c

00007cfc <z_sched_start>:
{
    7cfc:	b510      	push	{r4, lr}
	__asm__ volatile(
    7cfe:	f04f 0220 	mov.w	r2, #32
    7d02:	f3ef 8411 	mrs	r4, BASEPRI
    7d06:	f382 8812 	msr	BASEPRI_MAX, r2
    7d0a:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    7d0e:	7b42      	ldrb	r2, [r0, #13]
    7d10:	0751      	lsls	r1, r2, #29
    7d12:	d404      	bmi.n	7d1e <z_sched_start+0x22>
	__asm__ volatile(
    7d14:	f384 8811 	msr	BASEPRI, r4
    7d18:	f3bf 8f6f 	isb	sy
}
    7d1c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7d1e:	f022 0204 	bic.w	r2, r2, #4
    7d22:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    7d24:	f7ff ffb2 	bl	7c8c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    7d28:	4621      	mov	r1, r4
    7d2a:	4802      	ldr	r0, [pc, #8]	; (7d34 <z_sched_start+0x38>)
}
    7d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    7d30:	f7ff bee6 	b.w	7b00 <z_reschedule>
    7d34:	2000170d 	.word	0x2000170d

00007d38 <unready_thread>:
{
    7d38:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    7d3a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    7d3e:	7b43      	ldrb	r3, [r0, #13]
    7d40:	2a00      	cmp	r2, #0
{
    7d42:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    7d44:	da04      	bge.n	7d50 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7d4a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    7d4c:	f003 fd37 	bl	b7be <sys_dlist_remove>
	update_cache(thread == _current);
    7d50:	4b04      	ldr	r3, [pc, #16]	; (7d64 <unready_thread+0x2c>)
    7d52:	6898      	ldr	r0, [r3, #8]
    7d54:	1a43      	subs	r3, r0, r1
    7d56:	4258      	negs	r0, r3
    7d58:	4158      	adcs	r0, r3
}
    7d5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    7d5e:	f7ff bef5 	b.w	7b4c <update_cache>
    7d62:	bf00      	nop
    7d64:	2000122c 	.word	0x2000122c

00007d68 <pend>:
{
    7d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d6c:	4606      	mov	r6, r0
    7d6e:	4614      	mov	r4, r2
    7d70:	461d      	mov	r5, r3
	__asm__ volatile(
    7d72:	f04f 0320 	mov.w	r3, #32
    7d76:	f3ef 8711 	mrs	r7, BASEPRI
    7d7a:	f383 8812 	msr	BASEPRI_MAX, r3
    7d7e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    7d82:	f003 fd9d 	bl	b8c0 <add_to_waitq_locked>
	__asm__ volatile(
    7d86:	f387 8811 	msr	BASEPRI, r7
    7d8a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7d8e:	1c6b      	adds	r3, r5, #1
    7d90:	bf08      	it	eq
    7d92:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    7d96:	d008      	beq.n	7daa <pend+0x42>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7d98:	4622      	mov	r2, r4
    7d9a:	462b      	mov	r3, r5
    7d9c:	f106 0018 	add.w	r0, r6, #24
    7da0:	4903      	ldr	r1, [pc, #12]	; (7db0 <pend+0x48>)
}
    7da2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7da6:	f000 bc13 	b.w	85d0 <z_add_timeout>
    7daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7dae:	bf00      	nop
    7db0:	0000b87d 	.word	0x0000b87d

00007db4 <z_pend_curr>:
{
    7db4:	b510      	push	{r4, lr}
	pending_current = _current;
    7db6:	4b07      	ldr	r3, [pc, #28]	; (7dd4 <z_pend_curr+0x20>)
    7db8:	6898      	ldr	r0, [r3, #8]
    7dba:	4b07      	ldr	r3, [pc, #28]	; (7dd8 <z_pend_curr+0x24>)
{
    7dbc:	460c      	mov	r4, r1
	pending_current = _current;
    7dbe:	6018      	str	r0, [r3, #0]
{
    7dc0:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    7dc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    7dc6:	f7ff ffcf 	bl	7d68 <pend>
    7dca:	4620      	mov	r0, r4
}
    7dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7dd0:	f7fc ba54 	b.w	427c <arch_swap>
    7dd4:	2000122c 	.word	0x2000122c
    7dd8:	20001258 	.word	0x20001258

00007ddc <z_set_prio>:
{
    7ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7dde:	4604      	mov	r4, r0
	__asm__ volatile(
    7de0:	f04f 0320 	mov.w	r3, #32
    7de4:	f3ef 8611 	mrs	r6, BASEPRI
    7de8:	f383 8812 	msr	BASEPRI_MAX, r3
    7dec:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    7df0:	7b43      	ldrb	r3, [r0, #13]
    7df2:	06da      	lsls	r2, r3, #27
    7df4:	b249      	sxtb	r1, r1
    7df6:	d138      	bne.n	7e6a <z_set_prio+0x8e>
	return !sys_dnode_is_linked(&to->node);
    7df8:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    7dfa:	2d00      	cmp	r5, #0
    7dfc:	d135      	bne.n	7e6a <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7e02:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    7e04:	f003 fcdb 	bl	b7be <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    7e08:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    7e0a:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    7e0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7e10:	7343      	strb	r3, [r0, #13]
	return list->head == list;
    7e12:	4817      	ldr	r0, [pc, #92]	; (7e70 <z_set_prio+0x94>)
    7e14:	4603      	mov	r3, r0
    7e16:	f853 7f20 	ldr.w	r7, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7e1a:	429f      	cmp	r7, r3
    7e1c:	bf18      	it	ne
    7e1e:	463d      	movne	r5, r7
    7e20:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7e22:	6a47      	ldr	r7, [r0, #36]	; 0x24
    7e24:	461a      	mov	r2, r3
    7e26:	462b      	mov	r3, r5
    7e28:	bf38      	it	cc
    7e2a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7e2c:	b1c3      	cbz	r3, 7e60 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
    7e2e:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    7e32:	42a9      	cmp	r1, r5
    7e34:	d010      	beq.n	7e58 <z_set_prio+0x7c>
		return b2 - b1;
    7e36:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    7e38:	2d00      	cmp	r5, #0
    7e3a:	dd0d      	ble.n	7e58 <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
    7e3c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7e3e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    7e42:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    7e44:	605c      	str	r4, [r3, #4]
			update_cache(1);
    7e46:	2001      	movs	r0, #1
    7e48:	f7ff fe80 	bl	7b4c <update_cache>
    7e4c:	2001      	movs	r0, #1
	__asm__ volatile(
    7e4e:	f386 8811 	msr	BASEPRI, r6
    7e52:	f3bf 8f6f 	isb	sy
}
    7e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    7e58:	42bb      	cmp	r3, r7
    7e5a:	d001      	beq.n	7e60 <z_set_prio+0x84>
    7e5c:	681b      	ldr	r3, [r3, #0]
    7e5e:	e7e5      	b.n	7e2c <z_set_prio+0x50>
	node->prev = tail;
    7e60:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
    7e64:	603c      	str	r4, [r7, #0]
	list->tail = node;
    7e66:	6244      	str	r4, [r0, #36]	; 0x24
}
    7e68:	e7ed      	b.n	7e46 <z_set_prio+0x6a>
			thread->base.prio = prio;
    7e6a:	73a1      	strb	r1, [r4, #14]
    7e6c:	2000      	movs	r0, #0
    7e6e:	e7ee      	b.n	7e4e <z_set_prio+0x72>
    7e70:	2000122c 	.word	0x2000122c

00007e74 <z_impl_k_thread_suspend>:
{
    7e74:	b570      	push	{r4, r5, r6, lr}
    7e76:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    7e78:	3018      	adds	r0, #24
    7e7a:	f003 fd9c 	bl	b9b6 <z_abort_timeout>
	__asm__ volatile(
    7e7e:	f04f 0320 	mov.w	r3, #32
    7e82:	f3ef 8611 	mrs	r6, BASEPRI
    7e86:	f383 8812 	msr	BASEPRI_MAX, r3
    7e8a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    7e8e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    7e92:	7b63      	ldrb	r3, [r4, #13]
    7e94:	2a00      	cmp	r2, #0
    7e96:	da05      	bge.n	7ea4 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7e9c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    7e9e:	4620      	mov	r0, r4
    7ea0:	f003 fc8d 	bl	b7be <sys_dlist_remove>
		update_cache(thread == _current);
    7ea4:	4d0b      	ldr	r5, [pc, #44]	; (7ed4 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    7ea6:	7b63      	ldrb	r3, [r4, #13]
    7ea8:	68a8      	ldr	r0, [r5, #8]
    7eaa:	f043 0310 	orr.w	r3, r3, #16
    7eae:	7363      	strb	r3, [r4, #13]
    7eb0:	1b03      	subs	r3, r0, r4
    7eb2:	4258      	negs	r0, r3
    7eb4:	4158      	adcs	r0, r3
    7eb6:	f7ff fe49 	bl	7b4c <update_cache>
	__asm__ volatile(
    7eba:	f386 8811 	msr	BASEPRI, r6
    7ebe:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    7ec2:	68ab      	ldr	r3, [r5, #8]
    7ec4:	42a3      	cmp	r3, r4
    7ec6:	d103      	bne.n	7ed0 <z_impl_k_thread_suspend+0x5c>
}
    7ec8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    7ecc:	f003 bcb2 	b.w	b834 <z_reschedule_unlocked>
}
    7ed0:	bd70      	pop	{r4, r5, r6, pc}
    7ed2:	bf00      	nop
    7ed4:	2000122c 	.word	0x2000122c

00007ed8 <k_sched_unlock>:
{
    7ed8:	b510      	push	{r4, lr}
	__asm__ volatile(
    7eda:	f04f 0320 	mov.w	r3, #32
    7ede:	f3ef 8411 	mrs	r4, BASEPRI
    7ee2:	f383 8812 	msr	BASEPRI_MAX, r3
    7ee6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    7eea:	4b08      	ldr	r3, [pc, #32]	; (7f0c <k_sched_unlock+0x34>)
    7eec:	689a      	ldr	r2, [r3, #8]
    7eee:	7bd3      	ldrb	r3, [r2, #15]
    7ef0:	3301      	adds	r3, #1
    7ef2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    7ef4:	2000      	movs	r0, #0
    7ef6:	f7ff fe29 	bl	7b4c <update_cache>
	__asm__ volatile(
    7efa:	f384 8811 	msr	BASEPRI, r4
    7efe:	f3bf 8f6f 	isb	sy
}
    7f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    7f06:	f003 bc95 	b.w	b834 <z_reschedule_unlocked>
    7f0a:	bf00      	nop
    7f0c:	2000122c 	.word	0x2000122c

00007f10 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    7f10:	4b04      	ldr	r3, [pc, #16]	; (7f24 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    7f12:	2100      	movs	r1, #0
    7f14:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    7f18:	e9c3 2208 	strd	r2, r2, [r3, #32]
    7f1c:	4608      	mov	r0, r1
    7f1e:	f7ff bdbd 	b.w	7a9c <k_sched_time_slice_set>
    7f22:	bf00      	nop
    7f24:	2000122c 	.word	0x2000122c

00007f28 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    7f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    7f2a:	f04f 0320 	mov.w	r3, #32
    7f2e:	f3ef 8411 	mrs	r4, BASEPRI
    7f32:	f383 8812 	msr	BASEPRI_MAX, r3
    7f36:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    7f3a:	491b      	ldr	r1, [pc, #108]	; (7fa8 <z_impl_k_yield+0x80>)
    7f3c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7f3e:	7b43      	ldrb	r3, [r0, #13]
    7f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7f44:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    7f46:	f003 fc3a 	bl	b7be <sys_dlist_remove>
	}
	queue_thread(_current);
    7f4a:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    7f4c:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
    7f4e:	4608      	mov	r0, r1
    7f50:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7f54:	7353      	strb	r3, [r2, #13]
    7f56:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7f5a:	6a4e      	ldr	r6, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7f5c:	4283      	cmp	r3, r0
    7f5e:	bf08      	it	eq
    7f60:	2300      	moveq	r3, #0
    7f62:	2b00      	cmp	r3, #0
    7f64:	bf38      	it	cc
    7f66:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7f68:	b1cb      	cbz	r3, 7f9e <z_impl_k_yield+0x76>
	int32_t b1 = thread_1->base.prio;
    7f6a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
    7f6e:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    7f72:	42af      	cmp	r7, r5
    7f74:	d00f      	beq.n	7f96 <z_impl_k_yield+0x6e>
		return b2 - b1;
    7f76:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    7f78:	2d00      	cmp	r5, #0
    7f7a:	dd0c      	ble.n	7f96 <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
    7f7c:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    7f7e:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
    7f82:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    7f84:	605a      	str	r2, [r3, #4]
	update_cache(1);
    7f86:	2001      	movs	r0, #1
    7f88:	f7ff fde0 	bl	7b4c <update_cache>
    7f8c:	4620      	mov	r0, r4
	z_swap(&sched_spinlock, key);
}
    7f8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7f92:	f7fc b973 	b.w	427c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    7f96:	42b3      	cmp	r3, r6
    7f98:	d001      	beq.n	7f9e <z_impl_k_yield+0x76>
    7f9a:	681b      	ldr	r3, [r3, #0]
    7f9c:	e7e4      	b.n	7f68 <z_impl_k_yield+0x40>
	node->prev = tail;
    7f9e:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
    7fa2:	6032      	str	r2, [r6, #0]
	list->tail = node;
    7fa4:	624a      	str	r2, [r1, #36]	; 0x24
}
    7fa6:	e7ee      	b.n	7f86 <z_impl_k_yield+0x5e>
    7fa8:	2000122c 	.word	0x2000122c

00007fac <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    7fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7fb0:	4604      	mov	r4, r0
    7fb2:	460d      	mov	r5, r1
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    7fb4:	ea54 0105 	orrs.w	r1, r4, r5
    7fb8:	d104      	bne.n	7fc4 <z_tick_sleep+0x18>
	z_impl_k_yield();
    7fba:	f7ff ffb5 	bl	7f28 <z_impl_k_yield>
		k_yield();
		return 0;
    7fbe:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    7fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    7fc4:	f06f 0101 	mvn.w	r1, #1
    7fc8:	1a0a      	subs	r2, r1, r0
    7fca:	f04f 31ff 	mov.w	r1, #4294967295
    7fce:	eb61 0305 	sbc.w	r3, r1, r5
    7fd2:	2a01      	cmp	r2, #1
    7fd4:	f173 0300 	sbcs.w	r3, r3, #0
    7fd8:	da2a      	bge.n	8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    7fda:	f003 fd2c 	bl	ba36 <sys_clock_tick_get_32>
    7fde:	1906      	adds	r6, r0, r4
    7fe0:	f04f 0320 	mov.w	r3, #32
    7fe4:	f3ef 8811 	mrs	r8, BASEPRI
    7fe8:	f383 8812 	msr	BASEPRI_MAX, r3
    7fec:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    7ff0:	4f11      	ldr	r7, [pc, #68]	; (8038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>)
    7ff2:	4b12      	ldr	r3, [pc, #72]	; (803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>)
    7ff4:	68b8      	ldr	r0, [r7, #8]
    7ff6:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    7ff8:	f7ff fe9e 	bl	7d38 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    7ffc:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7ffe:	4910      	ldr	r1, [pc, #64]	; (8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
    8000:	4622      	mov	r2, r4
    8002:	462b      	mov	r3, r5
    8004:	3018      	adds	r0, #24
    8006:	f000 fae3 	bl	85d0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    800a:	68ba      	ldr	r2, [r7, #8]
    800c:	7b53      	ldrb	r3, [r2, #13]
    800e:	f043 0310 	orr.w	r3, r3, #16
    8012:	7353      	strb	r3, [r2, #13]
    8014:	4640      	mov	r0, r8
    8016:	f7fc f931 	bl	427c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    801a:	f003 fd0c 	bl	ba36 <sys_clock_tick_get_32>
    801e:	1a30      	subs	r0, r6, r0
    8020:	eb66 0106 	sbc.w	r1, r6, r6
	if (ticks > 0) {
    8024:	2801      	cmp	r0, #1
    8026:	f171 0300 	sbcs.w	r3, r1, #0
		return ticks;
    802a:	bfb8      	it	lt
    802c:	2000      	movlt	r0, #0
    802e:	e7c7      	b.n	7fc0 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    8030:	f06f 0601 	mvn.w	r6, #1
    8034:	1a36      	subs	r6, r6, r0
    8036:	e7d3      	b.n	7fe0 <z_tick_sleep+0x34>
    8038:	2000122c 	.word	0x2000122c
    803c:	20001258 	.word	0x20001258
    8040:	0000b87d 	.word	0x0000b87d

00008044 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    8044:	b508      	push	{r3, lr}
    8046:	460b      	mov	r3, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8048:	3301      	adds	r3, #1
    804a:	bf08      	it	eq
    804c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    8050:	d106      	bne.n	8060 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    8052:	4b08      	ldr	r3, [pc, #32]	; (8074 <z_impl_k_sleep+0x30>)
    8054:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    8056:	f7ff ff0d 	bl	7e74 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    805a:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    805e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    8060:	f7ff ffa4 	bl	7fac <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    8064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8068:	fb80 2303 	smull	r2, r3, r0, r3
    806c:	0bd0      	lsrs	r0, r2, #15
    806e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    8072:	e7f4      	b.n	805e <z_impl_k_sleep+0x1a>
    8074:	2000122c 	.word	0x2000122c

00008078 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    8078:	4b01      	ldr	r3, [pc, #4]	; (8080 <z_impl_z_current_get+0x8>)
    807a:	6898      	ldr	r0, [r3, #8]
    807c:	4770      	bx	lr
    807e:	bf00      	nop
    8080:	2000122c 	.word	0x2000122c

00008084 <z_impl_k_is_preempt_thread>:
    8084:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    8088:	b93b      	cbnz	r3, 809a <z_impl_k_is_preempt_thread+0x16>
    808a:	4b05      	ldr	r3, [pc, #20]	; (80a0 <z_impl_k_is_preempt_thread+0x1c>)
    808c:	689b      	ldr	r3, [r3, #8]
    808e:	89d8      	ldrh	r0, [r3, #14]
    8090:	287f      	cmp	r0, #127	; 0x7f
    8092:	bf8c      	ite	hi
    8094:	2000      	movhi	r0, #0
    8096:	2001      	movls	r0, #1
    8098:	4770      	bx	lr
    809a:	2000      	movs	r0, #0
}
    809c:	4770      	bx	lr
    809e:	bf00      	nop
    80a0:	2000122c 	.word	0x2000122c

000080a4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    80a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80a8:	4604      	mov	r4, r0
    80aa:	f04f 0320 	mov.w	r3, #32
    80ae:	f3ef 8611 	mrs	r6, BASEPRI
    80b2:	f383 8812 	msr	BASEPRI_MAX, r3
    80b6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    80ba:	7b43      	ldrb	r3, [r0, #13]
    80bc:	071a      	lsls	r2, r3, #28
    80be:	d505      	bpl.n	80cc <z_thread_abort+0x28>
	__asm__ volatile(
    80c0:	f386 8811 	msr	BASEPRI, r6
    80c4:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    80c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    80cc:	f023 0220 	bic.w	r2, r3, #32
    80d0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    80d4:	09d2      	lsrs	r2, r2, #7
    80d6:	d123      	bne.n	8120 <z_thread_abort+0x7c>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    80d8:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    80da:	68a3      	ldr	r3, [r4, #8]
    80dc:	b113      	cbz	r3, 80e4 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    80de:	4620      	mov	r0, r4
    80e0:	f003 fb75 	bl	b7ce <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    80e4:	f104 0018 	add.w	r0, r4, #24
    80e8:	f003 fc65 	bl	b9b6 <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    80ec:	f104 0758 	add.w	r7, r4, #88	; 0x58
    80f0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    80f4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    80f6:	42bd      	cmp	r5, r7
    80f8:	d000      	beq.n	80fc <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    80fa:	b9cd      	cbnz	r5, 8130 <z_thread_abort+0x8c>
		update_cache(1);
    80fc:	2001      	movs	r0, #1
    80fe:	f7ff fd25 	bl	7b4c <update_cache>
		z_thread_monitor_exit(thread);
    8102:	4620      	mov	r0, r4
    8104:	f000 f8ba 	bl	827c <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
    8108:	4b10      	ldr	r3, [pc, #64]	; (814c <z_thread_abort+0xa8>)
    810a:	689b      	ldr	r3, [r3, #8]
    810c:	42a3      	cmp	r3, r4
    810e:	d1d7      	bne.n	80c0 <z_thread_abort+0x1c>
    8110:	f3ef 8305 	mrs	r3, IPSR
    8114:	2b00      	cmp	r3, #0
    8116:	d1d3      	bne.n	80c0 <z_thread_abort+0x1c>
    8118:	4630      	mov	r0, r6
    811a:	f7fc f8af 	bl	427c <arch_swap>
	return ret;
    811e:	e7cf      	b.n	80c0 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8120:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    8124:	f043 0308 	orr.w	r3, r3, #8
    8128:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    812a:	f003 fb48 	bl	b7be <sys_dlist_remove>
}
    812e:	e7d4      	b.n	80da <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    8130:	4628      	mov	r0, r5
    8132:	f003 fb4c 	bl	b7ce <unpend_thread_no_timeout>
    8136:	f105 0018 	add.w	r0, r5, #24
    813a:	f003 fc3c 	bl	b9b6 <z_abort_timeout>
    813e:	f8c5 80b0 	str.w	r8, [r5, #176]	; 0xb0
		ready_thread(thread);
    8142:	4628      	mov	r0, r5
    8144:	f7ff fda2 	bl	7c8c <ready_thread>
    8148:	e7d4      	b.n	80f4 <z_thread_abort+0x50>
    814a:	bf00      	nop
    814c:	2000122c 	.word	0x2000122c

00008150 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    8150:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    8152:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    8156:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    8158:	e9cd 6700 	strd	r6, r7, [sp]
    815c:	f7ff fe2a 	bl	7db4 <z_pend_curr>

	if (data != NULL) {
    8160:	b11c      	cbz	r4, 816a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    8162:	4b03      	ldr	r3, [pc, #12]	; (8170 <z_sched_wait+0x20>)
    8164:	689b      	ldr	r3, [r3, #8]
    8166:	695b      	ldr	r3, [r3, #20]
    8168:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    816a:	b002      	add	sp, #8
    816c:	bdd0      	pop	{r4, r6, r7, pc}
    816e:	bf00      	nop
    8170:	2000122c 	.word	0x2000122c

00008174 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    8174:	b538      	push	{r3, r4, r5, lr}
    8176:	4604      	mov	r4, r0
	__asm__ volatile(
    8178:	f04f 0320 	mov.w	r3, #32
    817c:	f3ef 8511 	mrs	r5, BASEPRI
    8180:	f383 8812 	msr	BASEPRI_MAX, r3
    8184:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    8188:	f003 fbc7 	bl	b91a <z_unpend_first_thread>

	if (thread != NULL) {
    818c:	b150      	cbz	r0, 81a4 <z_impl_k_sem_give+0x30>
    818e:	2200      	movs	r2, #0
    8190:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    8194:	f003 fb62 	bl	b85c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    8198:	4629      	mov	r1, r5
    819a:	4808      	ldr	r0, [pc, #32]	; (81bc <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    819c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    81a0:	f7ff bcae 	b.w	7b00 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    81a4:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    81a8:	429a      	cmp	r2, r3
    81aa:	bf18      	it	ne
    81ac:	3301      	addne	r3, #1
    81ae:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    81b0:	2102      	movs	r1, #2
    81b2:	f104 0010 	add.w	r0, r4, #16
    81b6:	f003 fae7 	bl	b788 <z_handle_obj_poll_events>
}
    81ba:	e7ed      	b.n	8198 <z_impl_k_sem_give+0x24>
    81bc:	2000170d 	.word	0x2000170d

000081c0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    81c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    81c2:	4614      	mov	r4, r2
    81c4:	461d      	mov	r5, r3
    81c6:	f04f 0320 	mov.w	r3, #32
    81ca:	f3ef 8111 	mrs	r1, BASEPRI
    81ce:	f383 8812 	msr	BASEPRI_MAX, r3
    81d2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    81d6:	6883      	ldr	r3, [r0, #8]
    81d8:	b143      	cbz	r3, 81ec <z_impl_k_sem_take+0x2c>
		sem->count--;
    81da:	3b01      	subs	r3, #1
    81dc:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    81de:	f381 8811 	msr	BASEPRI, r1
    81e2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    81e6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    81e8:	b003      	add	sp, #12
    81ea:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    81ec:	ea54 0305 	orrs.w	r3, r4, r5
    81f0:	d106      	bne.n	8200 <z_impl_k_sem_take+0x40>
    81f2:	f381 8811 	msr	BASEPRI, r1
    81f6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    81fa:	f06f 000f 	mvn.w	r0, #15
    81fe:	e7f3      	b.n	81e8 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    8200:	4602      	mov	r2, r0
    8202:	e9cd 4500 	strd	r4, r5, [sp]
    8206:	4802      	ldr	r0, [pc, #8]	; (8210 <z_impl_k_sem_take+0x50>)
    8208:	f7ff fdd4 	bl	7db4 <z_pend_curr>
	return ret;
    820c:	e7ec      	b.n	81e8 <z_impl_k_sem_take+0x28>
    820e:	bf00      	nop
    8210:	2000170d 	.word	0x2000170d

00008214 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    8214:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    8216:	4b09      	ldr	r3, [pc, #36]	; (823c <k_sys_work_q_init+0x28>)
    8218:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    821a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    821c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    821e:	9300      	str	r3, [sp, #0]
    8220:	4907      	ldr	r1, [pc, #28]	; (8240 <k_sys_work_q_init+0x2c>)
    8222:	4808      	ldr	r0, [pc, #32]	; (8244 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    8224:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    8228:	f04f 33ff 	mov.w	r3, #4294967295
    822c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    8230:	f000 fbce 	bl	89d0 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    8234:	4620      	mov	r0, r4
    8236:	b004      	add	sp, #16
    8238:	bd10      	pop	{r4, pc}
    823a:	bf00      	nop
    823c:	0000dcd3 	.word	0x0000dcd3
    8240:	20002ea0 	.word	0x20002ea0
    8244:	200005d8 	.word	0x200005d8

00008248 <k_thread_foreach>:

#define _FOREACH_STATIC_THREAD(thread_data)              \
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data)

void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data)
{
    8248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    824a:	4605      	mov	r5, r0
    824c:	460e      	mov	r6, r1
	__asm__ volatile(
    824e:	f04f 0320 	mov.w	r3, #32
    8252:	f3ef 8711 	mrs	r7, BASEPRI
    8256:	f383 8812 	msr	BASEPRI_MAX, r3
    825a:	f3bf 8f6f 	isb	sy
	 */
	key = k_spin_lock(&z_thread_monitor_lock);

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, foreach);

	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
    825e:	4b06      	ldr	r3, [pc, #24]	; (8278 <k_thread_foreach+0x30>)
    8260:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    8262:	b924      	cbnz	r4, 826e <k_thread_foreach+0x26>
	__asm__ volatile(
    8264:	f387 8811 	msr	BASEPRI, r7
    8268:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, foreach);

	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
}
    826c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		user_cb(thread, user_data);
    826e:	4620      	mov	r0, r4
    8270:	4631      	mov	r1, r6
    8272:	47a8      	blx	r5
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
    8274:	6f64      	ldr	r4, [r4, #116]	; 0x74
    8276:	e7f4      	b.n	8262 <k_thread_foreach+0x1a>
    8278:	2000122c 	.word	0x2000122c

0000827c <z_thread_monitor_exit>:
	__asm__ volatile(
    827c:	f04f 0320 	mov.w	r3, #32
    8280:	f3ef 8111 	mrs	r1, BASEPRI
    8284:	f383 8812 	msr	BASEPRI_MAX, r3
    8288:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    828c:	4a09      	ldr	r2, [pc, #36]	; (82b4 <z_thread_monitor_exit+0x38>)
    828e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    8290:	4283      	cmp	r3, r0
    8292:	d107      	bne.n	82a4 <z_thread_monitor_exit+0x28>
		_kernel.threads = _kernel.threads->next_thread;
    8294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8296:	6293      	str	r3, [r2, #40]	; 0x28
	__asm__ volatile(
    8298:	f381 8811 	msr	BASEPRI, r1
    829c:	f3bf 8f6f 	isb	sy
			prev_thread->next_thread = thread->next_thread;
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    82a0:	4770      	bx	lr
    82a2:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    82a4:	2b00      	cmp	r3, #0
    82a6:	d0f7      	beq.n	8298 <z_thread_monitor_exit+0x1c>
			(thread != prev_thread->next_thread)) {
    82a8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
    82aa:	4282      	cmp	r2, r0
    82ac:	d1f9      	bne.n	82a2 <z_thread_monitor_exit+0x26>
			prev_thread->next_thread = thread->next_thread;
    82ae:	6f42      	ldr	r2, [r0, #116]	; 0x74
    82b0:	675a      	str	r2, [r3, #116]	; 0x74
    82b2:	e7f1      	b.n	8298 <z_thread_monitor_exit+0x1c>
    82b4:	2000122c 	.word	0x2000122c

000082b8 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    82b8:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    82ba:	4604      	mov	r4, r0
    82bc:	b908      	cbnz	r0, 82c2 <z_impl_k_thread_name_set+0xa>
		thread = _current;
    82be:	4b05      	ldr	r3, [pc, #20]	; (82d4 <z_impl_k_thread_name_set+0x1c>)
    82c0:	689c      	ldr	r4, [r3, #8]
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
    82c2:	2220      	movs	r2, #32
    82c4:	f104 0078 	add.w	r0, r4, #120	; 0x78
    82c8:	f002 f921 	bl	a50e <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    82cc:	2000      	movs	r0, #0
    82ce:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    82d2:	bd10      	pop	{r4, pc}
    82d4:	2000122c 	.word	0x2000122c

000082d8 <k_thread_state_str>:
#endif /* CONFIG_THREAD_NAME */
}

const char *k_thread_state_str(k_tid_t thread_id)
{
	switch (thread_id->base.thread_state) {
    82d8:	7b43      	ldrb	r3, [r0, #13]
    82da:	2b10      	cmp	r3, #16
    82dc:	d80e      	bhi.n	82fc <k_thread_state_str+0x24>
    82de:	2b10      	cmp	r3, #16
    82e0:	d81c      	bhi.n	831c <k_thread_state_str+0x44>
    82e2:	e8df f003 	tbb	[pc, r3]
    82e6:	091d      	.short	0x091d
    82e8:	1b151b13 	.word	0x1b151b13
    82ec:	1b171b1b 	.word	0x1b171b1b
    82f0:	1b1b1b1b 	.word	0x1b1b1b1b
    82f4:	1b1b      	.short	0x1b1b
    82f6:	19          	.byte	0x19
    82f7:	00          	.byte	0x00
    82f8:	480b      	ldr	r0, [pc, #44]	; (8328 <k_thread_state_str+0x50>)
    82fa:	4770      	bx	lr
    82fc:	2b20      	cmp	r3, #32
    82fe:	d011      	beq.n	8324 <k_thread_state_str+0x4c>
	case _THREAD_SUSPENDED:
		return "suspended";
	case _THREAD_ABORTING:
		return "aborting";
	case _THREAD_QUEUED:
		return "queued";
    8300:	4a0a      	ldr	r2, [pc, #40]	; (832c <k_thread_state_str+0x54>)
    8302:	480b      	ldr	r0, [pc, #44]	; (8330 <k_thread_state_str+0x58>)
    8304:	2b80      	cmp	r3, #128	; 0x80
    8306:	bf08      	it	eq
    8308:	4610      	moveq	r0, r2
    830a:	4770      	bx	lr
		return "pending";
    830c:	4809      	ldr	r0, [pc, #36]	; (8334 <k_thread_state_str+0x5c>)
    830e:	4770      	bx	lr
		return "prestart";
    8310:	4809      	ldr	r0, [pc, #36]	; (8338 <k_thread_state_str+0x60>)
    8312:	4770      	bx	lr
		return "dead";
    8314:	4809      	ldr	r0, [pc, #36]	; (833c <k_thread_state_str+0x64>)
    8316:	4770      	bx	lr
		return "suspended";
    8318:	4809      	ldr	r0, [pc, #36]	; (8340 <k_thread_state_str+0x68>)
    831a:	4770      	bx	lr
	/* Add a break, some day when another case gets added at the end,
	 * this bit of defensive programming will be useful
	 */
		break;
	}
	return "unknown";
    831c:	4804      	ldr	r0, [pc, #16]	; (8330 <k_thread_state_str+0x58>)
    831e:	4770      	bx	lr
		return "";
    8320:	4808      	ldr	r0, [pc, #32]	; (8344 <k_thread_state_str+0x6c>)
    8322:	4770      	bx	lr
		return "aborting";
    8324:	4808      	ldr	r0, [pc, #32]	; (8348 <k_thread_state_str+0x70>)
}
    8326:	4770      	bx	lr
    8328:	0000dd04 	.word	0x0000dd04
    832c:	0000dd13 	.word	0x0000dd13
    8330:	0000dcdc 	.word	0x0000dcdc
    8334:	0000dce4 	.word	0x0000dce4
    8338:	0000dcec 	.word	0x0000dcec
    833c:	0000dcf5 	.word	0x0000dcf5
    8340:	0000dcfa 	.word	0x0000dcfa
    8344:	0000cb46 	.word	0x0000cb46
    8348:	0000dd0a 	.word	0x0000dd0a

0000834c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    834c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8350:	b085      	sub	sp, #20
    8352:	4698      	mov	r8, r3
	sys_dlist_init(&w->waitq);
    8354:	f100 0358 	add.w	r3, r0, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
    8358:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    835c:	3207      	adds	r2, #7
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    835e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8360:	7303      	strb	r3, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    8362:	f022 0a07 	bic.w	sl, r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
    8366:	2304      	movs	r3, #4
	thread_base->pended_on = NULL;
    8368:	2500      	movs	r5, #0

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    836a:	f101 0b20 	add.w	fp, r1, #32
	thread_base->thread_state = (uint8_t)initial_state;
    836e:	7343      	strb	r3, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    8370:	f10a 0720 	add.w	r7, sl, #32

	thread_base->prio = priority;
    8374:	9b11      	ldr	r3, [sp, #68]	; 0x44
	thread_base->pended_on = NULL;
    8376:	6085      	str	r5, [r0, #8]
{
    8378:	4604      	mov	r4, r0
	node->prev = NULL;
    837a:	e9c0 5506 	strd	r5, r5, [r0, #24]
    837e:	460e      	mov	r6, r1
	thread_base->prio = priority;
    8380:	7383      	strb	r3, [r0, #14]

	thread_base->sched_locked = 0U;
    8382:	73c5      	strb	r5, [r0, #15]
	stack_ptr = (char *)stack + stack_obj_size;
    8384:	440f      	add	r7, r1
	memset(stack_buf_start, 0xaa, stack_buf_size);
    8386:	4652      	mov	r2, sl
    8388:	21aa      	movs	r1, #170	; 0xaa
    838a:	4658      	mov	r0, fp
{
    838c:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
	memset(stack_buf_start, 0xaa, stack_buf_size);
    8390:	f002 f93b 	bl	a60a <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8394:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8396:	9302      	str	r3, [sp, #8]
    8398:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    839a:	9301      	str	r3, [sp, #4]
    839c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    839e:	9300      	str	r3, [sp, #0]
	new_thread->stack_info.size = stack_buf_size;
    83a0:	e9c4 ba27 	strd	fp, sl, [r4, #156]	; 0x9c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    83a4:	4643      	mov	r3, r8
	new_thread->stack_info.delta = delta;
    83a6:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    83aa:	463a      	mov	r2, r7
    83ac:	4631      	mov	r1, r6
    83ae:	4620      	mov	r0, r4
    83b0:	f7fb ff80 	bl	42b4 <arch_new_thread>
	new_thread->entry.parameter1 = p1;
    83b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    83b6:	66a3      	str	r3, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
    83b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    83ba:	66e3      	str	r3, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
    83bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->init_data = NULL;
    83be:	6565      	str	r5, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
    83c0:	f8c4 8064 	str.w	r8, [r4, #100]	; 0x64
	new_thread->entry.parameter3 = p3;
    83c4:	6723      	str	r3, [r4, #112]	; 0x70
	__asm__ volatile(
    83c6:	f04f 0320 	mov.w	r3, #32
    83ca:	f3ef 8211 	mrs	r2, BASEPRI
    83ce:	f383 8812 	msr	BASEPRI_MAX, r3
    83d2:	f3bf 8f6f 	isb	sy
	new_thread->next_thread = _kernel.threads;
    83d6:	4e10      	ldr	r6, [pc, #64]	; (8418 <z_setup_new_thread+0xcc>)
    83d8:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    83da:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
    83dc:	62b4      	str	r4, [r6, #40]	; 0x28
	__asm__ volatile(
    83de:	f382 8811 	msr	BASEPRI, r2
    83e2:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    83e6:	f1b9 0f00 	cmp.w	r9, #0
    83ea:	d011      	beq.n	8410 <z_setup_new_thread+0xc4>
		strncpy(new_thread->name, name,
    83ec:	221f      	movs	r2, #31
    83ee:	4649      	mov	r1, r9
    83f0:	f104 0078 	add.w	r0, r4, #120	; 0x78
    83f4:	f002 f88b 	bl	a50e <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    83f8:	f884 5097 	strb.w	r5, [r4, #151]	; 0x97
	if (!_current) {
    83fc:	68b3      	ldr	r3, [r6, #8]
    83fe:	b10b      	cbz	r3, 8404 <z_setup_new_thread+0xb8>
	new_thread->resource_pool = _current->resource_pool;
    8400:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	return stack_ptr;
    8404:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
    8408:	4638      	mov	r0, r7
    840a:	b005      	add	sp, #20
    840c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    8410:	f884 9078 	strb.w	r9, [r4, #120]	; 0x78
    8414:	e7f2      	b.n	83fc <z_setup_new_thread+0xb0>
    8416:	bf00      	nop
    8418:	2000122c 	.word	0x2000122c

0000841c <z_impl_k_thread_create>:
{
    841c:	b5f0      	push	{r4, r5, r6, r7, lr}
    841e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8420:	2500      	movs	r5, #0
    8422:	9505      	str	r5, [sp, #20]
    8424:	9d10      	ldr	r5, [sp, #64]	; 0x40
    8426:	9504      	str	r5, [sp, #16]
    8428:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    842a:	9503      	str	r5, [sp, #12]
    842c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    842e:	9502      	str	r5, [sp, #8]
{
    8430:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8434:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    8436:	9501      	str	r5, [sp, #4]
    8438:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    843a:	9500      	str	r5, [sp, #0]
{
    843c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    843e:	f7ff ff85 	bl	834c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    8442:	1c7b      	adds	r3, r7, #1
    8444:	bf08      	it	eq
    8446:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    844a:	d005      	beq.n	8458 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    844c:	ea56 0307 	orrs.w	r3, r6, r7
    8450:	d105      	bne.n	845e <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
    8452:	4620      	mov	r0, r4
    8454:	f7ff fc52 	bl	7cfc <z_sched_start>
}
    8458:	4620      	mov	r0, r4
    845a:	b007      	add	sp, #28
    845c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    845e:	4904      	ldr	r1, [pc, #16]	; (8470 <z_impl_k_thread_create+0x54>)
    8460:	4632      	mov	r2, r6
    8462:	463b      	mov	r3, r7
    8464:	f104 0018 	add.w	r0, r4, #24
    8468:	f000 f8b2 	bl	85d0 <z_add_timeout>
    846c:	e7f4      	b.n	8458 <z_impl_k_thread_create+0x3c>
    846e:	bf00      	nop
    8470:	0000b87d 	.word	0x0000b87d

00008474 <z_init_static_threads>:
{
    8474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    8478:	4e2a      	ldr	r6, [pc, #168]	; (8524 <z_init_static_threads+0xb0>)
    847a:	4d2b      	ldr	r5, [pc, #172]	; (8528 <z_init_static_threads+0xb4>)
{
    847c:	b086      	sub	sp, #24
    847e:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    8480:	42b5      	cmp	r5, r6
    8482:	f105 0430 	add.w	r4, r5, #48	; 0x30
    8486:	d310      	bcc.n	84aa <z_init_static_threads+0x36>
	k_sched_lock();
    8488:	f7ff fb4c 	bl	7b24 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    848c:	4c26      	ldr	r4, [pc, #152]	; (8528 <z_init_static_threads+0xb4>)
    848e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 852c <z_init_static_threads+0xb8>
    8492:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    8496:	f240 36e7 	movw	r6, #999	; 0x3e7
    849a:	2700      	movs	r7, #0
    849c:	4544      	cmp	r4, r8
    849e:	d321      	bcc.n	84e4 <z_init_static_threads+0x70>
}
    84a0:	b006      	add	sp, #24
    84a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    84a6:	f7ff bd17 	b.w	7ed8 <k_sched_unlock>
		z_setup_new_thread(
    84aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
    84ae:	9305      	str	r3, [sp, #20]
    84b0:	f854 3c10 	ldr.w	r3, [r4, #-16]
    84b4:	9304      	str	r3, [sp, #16]
    84b6:	f854 3c14 	ldr.w	r3, [r4, #-20]
    84ba:	9303      	str	r3, [sp, #12]
    84bc:	f854 3c18 	ldr.w	r3, [r4, #-24]
    84c0:	9302      	str	r3, [sp, #8]
    84c2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    84c6:	9301      	str	r3, [sp, #4]
    84c8:	f854 3c20 	ldr.w	r3, [r4, #-32]
    84cc:	9300      	str	r3, [sp, #0]
    84ce:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    84d2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    84d6:	f7ff ff39 	bl	834c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    84da:	f854 3c30 	ldr.w	r3, [r4, #-48]
    84de:	655d      	str	r5, [r3, #84]	; 0x54
    84e0:	4625      	mov	r5, r4
    84e2:	e7cd      	b.n	8480 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    84e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    84e6:	1c5a      	adds	r2, r3, #1
    84e8:	d00d      	beq.n	8506 <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
    84ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    84ee:	4630      	mov	r0, r6
    84f0:	4639      	mov	r1, r7
    84f2:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    84f6:	42b9      	cmp	r1, r7
    84f8:	bf08      	it	eq
    84fa:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    84fc:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    84fe:	d104      	bne.n	850a <z_init_static_threads+0x96>
	z_sched_start(thread);
    8500:	4628      	mov	r0, r5
    8502:	f7ff fbfb 	bl	7cfc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    8506:	3430      	adds	r4, #48	; 0x30
    8508:	e7c8      	b.n	849c <z_init_static_threads+0x28>
    850a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    850e:	2300      	movs	r3, #0
    8510:	f7f8 fa14 	bl	93c <__aeabi_uldivmod>
    8514:	4602      	mov	r2, r0
    8516:	460b      	mov	r3, r1
    8518:	f105 0018 	add.w	r0, r5, #24
    851c:	4651      	mov	r1, sl
    851e:	f000 f857 	bl	85d0 <z_add_timeout>
    8522:	e7f0      	b.n	8506 <z_init_static_threads+0x92>
    8524:	2000032c 	.word	0x2000032c
    8528:	2000032c 	.word	0x2000032c
    852c:	0000b87d 	.word	0x0000b87d

00008530 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    8530:	4b03      	ldr	r3, [pc, #12]	; (8540 <elapsed+0x10>)
    8532:	681b      	ldr	r3, [r3, #0]
    8534:	b90b      	cbnz	r3, 853a <elapsed+0xa>
    8536:	f7fd beb1 	b.w	629c <sys_clock_elapsed>
}
    853a:	2000      	movs	r0, #0
    853c:	4770      	bx	lr
    853e:	bf00      	nop
    8540:	20001264 	.word	0x20001264

00008544 <remove_timeout>:
{
    8544:	b530      	push	{r4, r5, lr}
    8546:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8548:	b168      	cbz	r0, 8566 <remove_timeout+0x22>
    854a:	4a0a      	ldr	r2, [pc, #40]	; (8574 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    854c:	6852      	ldr	r2, [r2, #4]
    854e:	4290      	cmp	r0, r2
    8550:	d009      	beq.n	8566 <remove_timeout+0x22>
	if (next(t) != NULL) {
    8552:	b143      	cbz	r3, 8566 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    8554:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    8558:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    855c:	1912      	adds	r2, r2, r4
    855e:	eb45 0101 	adc.w	r1, r5, r1
    8562:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    8566:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    8568:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    856a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    856c:	2300      	movs	r3, #0
	node->prev = NULL;
    856e:	e9c0 3300 	strd	r3, r3, [r0]
}
    8572:	bd30      	pop	{r4, r5, pc}
    8574:	200002a8 	.word	0x200002a8

00008578 <next_timeout>:

static int32_t next_timeout(void)
{
    8578:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    857a:	4b13      	ldr	r3, [pc, #76]	; (85c8 <next_timeout+0x50>)
    857c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    857e:	429c      	cmp	r4, r3
    8580:	bf08      	it	eq
    8582:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    8584:	f7ff ffd4 	bl	8530 <elapsed>
    8588:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    858a:	b1bc      	cbz	r4, 85bc <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    858c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    8590:	1b40      	subs	r0, r0, r5
    8592:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    8596:	2801      	cmp	r0, #1
    8598:	f171 0300 	sbcs.w	r3, r1, #0
    859c:	db11      	blt.n	85c2 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    859e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    85a2:	2300      	movs	r3, #0
    85a4:	4282      	cmp	r2, r0
    85a6:	eb73 0401 	sbcs.w	r4, r3, r1
    85aa:	da00      	bge.n	85ae <next_timeout+0x36>
    85ac:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    85ae:	4b07      	ldr	r3, [pc, #28]	; (85cc <next_timeout+0x54>)
    85b0:	691b      	ldr	r3, [r3, #16]
    85b2:	b113      	cbz	r3, 85ba <next_timeout+0x42>
    85b4:	4298      	cmp	r0, r3
    85b6:	bfa8      	it	ge
    85b8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    85ba:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    85bc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    85c0:	e7f5      	b.n	85ae <next_timeout+0x36>
    85c2:	2000      	movs	r0, #0
    85c4:	e7f3      	b.n	85ae <next_timeout+0x36>
    85c6:	bf00      	nop
    85c8:	200002a8 	.word	0x200002a8
    85cc:	2000122c 	.word	0x2000122c

000085d0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    85d0:	f1b3 3fff 	cmp.w	r3, #4294967295
    85d4:	bf08      	it	eq
    85d6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    85da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    85de:	4604      	mov	r4, r0
    85e0:	4692      	mov	sl, r2
    85e2:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    85e4:	d073      	beq.n	86ce <z_add_timeout+0xfe>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    85e6:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    85e8:	f04f 0320 	mov.w	r3, #32
    85ec:	f3ef 8511 	mrs	r5, BASEPRI
    85f0:	f383 8812 	msr	BASEPRI_MAX, r3
    85f4:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    85f8:	f06f 0301 	mvn.w	r3, #1
    85fc:	ebb3 080a 	subs.w	r8, r3, sl
    8600:	f04f 32ff 	mov.w	r2, #4294967295
    8604:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    8608:	f1b8 0f00 	cmp.w	r8, #0
    860c:	f179 0100 	sbcs.w	r1, r9, #0
    8610:	db1c      	blt.n	864c <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    8612:	4830      	ldr	r0, [pc, #192]	; (86d4 <z_add_timeout+0x104>)
    8614:	e9d0 1000 	ldrd	r1, r0, [r0]
    8618:	1a5b      	subs	r3, r3, r1
    861a:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    861e:	ebb3 060a 	subs.w	r6, r3, sl
    8622:	eb62 070b 	sbc.w	r7, r2, fp
    8626:	2e01      	cmp	r6, #1
    8628:	f177 0300 	sbcs.w	r3, r7, #0
    862c:	bfbc      	itt	lt
    862e:	2601      	movlt	r6, #1
    8630:	2700      	movlt	r7, #0
    8632:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
    8636:	4a28      	ldr	r2, [pc, #160]	; (86d8 <z_add_timeout+0x108>)
    8638:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    863c:	4293      	cmp	r3, r2
    863e:	d11e      	bne.n	867e <z_add_timeout+0xae>
	node->prev = tail;
    8640:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    8644:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    8648:	6054      	str	r4, [r2, #4]
}
    864a:	e02d      	b.n	86a8 <z_add_timeout+0xd8>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    864c:	f7ff ff70 	bl	8530 <elapsed>
    8650:	f11a 0301 	adds.w	r3, sl, #1
    8654:	9300      	str	r3, [sp, #0]
    8656:	f14b 0300 	adc.w	r3, fp, #0
    865a:	9301      	str	r3, [sp, #4]
    865c:	e9dd 2300 	ldrd	r2, r3, [sp]
    8660:	1812      	adds	r2, r2, r0
    8662:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    8666:	e9c4 2304 	strd	r2, r3, [r4, #16]
    866a:	e7e4      	b.n	8636 <z_add_timeout+0x66>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    866c:	ebb6 0008 	subs.w	r0, r6, r8
    8670:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
    8674:	4563      	cmp	r3, ip
    8676:	e9c4 0104 	strd	r0, r1, [r4, #16]
    867a:	d0e1      	beq.n	8640 <z_add_timeout+0x70>
    867c:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    867e:	2b00      	cmp	r3, #0
    8680:	d0de      	beq.n	8640 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
    8682:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
    8686:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
    868a:	4546      	cmp	r6, r8
    868c:	eb77 0109 	sbcs.w	r1, r7, r9
    8690:	daec      	bge.n	866c <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
    8692:	ebb8 0006 	subs.w	r0, r8, r6
    8696:	eb69 0107 	sbc.w	r1, r9, r7
    869a:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    869e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    86a0:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    86a4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    86a6:	605c      	str	r4, [r3, #4]
	return list->head == list;
    86a8:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    86aa:	4293      	cmp	r3, r2
    86ac:	d00b      	beq.n	86c6 <z_add_timeout+0xf6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    86ae:	429c      	cmp	r4, r3
    86b0:	d109      	bne.n	86c6 <z_add_timeout+0xf6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    86b2:	f7ff ff61 	bl	8578 <next_timeout>

			if (next_time == 0 ||
    86b6:	b118      	cbz	r0, 86c0 <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
    86b8:	4b08      	ldr	r3, [pc, #32]	; (86dc <z_add_timeout+0x10c>)
			if (next_time == 0 ||
    86ba:	691b      	ldr	r3, [r3, #16]
    86bc:	4283      	cmp	r3, r0
    86be:	d002      	beq.n	86c6 <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
    86c0:	2100      	movs	r1, #0
    86c2:	f7fd fdbb 	bl	623c <sys_clock_set_timeout>
	__asm__ volatile(
    86c6:	f385 8811 	msr	BASEPRI, r5
    86ca:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    86ce:	b003      	add	sp, #12
    86d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    86d4:	200006b0 	.word	0x200006b0
    86d8:	200002a8 	.word	0x200002a8
    86dc:	2000122c 	.word	0x2000122c

000086e0 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    86e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    86e4:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    86e6:	f7ff fa8f 	bl	7c08 <z_time_slice>
	__asm__ volatile(
    86ea:	f04f 0320 	mov.w	r3, #32
    86ee:	f3ef 8411 	mrs	r4, BASEPRI
    86f2:	f383 8812 	msr	BASEPRI_MAX, r3
    86f6:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    86fa:	4d2c      	ldr	r5, [pc, #176]	; (87ac <sys_clock_announce+0xcc>)
    86fc:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 87b0 <sys_clock_announce+0xd0>
	return list->head == list;
    8700:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 87b4 <sys_clock_announce+0xd4>
    8704:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    8706:	4651      	mov	r1, sl
    8708:	f8d5 c000 	ldr.w	ip, [r5]
    870c:	f8db 0000 	ldr.w	r0, [fp]
    8710:	4662      	mov	r2, ip
    8712:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8714:	4558      	cmp	r0, fp
    8716:	e9da 8900 	ldrd	r8, r9, [sl]
    871a:	e9cd 2300 	strd	r2, r3, [sp]
    871e:	d00d      	beq.n	873c <sys_clock_announce+0x5c>
    8720:	b160      	cbz	r0, 873c <sys_clock_announce+0x5c>
    8722:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    8726:	45b4      	cmp	ip, r6
    8728:	41bb      	sbcs	r3, r7
    872a:	da1e      	bge.n	876a <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    872c:	9b00      	ldr	r3, [sp, #0]
    872e:	ebb6 0c03 	subs.w	ip, r6, r3
    8732:	9b01      	ldr	r3, [sp, #4]
    8734:	eb67 0603 	sbc.w	r6, r7, r3
    8738:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
    873c:	9b00      	ldr	r3, [sp, #0]
    873e:	eb13 0208 	adds.w	r2, r3, r8
    8742:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    8744:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
    8748:	eb43 0309 	adc.w	r3, r3, r9
    874c:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
    8750:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    8752:	f7ff ff11 	bl	8578 <next_timeout>
    8756:	4631      	mov	r1, r6
    8758:	f7fd fd70 	bl	623c <sys_clock_set_timeout>
	__asm__ volatile(
    875c:	f384 8811 	msr	BASEPRI, r4
    8760:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    8764:	b003      	add	sp, #12
    8766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    876a:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
    876e:	f04f 0200 	mov.w	r2, #0
    8772:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    8776:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    877a:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    877e:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    8782:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    8786:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    8788:	f7ff fedc 	bl	8544 <remove_timeout>
    878c:	f384 8811 	msr	BASEPRI, r4
    8790:	f3bf 8f6f 	isb	sy
		t->fn(t);
    8794:	6883      	ldr	r3, [r0, #8]
    8796:	4798      	blx	r3
	__asm__ volatile(
    8798:	f04f 0320 	mov.w	r3, #32
    879c:	f3ef 8411 	mrs	r4, BASEPRI
    87a0:	f383 8812 	msr	BASEPRI_MAX, r3
    87a4:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    87a8:	4901      	ldr	r1, [pc, #4]	; (87b0 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    87aa:	e7ad      	b.n	8708 <sys_clock_announce+0x28>
    87ac:	20001264 	.word	0x20001264
    87b0:	200006b0 	.word	0x200006b0
    87b4:	200002a8 	.word	0x200002a8

000087b8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    87b8:	b510      	push	{r4, lr}
    87ba:	f04f 0320 	mov.w	r3, #32
    87be:	f3ef 8411 	mrs	r4, BASEPRI
    87c2:	f383 8812 	msr	BASEPRI_MAX, r3
    87c6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    87ca:	f7fd fd67 	bl	629c <sys_clock_elapsed>
    87ce:	4b06      	ldr	r3, [pc, #24]	; (87e8 <sys_clock_tick_get+0x30>)
    87d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    87d4:	1812      	adds	r2, r2, r0
    87d6:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    87da:	f384 8811 	msr	BASEPRI, r4
    87de:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    87e2:	4610      	mov	r0, r2
    87e4:	4619      	mov	r1, r3
    87e6:	bd10      	pop	{r4, pc}
    87e8:	200006b0 	.word	0x200006b0

000087ec <sys_kernel_version_get>:
 * @return kernel version
 */
uint32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
    87ec:	4800      	ldr	r0, [pc, #0]	; (87f0 <sys_kernel_version_get+0x4>)
    87ee:	4770      	bx	lr
    87f0:	02076300 	.word	0x02076300

000087f4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    87f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    87f8:	4e4b      	ldr	r6, [pc, #300]	; (8928 <work_queue_main+0x134>)
{
    87fa:	b085      	sub	sp, #20
    87fc:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    87fe:	f04f 38ff 	mov.w	r8, #4294967295
    8802:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
    8806:	f04f 0320 	mov.w	r3, #32
    880a:	f3ef 8711 	mrs	r7, BASEPRI
    880e:	f383 8812 	msr	BASEPRI_MAX, r3
    8812:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    8816:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
	return list->head;
    881a:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    881e:	b985      	cbnz	r5, 8842 <work_queue_main+0x4e>
	*flagp &= ~BIT(bit);
    8820:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
    8824:	075d      	lsls	r5, r3, #29
	*flagp &= ~BIT(bit);
    8826:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
		} else if (flag_test_and_clear(&queue->flags,
    882a:	d433      	bmi.n	8894 <work_queue_main+0xa0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    882c:	2300      	movs	r3, #0
    882e:	e9cd 8900 	strd	r8, r9, [sp]
    8832:	9302      	str	r3, [sp, #8]
    8834:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
    8838:	4639      	mov	r1, r7
    883a:	483c      	ldr	r0, [pc, #240]	; (892c <work_queue_main+0x138>)
    883c:	f7ff fc88 	bl	8150 <z_sched_wait>
			continue;
    8840:	e7e1      	b.n	8806 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8842:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
    8846:	6829      	ldr	r1, [r5, #0]
	list->head = node;
    8848:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    884c:	4295      	cmp	r5, r2
    884e:	d101      	bne.n	8854 <work_queue_main+0x60>
	list->tail = node;
    8850:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
	*flagp |= BIT(bit);
    8854:	f043 0302 	orr.w	r3, r3, #2
    8858:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	*flagp &= ~BIT(bit);
    885c:	68eb      	ldr	r3, [r5, #12]
    885e:	f023 0304 	bic.w	r3, r3, #4
    8862:	f043 0301 	orr.w	r3, r3, #1
    8866:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    8868:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    886a:	f387 8811 	msr	BASEPRI, r7
    886e:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    8872:	4628      	mov	r0, r5
    8874:	4798      	blx	r3
	__asm__ volatile(
    8876:	f04f 0320 	mov.w	r3, #32
    887a:	f3ef 8b11 	mrs	fp, BASEPRI
    887e:	f383 8812 	msr	BASEPRI_MAX, r3
    8882:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    8886:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8888:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    888a:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    888e:	d40b      	bmi.n	88a8 <work_queue_main+0xb4>
	*flagp &= ~BIT(bit);
    8890:	60ea      	str	r2, [r5, #12]
    8892:	e00e      	b.n	88b2 <work_queue_main+0xbe>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    8894:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    8898:	2200      	movs	r2, #0
    889a:	2101      	movs	r1, #1
    889c:	4628      	mov	r0, r5
    889e:	f003 f854 	bl	b94a <z_sched_wake>
    88a2:	2800      	cmp	r0, #0
    88a4:	d1f8      	bne.n	8898 <work_queue_main+0xa4>
    88a6:	e7c1      	b.n	882c <work_queue_main+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    88a8:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    88aa:	f023 0303 	bic.w	r3, r3, #3
    88ae:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    88b0:	b970      	cbnz	r0, 88d0 <work_queue_main+0xdc>
	*flagp &= ~BIT(bit);
    88b2:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    88b6:	f023 0302 	bic.w	r3, r3, #2
    88ba:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	__asm__ volatile(
    88be:	f38b 8811 	msr	BASEPRI, fp
    88c2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    88c6:	05d8      	lsls	r0, r3, #23
    88c8:	d49d      	bmi.n	8806 <work_queue_main+0x12>
	z_impl_k_yield();
    88ca:	f7ff fb2d 	bl	7f28 <z_impl_k_yield>
}
    88ce:	e79a      	b.n	8806 <work_queue_main+0x12>
	return node->next;
    88d0:	6807      	ldr	r7, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    88d2:	f04f 0a00 	mov.w	sl, #0
    88d6:	2f00      	cmp	r7, #0
    88d8:	bf38      	it	cc
    88da:	2700      	movcc	r7, #0
	parent->next = child;
    88dc:	4653      	mov	r3, sl
		if (wc->work == work) {
    88de:	6842      	ldr	r2, [r0, #4]
    88e0:	4295      	cmp	r5, r2
    88e2:	4601      	mov	r1, r0
    88e4:	d10e      	bne.n	8904 <work_queue_main+0x110>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    88e6:	6801      	ldr	r1, [r0, #0]
    88e8:	f1ba 0f00 	cmp.w	sl, #0
    88ec:	d114      	bne.n	8918 <work_queue_main+0x124>
    88ee:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    88f0:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    88f2:	4290      	cmp	r0, r2
    88f4:	d100      	bne.n	88f8 <work_queue_main+0x104>
	list->tail = node;
    88f6:	6071      	str	r1, [r6, #4]
	parent->next = child;
    88f8:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    88fc:	f7ff fc3a 	bl	8174 <z_impl_k_sem_give>
}
    8900:	4651      	mov	r1, sl
    8902:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    8904:	2f00      	cmp	r7, #0
    8906:	d0d4      	beq.n	88b2 <work_queue_main+0xbe>
	return node->next;
    8908:	683a      	ldr	r2, [r7, #0]
    890a:	2a00      	cmp	r2, #0
    890c:	bf38      	it	cc
    890e:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8910:	4638      	mov	r0, r7
    8912:	468a      	mov	sl, r1
    8914:	4617      	mov	r7, r2
    8916:	e7e2      	b.n	88de <work_queue_main+0xea>
	parent->next = child;
    8918:	f8ca 1000 	str.w	r1, [sl]
Z_GENLIST_REMOVE(slist, snode)
    891c:	6872      	ldr	r2, [r6, #4]
    891e:	4290      	cmp	r0, r2
	list->tail = node;
    8920:	bf08      	it	eq
    8922:	f8c6 a004 	streq.w	sl, [r6, #4]
}
    8926:	e7e7      	b.n	88f8 <work_queue_main+0x104>
    8928:	20001268 	.word	0x20001268
    892c:	2000170d 	.word	0x2000170d

00008930 <submit_to_queue_locked>:
{
    8930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8932:	68c3      	ldr	r3, [r0, #12]
    8934:	079a      	lsls	r2, r3, #30
{
    8936:	4604      	mov	r4, r0
    8938:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    893a:	f3c3 0540 	ubfx	r5, r3, #1, #1
    893e:	d41f      	bmi.n	8980 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    8940:	075f      	lsls	r7, r3, #29
    8942:	d41f      	bmi.n	8984 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    8944:	680a      	ldr	r2, [r1, #0]
    8946:	b90a      	cbnz	r2, 894c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    8948:	6882      	ldr	r2, [r0, #8]
    894a:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    894c:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    894e:	bf44      	itt	mi
    8950:	68a3      	ldrmi	r3, [r4, #8]
    8952:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    8954:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    8956:	bf4c      	ite	mi
    8958:	2502      	movmi	r5, #2
		ret = 1;
    895a:	2501      	movpl	r5, #1
	if (queue == NULL) {
    895c:	b37f      	cbz	r7, 89be <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    895e:	4b1b      	ldr	r3, [pc, #108]	; (89cc <submit_to_queue_locked+0x9c>)
    8960:	689b      	ldr	r3, [r3, #8]
    8962:	42bb      	cmp	r3, r7
    8964:	d111      	bne.n	898a <submit_to_queue_locked+0x5a>
    8966:	f003 f80e 	bl	b986 <k_is_in_isr>
    896a:	f080 0001 	eor.w	r0, r0, #1
    896e:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
    8970:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    8974:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    8976:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    897a:	d523      	bpl.n	89c4 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
    897c:	b13a      	cbz	r2, 898e <submit_to_queue_locked+0x5e>
    897e:	b940      	cbnz	r0, 8992 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    8980:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    8984:	2300      	movs	r3, #0
    8986:	6033      	str	r3, [r6, #0]
	return ret;
    8988:	e013      	b.n	89b2 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    898a:	2000      	movs	r0, #0
    898c:	e7f0      	b.n	8970 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    898e:	071b      	lsls	r3, r3, #28
    8990:	d4f6      	bmi.n	8980 <submit_to_queue_locked+0x50>
	parent->next = child;
    8992:	2300      	movs	r3, #0
    8994:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    8996:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    899a:	b963      	cbnz	r3, 89b6 <submit_to_queue_locked+0x86>
	list->head = node;
    899c:	e9c7 442e 	strd	r4, r4, [r7, #184]	; 0xb8
		(void)notify_queue_locked(queue);
    89a0:	4638      	mov	r0, r7
    89a2:	f003 f852 	bl	ba4a <notify_queue_locked>
	*flagp |= BIT(bit);
    89a6:	68e3      	ldr	r3, [r4, #12]
    89a8:	f043 0304 	orr.w	r3, r3, #4
    89ac:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    89ae:	6833      	ldr	r3, [r6, #0]
    89b0:	60a3      	str	r3, [r4, #8]
}
    89b2:	4628      	mov	r0, r5
    89b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    89b6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    89b8:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
}
    89bc:	e7f0      	b.n	89a0 <submit_to_queue_locked+0x70>
		return -EINVAL;
    89be:	f06f 0515 	mvn.w	r5, #21
    89c2:	e7df      	b.n	8984 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    89c4:	f06f 0512 	mvn.w	r5, #18
    89c8:	e7dc      	b.n	8984 <submit_to_queue_locked+0x54>
    89ca:	bf00      	nop
    89cc:	2000122c 	.word	0x2000122c

000089d0 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    89d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    89d2:	b089      	sub	sp, #36	; 0x24
    89d4:	4604      	mov	r4, r0
	list->head = NULL;
    89d6:	2000      	movs	r0, #0
	list->tail = NULL;
    89d8:	e9c4 002e 	strd	r0, r0, [r4, #184]	; 0xb8
    89dc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    89de:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->tail = (sys_dnode_t *)list;
    89e2:	e9c4 0030 	strd	r0, r0, [r4, #192]	; 0xc0
    89e6:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    89ea:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    89ee:	b31d      	cbz	r5, 8a38 <k_work_queue_start+0x68>
    89f0:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    89f2:	2800      	cmp	r0, #0
    89f4:	f240 1001 	movw	r0, #257	; 0x101
    89f8:	bf08      	it	eq
    89fa:	2001      	moveq	r0, #1
	*flagp = flags;
    89fc:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    8a00:	2000      	movs	r0, #0
    8a02:	f04f 36ff 	mov.w	r6, #4294967295
    8a06:	f04f 37ff 	mov.w	r7, #4294967295
    8a0a:	e9cd 3003 	strd	r3, r0, [sp, #12]
    8a0e:	e9cd 0001 	strd	r0, r0, [sp, #4]
    8a12:	e9cd 6706 	strd	r6, r7, [sp, #24]
    8a16:	4b09      	ldr	r3, [pc, #36]	; (8a3c <k_work_queue_start+0x6c>)
    8a18:	9400      	str	r4, [sp, #0]
    8a1a:	4620      	mov	r0, r4
    8a1c:	f7ff fcfe 	bl	841c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    8a20:	b125      	cbz	r5, 8a2c <k_work_queue_start+0x5c>
    8a22:	6829      	ldr	r1, [r5, #0]
    8a24:	b111      	cbz	r1, 8a2c <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    8a26:	4620      	mov	r0, r4
    8a28:	f7ff fc46 	bl	82b8 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    8a2c:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    8a2e:	b009      	add	sp, #36	; 0x24
    8a30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    8a34:	f002 bfaf 	b.w	b996 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    8a38:	2001      	movs	r0, #1
    8a3a:	e7df      	b.n	89fc <k_work_queue_start+0x2c>
    8a3c:	000087f5 	.word	0x000087f5

00008a40 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    8a40:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    8a42:	4806      	ldr	r0, [pc, #24]	; (8a5c <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    8a44:	4a06      	ldr	r2, [pc, #24]	; (8a60 <z_data_copy+0x20>)
    8a46:	4907      	ldr	r1, [pc, #28]	; (8a64 <z_data_copy+0x24>)
    8a48:	1a12      	subs	r2, r2, r0
    8a4a:	f001 fdd3 	bl	a5f4 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    8a4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    8a52:	4a05      	ldr	r2, [pc, #20]	; (8a68 <z_data_copy+0x28>)
    8a54:	4905      	ldr	r1, [pc, #20]	; (8a6c <z_data_copy+0x2c>)
    8a56:	4806      	ldr	r0, [pc, #24]	; (8a70 <z_data_copy+0x30>)
    8a58:	f001 bdcc 	b.w	a5f4 <memcpy>
    8a5c:	20000000 	.word	0x20000000
    8a60:	2000037c 	.word	0x2000037c
    8a64:	0000dd50 	.word	0x0000dd50
    8a68:	00000000 	.word	0x00000000
    8a6c:	0000dd50 	.word	0x0000dd50
    8a70:	20000000 	.word	0x20000000

00008a74 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    8a74:	4a02      	ldr	r2, [pc, #8]	; (8a80 <boot_banner+0xc>)
    8a76:	4903      	ldr	r1, [pc, #12]	; (8a84 <boot_banner+0x10>)
    8a78:	4803      	ldr	r0, [pc, #12]	; (8a88 <boot_banner+0x14>)
    8a7a:	f000 bcce 	b.w	941a <printk>
    8a7e:	bf00      	nop
    8a80:	0000cb46 	.word	0x0000cb46
    8a84:	0000dd1a 	.word	0x0000dd1a
    8a88:	0000dd29 	.word	0x0000dd29

00008a8c <nrf_cc3xx_platform_init_no_rng>:
    8a8c:	b510      	push	{r4, lr}
    8a8e:	4c0a      	ldr	r4, [pc, #40]	; (8ab8 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    8a90:	6823      	ldr	r3, [r4, #0]
    8a92:	b11b      	cbz	r3, 8a9c <nrf_cc3xx_platform_init_no_rng+0x10>
    8a94:	2301      	movs	r3, #1
    8a96:	6023      	str	r3, [r4, #0]
    8a98:	2000      	movs	r0, #0
    8a9a:	bd10      	pop	{r4, pc}
    8a9c:	f000 f8d6 	bl	8c4c <CC_LibInitNoRng>
    8aa0:	2800      	cmp	r0, #0
    8aa2:	d0f7      	beq.n	8a94 <nrf_cc3xx_platform_init_no_rng+0x8>
    8aa4:	3801      	subs	r0, #1
    8aa6:	2806      	cmp	r0, #6
    8aa8:	d803      	bhi.n	8ab2 <nrf_cc3xx_platform_init_no_rng+0x26>
    8aaa:	4b04      	ldr	r3, [pc, #16]	; (8abc <nrf_cc3xx_platform_init_no_rng+0x30>)
    8aac:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    8ab0:	bd10      	pop	{r4, pc}
    8ab2:	4803      	ldr	r0, [pc, #12]	; (8ac0 <nrf_cc3xx_platform_init_no_rng+0x34>)
    8ab4:	bd10      	pop	{r4, pc}
    8ab6:	bf00      	nop
    8ab8:	20001270 	.word	0x20001270
    8abc:	0000c5e0 	.word	0x0000c5e0
    8ac0:	ffff8ffe 	.word	0xffff8ffe

00008ac4 <nrf_cc3xx_platform_abort>:
    8ac4:	f3bf 8f4f 	dsb	sy
    8ac8:	4905      	ldr	r1, [pc, #20]	; (8ae0 <nrf_cc3xx_platform_abort+0x1c>)
    8aca:	4b06      	ldr	r3, [pc, #24]	; (8ae4 <nrf_cc3xx_platform_abort+0x20>)
    8acc:	68ca      	ldr	r2, [r1, #12]
    8ace:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    8ad2:	4313      	orrs	r3, r2
    8ad4:	60cb      	str	r3, [r1, #12]
    8ad6:	f3bf 8f4f 	dsb	sy
    8ada:	bf00      	nop
    8adc:	e7fd      	b.n	8ada <nrf_cc3xx_platform_abort+0x16>
    8ade:	bf00      	nop
    8ae0:	e000ed00 	.word	0xe000ed00
    8ae4:	05fa0004 	.word	0x05fa0004

00008ae8 <CC_PalAbort>:
    8ae8:	b4f0      	push	{r4, r5, r6, r7}
    8aea:	4f09      	ldr	r7, [pc, #36]	; (8b10 <CC_PalAbort+0x28>)
    8aec:	4e09      	ldr	r6, [pc, #36]	; (8b14 <CC_PalAbort+0x2c>)
    8aee:	4c0a      	ldr	r4, [pc, #40]	; (8b18 <CC_PalAbort+0x30>)
    8af0:	4a0a      	ldr	r2, [pc, #40]	; (8b1c <CC_PalAbort+0x34>)
    8af2:	4d0b      	ldr	r5, [pc, #44]	; (8b20 <CC_PalAbort+0x38>)
    8af4:	490b      	ldr	r1, [pc, #44]	; (8b24 <CC_PalAbort+0x3c>)
    8af6:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    8afa:	603b      	str	r3, [r7, #0]
    8afc:	6852      	ldr	r2, [r2, #4]
    8afe:	6033      	str	r3, [r6, #0]
    8b00:	6023      	str	r3, [r4, #0]
    8b02:	2400      	movs	r4, #0
    8b04:	602b      	str	r3, [r5, #0]
    8b06:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    8b0a:	bcf0      	pop	{r4, r5, r6, r7}
    8b0c:	4710      	bx	r2
    8b0e:	bf00      	nop
    8b10:	5002b400 	.word	0x5002b400
    8b14:	5002b404 	.word	0x5002b404
    8b18:	5002b408 	.word	0x5002b408
    8b1c:	200002b0 	.word	0x200002b0
    8b20:	5002b40c 	.word	0x5002b40c
    8b24:	5002a000 	.word	0x5002a000

00008b28 <nrf_cc3xx_platform_set_abort>:
    8b28:	e9d0 1200 	ldrd	r1, r2, [r0]
    8b2c:	4b01      	ldr	r3, [pc, #4]	; (8b34 <nrf_cc3xx_platform_set_abort+0xc>)
    8b2e:	e9c3 1200 	strd	r1, r2, [r3]
    8b32:	4770      	bx	lr
    8b34:	200002b0 	.word	0x200002b0

00008b38 <mutex_free>:
    8b38:	b510      	push	{r4, lr}
    8b3a:	4604      	mov	r4, r0
    8b3c:	b130      	cbz	r0, 8b4c <mutex_free+0x14>
    8b3e:	6863      	ldr	r3, [r4, #4]
    8b40:	06db      	lsls	r3, r3, #27
    8b42:	d502      	bpl.n	8b4a <mutex_free+0x12>
    8b44:	2300      	movs	r3, #0
    8b46:	6023      	str	r3, [r4, #0]
    8b48:	6063      	str	r3, [r4, #4]
    8b4a:	bd10      	pop	{r4, pc}
    8b4c:	4b02      	ldr	r3, [pc, #8]	; (8b58 <mutex_free+0x20>)
    8b4e:	4803      	ldr	r0, [pc, #12]	; (8b5c <mutex_free+0x24>)
    8b50:	685b      	ldr	r3, [r3, #4]
    8b52:	4798      	blx	r3
    8b54:	e7f3      	b.n	8b3e <mutex_free+0x6>
    8b56:	bf00      	nop
    8b58:	200002b0 	.word	0x200002b0
    8b5c:	0000c5fc 	.word	0x0000c5fc

00008b60 <mutex_unlock>:
    8b60:	b168      	cbz	r0, 8b7e <mutex_unlock+0x1e>
    8b62:	6843      	ldr	r3, [r0, #4]
    8b64:	b13b      	cbz	r3, 8b76 <mutex_unlock+0x16>
    8b66:	06db      	lsls	r3, r3, #27
    8b68:	d507      	bpl.n	8b7a <mutex_unlock+0x1a>
    8b6a:	f3bf 8f5f 	dmb	sy
    8b6e:	2300      	movs	r3, #0
    8b70:	6003      	str	r3, [r0, #0]
    8b72:	4618      	mov	r0, r3
    8b74:	4770      	bx	lr
    8b76:	4803      	ldr	r0, [pc, #12]	; (8b84 <mutex_unlock+0x24>)
    8b78:	4770      	bx	lr
    8b7a:	4803      	ldr	r0, [pc, #12]	; (8b88 <mutex_unlock+0x28>)
    8b7c:	4770      	bx	lr
    8b7e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8b82:	4770      	bx	lr
    8b84:	ffff8fea 	.word	0xffff8fea
    8b88:	ffff8fe9 	.word	0xffff8fe9

00008b8c <mutex_init>:
    8b8c:	b510      	push	{r4, lr}
    8b8e:	4604      	mov	r4, r0
    8b90:	b120      	cbz	r0, 8b9c <mutex_init+0x10>
    8b92:	2200      	movs	r2, #0
    8b94:	2311      	movs	r3, #17
    8b96:	6022      	str	r2, [r4, #0]
    8b98:	6063      	str	r3, [r4, #4]
    8b9a:	bd10      	pop	{r4, pc}
    8b9c:	4801      	ldr	r0, [pc, #4]	; (8ba4 <mutex_init+0x18>)
    8b9e:	f7ff ffa3 	bl	8ae8 <CC_PalAbort>
    8ba2:	e7f6      	b.n	8b92 <mutex_init+0x6>
    8ba4:	0000c624 	.word	0x0000c624

00008ba8 <mutex_lock>:
    8ba8:	b1c0      	cbz	r0, 8bdc <mutex_lock+0x34>
    8baa:	6843      	ldr	r3, [r0, #4]
    8bac:	b1a3      	cbz	r3, 8bd8 <mutex_lock+0x30>
    8bae:	06db      	lsls	r3, r3, #27
    8bb0:	d510      	bpl.n	8bd4 <mutex_lock+0x2c>
    8bb2:	2201      	movs	r2, #1
    8bb4:	f3bf 8f5b 	dmb	ish
    8bb8:	e850 3f00 	ldrex	r3, [r0]
    8bbc:	e840 2100 	strex	r1, r2, [r0]
    8bc0:	2900      	cmp	r1, #0
    8bc2:	d1f9      	bne.n	8bb8 <mutex_lock+0x10>
    8bc4:	f3bf 8f5b 	dmb	ish
    8bc8:	2b01      	cmp	r3, #1
    8bca:	d0f3      	beq.n	8bb4 <mutex_lock+0xc>
    8bcc:	f3bf 8f5f 	dmb	sy
    8bd0:	2000      	movs	r0, #0
    8bd2:	4770      	bx	lr
    8bd4:	4803      	ldr	r0, [pc, #12]	; (8be4 <mutex_lock+0x3c>)
    8bd6:	4770      	bx	lr
    8bd8:	4803      	ldr	r0, [pc, #12]	; (8be8 <mutex_lock+0x40>)
    8bda:	4770      	bx	lr
    8bdc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8be0:	4770      	bx	lr
    8be2:	bf00      	nop
    8be4:	ffff8fe9 	.word	0xffff8fe9
    8be8:	ffff8fea 	.word	0xffff8fea

00008bec <nrf_cc3xx_platform_set_mutexes>:
    8bec:	b570      	push	{r4, r5, r6, lr}
    8bee:	e9d0 2300 	ldrd	r2, r3, [r0]
    8bf2:	4c13      	ldr	r4, [pc, #76]	; (8c40 <nrf_cc3xx_platform_set_mutexes+0x54>)
    8bf4:	4d13      	ldr	r5, [pc, #76]	; (8c44 <nrf_cc3xx_platform_set_mutexes+0x58>)
    8bf6:	e9c4 2300 	strd	r2, r3, [r4]
    8bfa:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    8bfe:	e9c4 6302 	strd	r6, r3, [r4, #8]
    8c02:	4b11      	ldr	r3, [pc, #68]	; (8c48 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    8c04:	6808      	ldr	r0, [r1, #0]
    8c06:	6018      	str	r0, [r3, #0]
    8c08:	6848      	ldr	r0, [r1, #4]
    8c0a:	6058      	str	r0, [r3, #4]
    8c0c:	6888      	ldr	r0, [r1, #8]
    8c0e:	6098      	str	r0, [r3, #8]
    8c10:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    8c14:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    8c18:	60de      	str	r6, [r3, #12]
    8c1a:	6118      	str	r0, [r3, #16]
    8c1c:	06cb      	lsls	r3, r1, #27
    8c1e:	d50d      	bpl.n	8c3c <nrf_cc3xx_platform_set_mutexes+0x50>
    8c20:	2300      	movs	r3, #0
    8c22:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    8c26:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    8c2a:	f505 7088 	add.w	r0, r5, #272	; 0x110
    8c2e:	4790      	blx	r2
    8c30:	6823      	ldr	r3, [r4, #0]
    8c32:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    8c36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8c3a:	4718      	bx	r3
    8c3c:	bd70      	pop	{r4, r5, r6, pc}
    8c3e:	bf00      	nop
    8c40:	200002c0 	.word	0x200002c0
    8c44:	20001710 	.word	0x20001710
    8c48:	200002d0 	.word	0x200002d0

00008c4c <CC_LibInitNoRng>:
    8c4c:	b510      	push	{r4, lr}
    8c4e:	f000 f833 	bl	8cb8 <CC_HalInit>
    8c52:	b120      	cbz	r0, 8c5e <CC_LibInitNoRng+0x12>
    8c54:	2403      	movs	r4, #3
    8c56:	f000 f867 	bl	8d28 <CC_PalTerminate>
    8c5a:	4620      	mov	r0, r4
    8c5c:	bd10      	pop	{r4, pc}
    8c5e:	f000 f835 	bl	8ccc <CC_PalInit>
    8c62:	b990      	cbnz	r0, 8c8a <CC_LibInitNoRng+0x3e>
    8c64:	f000 f8b0 	bl	8dc8 <CC_PalPowerSaveModeSelect>
    8c68:	b990      	cbnz	r0, 8c90 <CC_LibInitNoRng+0x44>
    8c6a:	4b0f      	ldr	r3, [pc, #60]	; (8ca8 <CC_LibInitNoRng+0x5c>)
    8c6c:	681b      	ldr	r3, [r3, #0]
    8c6e:	0e1b      	lsrs	r3, r3, #24
    8c70:	2bf0      	cmp	r3, #240	; 0xf0
    8c72:	d108      	bne.n	8c86 <CC_LibInitNoRng+0x3a>
    8c74:	4a0d      	ldr	r2, [pc, #52]	; (8cac <CC_LibInitNoRng+0x60>)
    8c76:	4b0e      	ldr	r3, [pc, #56]	; (8cb0 <CC_LibInitNoRng+0x64>)
    8c78:	6812      	ldr	r2, [r2, #0]
    8c7a:	429a      	cmp	r2, r3
    8c7c:	d00a      	beq.n	8c94 <CC_LibInitNoRng+0x48>
    8c7e:	2407      	movs	r4, #7
    8c80:	f000 f81c 	bl	8cbc <CC_HalTerminate>
    8c84:	e7e7      	b.n	8c56 <CC_LibInitNoRng+0xa>
    8c86:	2406      	movs	r4, #6
    8c88:	e7fa      	b.n	8c80 <CC_LibInitNoRng+0x34>
    8c8a:	2404      	movs	r4, #4
    8c8c:	4620      	mov	r0, r4
    8c8e:	bd10      	pop	{r4, pc}
    8c90:	2400      	movs	r4, #0
    8c92:	e7f5      	b.n	8c80 <CC_LibInitNoRng+0x34>
    8c94:	2001      	movs	r0, #1
    8c96:	f000 f897 	bl	8dc8 <CC_PalPowerSaveModeSelect>
    8c9a:	4604      	mov	r4, r0
    8c9c:	2800      	cmp	r0, #0
    8c9e:	d1f7      	bne.n	8c90 <CC_LibInitNoRng+0x44>
    8ca0:	4b04      	ldr	r3, [pc, #16]	; (8cb4 <CC_LibInitNoRng+0x68>)
    8ca2:	6018      	str	r0, [r3, #0]
    8ca4:	e7d9      	b.n	8c5a <CC_LibInitNoRng+0xe>
    8ca6:	bf00      	nop
    8ca8:	5002b928 	.word	0x5002b928
    8cac:	5002ba24 	.word	0x5002ba24
    8cb0:	20e00000 	.word	0x20e00000
    8cb4:	5002ba0c 	.word	0x5002ba0c

00008cb8 <CC_HalInit>:
    8cb8:	2000      	movs	r0, #0
    8cba:	4770      	bx	lr

00008cbc <CC_HalTerminate>:
    8cbc:	2000      	movs	r0, #0
    8cbe:	4770      	bx	lr

00008cc0 <CC_HalMaskInterrupt>:
    8cc0:	4b01      	ldr	r3, [pc, #4]	; (8cc8 <CC_HalMaskInterrupt+0x8>)
    8cc2:	6018      	str	r0, [r3, #0]
    8cc4:	4770      	bx	lr
    8cc6:	bf00      	nop
    8cc8:	5002ba04 	.word	0x5002ba04

00008ccc <CC_PalInit>:
    8ccc:	b510      	push	{r4, lr}
    8cce:	4811      	ldr	r0, [pc, #68]	; (8d14 <CC_PalInit+0x48>)
    8cd0:	f000 f848 	bl	8d64 <CC_PalMutexCreate>
    8cd4:	b100      	cbz	r0, 8cd8 <CC_PalInit+0xc>
    8cd6:	bd10      	pop	{r4, pc}
    8cd8:	480f      	ldr	r0, [pc, #60]	; (8d18 <CC_PalInit+0x4c>)
    8cda:	f000 f843 	bl	8d64 <CC_PalMutexCreate>
    8cde:	2800      	cmp	r0, #0
    8ce0:	d1f9      	bne.n	8cd6 <CC_PalInit+0xa>
    8ce2:	4c0e      	ldr	r4, [pc, #56]	; (8d1c <CC_PalInit+0x50>)
    8ce4:	4620      	mov	r0, r4
    8ce6:	f000 f83d 	bl	8d64 <CC_PalMutexCreate>
    8cea:	2800      	cmp	r0, #0
    8cec:	d1f3      	bne.n	8cd6 <CC_PalInit+0xa>
    8cee:	4b0c      	ldr	r3, [pc, #48]	; (8d20 <CC_PalInit+0x54>)
    8cf0:	480c      	ldr	r0, [pc, #48]	; (8d24 <CC_PalInit+0x58>)
    8cf2:	601c      	str	r4, [r3, #0]
    8cf4:	f000 f836 	bl	8d64 <CC_PalMutexCreate>
    8cf8:	4601      	mov	r1, r0
    8cfa:	2800      	cmp	r0, #0
    8cfc:	d1eb      	bne.n	8cd6 <CC_PalInit+0xa>
    8cfe:	f000 f82d 	bl	8d5c <CC_PalDmaInit>
    8d02:	4604      	mov	r4, r0
    8d04:	b108      	cbz	r0, 8d0a <CC_PalInit+0x3e>
    8d06:	4620      	mov	r0, r4
    8d08:	bd10      	pop	{r4, pc}
    8d0a:	f000 f83f 	bl	8d8c <CC_PalPowerSaveModeInit>
    8d0e:	4620      	mov	r0, r4
    8d10:	e7fa      	b.n	8d08 <CC_PalInit+0x3c>
    8d12:	bf00      	nop
    8d14:	20000308 	.word	0x20000308
    8d18:	200002fc 	.word	0x200002fc
    8d1c:	20000304 	.word	0x20000304
    8d20:	2000030c 	.word	0x2000030c
    8d24:	20000300 	.word	0x20000300

00008d28 <CC_PalTerminate>:
    8d28:	b508      	push	{r3, lr}
    8d2a:	4808      	ldr	r0, [pc, #32]	; (8d4c <CC_PalTerminate+0x24>)
    8d2c:	f000 f824 	bl	8d78 <CC_PalMutexDestroy>
    8d30:	4807      	ldr	r0, [pc, #28]	; (8d50 <CC_PalTerminate+0x28>)
    8d32:	f000 f821 	bl	8d78 <CC_PalMutexDestroy>
    8d36:	4807      	ldr	r0, [pc, #28]	; (8d54 <CC_PalTerminate+0x2c>)
    8d38:	f000 f81e 	bl	8d78 <CC_PalMutexDestroy>
    8d3c:	4806      	ldr	r0, [pc, #24]	; (8d58 <CC_PalTerminate+0x30>)
    8d3e:	f000 f81b 	bl	8d78 <CC_PalMutexDestroy>
    8d42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    8d46:	f000 b80b 	b.w	8d60 <CC_PalDmaTerminate>
    8d4a:	bf00      	nop
    8d4c:	20000308 	.word	0x20000308
    8d50:	200002fc 	.word	0x200002fc
    8d54:	20000304 	.word	0x20000304
    8d58:	20000300 	.word	0x20000300

00008d5c <CC_PalDmaInit>:
    8d5c:	2000      	movs	r0, #0
    8d5e:	4770      	bx	lr

00008d60 <CC_PalDmaTerminate>:
    8d60:	4770      	bx	lr
    8d62:	bf00      	nop

00008d64 <CC_PalMutexCreate>:
    8d64:	b508      	push	{r3, lr}
    8d66:	4b03      	ldr	r3, [pc, #12]	; (8d74 <CC_PalMutexCreate+0x10>)
    8d68:	6802      	ldr	r2, [r0, #0]
    8d6a:	681b      	ldr	r3, [r3, #0]
    8d6c:	6810      	ldr	r0, [r2, #0]
    8d6e:	4798      	blx	r3
    8d70:	2000      	movs	r0, #0
    8d72:	bd08      	pop	{r3, pc}
    8d74:	200002c0 	.word	0x200002c0

00008d78 <CC_PalMutexDestroy>:
    8d78:	b508      	push	{r3, lr}
    8d7a:	4b03      	ldr	r3, [pc, #12]	; (8d88 <CC_PalMutexDestroy+0x10>)
    8d7c:	6802      	ldr	r2, [r0, #0]
    8d7e:	685b      	ldr	r3, [r3, #4]
    8d80:	6810      	ldr	r0, [r2, #0]
    8d82:	4798      	blx	r3
    8d84:	2000      	movs	r0, #0
    8d86:	bd08      	pop	{r3, pc}
    8d88:	200002c0 	.word	0x200002c0

00008d8c <CC_PalPowerSaveModeInit>:
    8d8c:	b570      	push	{r4, r5, r6, lr}
    8d8e:	4c09      	ldr	r4, [pc, #36]	; (8db4 <CC_PalPowerSaveModeInit+0x28>)
    8d90:	4d09      	ldr	r5, [pc, #36]	; (8db8 <CC_PalPowerSaveModeInit+0x2c>)
    8d92:	6920      	ldr	r0, [r4, #16]
    8d94:	68ab      	ldr	r3, [r5, #8]
    8d96:	4798      	blx	r3
    8d98:	b118      	cbz	r0, 8da2 <CC_PalPowerSaveModeInit+0x16>
    8d9a:	4b08      	ldr	r3, [pc, #32]	; (8dbc <CC_PalPowerSaveModeInit+0x30>)
    8d9c:	4808      	ldr	r0, [pc, #32]	; (8dc0 <CC_PalPowerSaveModeInit+0x34>)
    8d9e:	685b      	ldr	r3, [r3, #4]
    8da0:	4798      	blx	r3
    8da2:	4a08      	ldr	r2, [pc, #32]	; (8dc4 <CC_PalPowerSaveModeInit+0x38>)
    8da4:	68eb      	ldr	r3, [r5, #12]
    8da6:	6920      	ldr	r0, [r4, #16]
    8da8:	2100      	movs	r1, #0
    8daa:	6011      	str	r1, [r2, #0]
    8dac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8db0:	4718      	bx	r3
    8db2:	bf00      	nop
    8db4:	200002d0 	.word	0x200002d0
    8db8:	200002c0 	.word	0x200002c0
    8dbc:	200002b0 	.word	0x200002b0
    8dc0:	0000c648 	.word	0x0000c648
    8dc4:	20001284 	.word	0x20001284

00008dc8 <CC_PalPowerSaveModeSelect>:
    8dc8:	b570      	push	{r4, r5, r6, lr}
    8dca:	4d1a      	ldr	r5, [pc, #104]	; (8e34 <CC_PalPowerSaveModeSelect+0x6c>)
    8dcc:	4e1a      	ldr	r6, [pc, #104]	; (8e38 <CC_PalPowerSaveModeSelect+0x70>)
    8dce:	4604      	mov	r4, r0
    8dd0:	68b2      	ldr	r2, [r6, #8]
    8dd2:	6928      	ldr	r0, [r5, #16]
    8dd4:	4790      	blx	r2
    8dd6:	b9f0      	cbnz	r0, 8e16 <CC_PalPowerSaveModeSelect+0x4e>
    8dd8:	b15c      	cbz	r4, 8df2 <CC_PalPowerSaveModeSelect+0x2a>
    8dda:	4c18      	ldr	r4, [pc, #96]	; (8e3c <CC_PalPowerSaveModeSelect+0x74>)
    8ddc:	6823      	ldr	r3, [r4, #0]
    8dde:	b1ab      	cbz	r3, 8e0c <CC_PalPowerSaveModeSelect+0x44>
    8de0:	2b01      	cmp	r3, #1
    8de2:	d01a      	beq.n	8e1a <CC_PalPowerSaveModeSelect+0x52>
    8de4:	3b01      	subs	r3, #1
    8de6:	6023      	str	r3, [r4, #0]
    8de8:	6928      	ldr	r0, [r5, #16]
    8dea:	68f3      	ldr	r3, [r6, #12]
    8dec:	4798      	blx	r3
    8dee:	2000      	movs	r0, #0
    8df0:	bd70      	pop	{r4, r5, r6, pc}
    8df2:	4c12      	ldr	r4, [pc, #72]	; (8e3c <CC_PalPowerSaveModeSelect+0x74>)
    8df4:	6821      	ldr	r1, [r4, #0]
    8df6:	b939      	cbnz	r1, 8e08 <CC_PalPowerSaveModeSelect+0x40>
    8df8:	4b11      	ldr	r3, [pc, #68]	; (8e40 <CC_PalPowerSaveModeSelect+0x78>)
    8dfa:	4a12      	ldr	r2, [pc, #72]	; (8e44 <CC_PalPowerSaveModeSelect+0x7c>)
    8dfc:	2001      	movs	r0, #1
    8dfe:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    8e02:	6813      	ldr	r3, [r2, #0]
    8e04:	2b00      	cmp	r3, #0
    8e06:	d1fc      	bne.n	8e02 <CC_PalPowerSaveModeSelect+0x3a>
    8e08:	3101      	adds	r1, #1
    8e0a:	6021      	str	r1, [r4, #0]
    8e0c:	68f3      	ldr	r3, [r6, #12]
    8e0e:	6928      	ldr	r0, [r5, #16]
    8e10:	4798      	blx	r3
    8e12:	2000      	movs	r0, #0
    8e14:	bd70      	pop	{r4, r5, r6, pc}
    8e16:	480c      	ldr	r0, [pc, #48]	; (8e48 <CC_PalPowerSaveModeSelect+0x80>)
    8e18:	bd70      	pop	{r4, r5, r6, pc}
    8e1a:	4a0a      	ldr	r2, [pc, #40]	; (8e44 <CC_PalPowerSaveModeSelect+0x7c>)
    8e1c:	6813      	ldr	r3, [r2, #0]
    8e1e:	2b00      	cmp	r3, #0
    8e20:	d1fc      	bne.n	8e1c <CC_PalPowerSaveModeSelect+0x54>
    8e22:	4a07      	ldr	r2, [pc, #28]	; (8e40 <CC_PalPowerSaveModeSelect+0x78>)
    8e24:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    8e28:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    8e2c:	f7ff ff48 	bl	8cc0 <CC_HalMaskInterrupt>
    8e30:	6823      	ldr	r3, [r4, #0]
    8e32:	e7d7      	b.n	8de4 <CC_PalPowerSaveModeSelect+0x1c>
    8e34:	200002d0 	.word	0x200002d0
    8e38:	200002c0 	.word	0x200002c0
    8e3c:	20001284 	.word	0x20001284
    8e40:	5002a000 	.word	0x5002a000
    8e44:	5002b910 	.word	0x5002b910
    8e48:	ffff8fe9 	.word	0xffff8fe9

00008e4c <z_impl_gpio_pin_configure>:
{
    8e4c:	b4f0      	push	{r4, r5, r6, r7}
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    8e4e:	04d4      	lsls	r4, r2, #19
	const struct gpio_driver_api *api =
    8e50:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
    8e52:	6906      	ldr	r6, [r0, #16]
{
    8e54:	4613      	mov	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    8e56:	d506      	bpl.n	8e66 <z_impl_gpio_pin_configure+0x1a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    8e58:	f412 6f40 	tst.w	r2, #3072	; 0xc00
    8e5c:	d003      	beq.n	8e66 <z_impl_gpio_pin_configure+0x1a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    8e5e:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    8e60:	bf48      	it	mi
    8e62:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    8e66:	6834      	ldr	r4, [r6, #0]
    8e68:	2501      	movs	r5, #1
    8e6a:	408d      	lsls	r5, r1
    8e6c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    8e70:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    8e72:	bf4c      	ite	mi
    8e74:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    8e76:	43ac      	bicpl	r4, r5
	return api->pin_configure(port, pin, flags);
    8e78:	683b      	ldr	r3, [r7, #0]
    8e7a:	6034      	str	r4, [r6, #0]
}
    8e7c:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
    8e7e:	4718      	bx	r3

00008e80 <_ldiv5>:
{
    8e80:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
	uint32_t v_lo = *v;
    8e84:	e9d0 2400 	ldrd	r2, r4, [r0]
	__asm__ ("" : "+r" (m));
    8e88:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
    8e8c:	fba2 bc03 	umull	fp, ip, r2, r3
    8e90:	eb1b 0603 	adds.w	r6, fp, r3
    8e94:	eb4c 0503 	adc.w	r5, ip, r3
	result >>= 32;
    8e98:	462f      	mov	r7, r5
	result += (uint64_t)v_hi * m;
    8e9a:	fba4 4503 	umull	r4, r5, r4, r3
    8e9e:	eb1b 0204 	adds.w	r2, fp, r4
	result >>= 32;
    8ea2:	f04f 0600 	mov.w	r6, #0
	result += (uint64_t)v_hi * m;
    8ea6:	eb4c 0105 	adc.w	r1, ip, r5
    8eaa:	19d2      	adds	r2, r2, r7
    8eac:	eb46 0101 	adc.w	r1, r6, r1
	result += (uint64_t)v_hi * m;
    8eb0:	1863      	adds	r3, r4, r1
	result >>= 32;
    8eb2:	4632      	mov	r2, r6
	result += (uint64_t)v_hi * m;
    8eb4:	eb45 0202 	adc.w	r2, r5, r2
	*v = result;
    8eb8:	e9c0 3200 	strd	r3, r2, [r0]
}
    8ebc:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

00008ec0 <_get_digit>:
	if (*digit_count > 0) {
    8ec0:	680b      	ldr	r3, [r1, #0]
    8ec2:	2b00      	cmp	r3, #0
{
    8ec4:	b570      	push	{r4, r5, r6, lr}
    8ec6:	4604      	mov	r4, r0
	if (*digit_count > 0) {
    8ec8:	dd0f      	ble.n	8eea <_get_digit+0x2a>
		*fr *= 10U;
    8eca:	6822      	ldr	r2, [r4, #0]
    8ecc:	6840      	ldr	r0, [r0, #4]
		--*digit_count;
    8ece:	3b01      	subs	r3, #1
    8ed0:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
    8ed2:	210a      	movs	r1, #10
    8ed4:	fba2 5601 	umull	r5, r6, r2, r1
    8ed8:	fb01 6600 	mla	r6, r1, r0, r6
		*fr &= (BIT64(60) - 1U);
    8edc:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
    8ee0:	e9c4 5300 	strd	r5, r3, [r4]
		rval = ((*fr >> 60) & 0xF) + '0';
    8ee4:	0f30      	lsrs	r0, r6, #28
    8ee6:	3030      	adds	r0, #48	; 0x30
}
    8ee8:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
    8eea:	2030      	movs	r0, #48	; 0x30
    8eec:	e7fc      	b.n	8ee8 <_get_digit+0x28>

00008eee <encode_uint>:
{
    8eee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ef2:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    8ef4:	78d3      	ldrb	r3, [r2, #3]
{
    8ef6:	4614      	mov	r4, r2
	switch (specifier) {
    8ef8:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    8efa:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    8efe:	4606      	mov	r6, r0
    8f00:	460f      	mov	r7, r1
    8f02:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    8f04:	d02d      	beq.n	8f62 <encode_uint+0x74>
    8f06:	d828      	bhi.n	8f5a <encode_uint+0x6c>
		return 16;
    8f08:	2b58      	cmp	r3, #88	; 0x58
    8f0a:	bf14      	ite	ne
    8f0c:	250a      	movne	r5, #10
    8f0e:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    8f10:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    8f14:	46aa      	mov	sl, r5
    8f16:	f04f 0b00 	mov.w	fp, #0
    8f1a:	4652      	mov	r2, sl
    8f1c:	465b      	mov	r3, fp
    8f1e:	4630      	mov	r0, r6
    8f20:	4639      	mov	r1, r7
    8f22:	f7f7 fd0b 	bl	93c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8f26:	2a09      	cmp	r2, #9
    8f28:	b2d3      	uxtb	r3, r2
    8f2a:	d81f      	bhi.n	8f6c <encode_uint+0x7e>
    8f2c:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    8f2e:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8f30:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    8f32:	bf08      	it	eq
    8f34:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8f36:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    8f3a:	d301      	bcc.n	8f40 <encode_uint+0x52>
    8f3c:	45c8      	cmp	r8, r9
    8f3e:	d812      	bhi.n	8f66 <encode_uint+0x78>
	if (conv->flag_hash) {
    8f40:	7823      	ldrb	r3, [r4, #0]
    8f42:	069b      	lsls	r3, r3, #26
    8f44:	d505      	bpl.n	8f52 <encode_uint+0x64>
		if (radix == 8) {
    8f46:	2d08      	cmp	r5, #8
    8f48:	d116      	bne.n	8f78 <encode_uint+0x8a>
			conv->altform_0 = true;
    8f4a:	78a3      	ldrb	r3, [r4, #2]
    8f4c:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    8f50:	70a3      	strb	r3, [r4, #2]
}
    8f52:	4640      	mov	r0, r8
    8f54:	b003      	add	sp, #12
    8f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    8f5a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    8f5e:	2b70      	cmp	r3, #112	; 0x70
    8f60:	e7d3      	b.n	8f0a <encode_uint+0x1c>
	switch (specifier) {
    8f62:	2508      	movs	r5, #8
    8f64:	e7d4      	b.n	8f10 <encode_uint+0x22>
		value /= radix;
    8f66:	4606      	mov	r6, r0
    8f68:	460f      	mov	r7, r1
    8f6a:	e7d6      	b.n	8f1a <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8f6c:	9a01      	ldr	r2, [sp, #4]
    8f6e:	2a19      	cmp	r2, #25
    8f70:	bf94      	ite	ls
    8f72:	3337      	addls	r3, #55	; 0x37
    8f74:	3357      	addhi	r3, #87	; 0x57
    8f76:	e7da      	b.n	8f2e <encode_uint+0x40>
		} else if (radix == 16) {
    8f78:	2d10      	cmp	r5, #16
    8f7a:	d1ea      	bne.n	8f52 <encode_uint+0x64>
			conv->altform_0c = true;
    8f7c:	78a3      	ldrb	r3, [r4, #2]
    8f7e:	f043 0310 	orr.w	r3, r3, #16
    8f82:	e7e5      	b.n	8f50 <encode_uint+0x62>

00008f84 <outs>:
{
    8f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f88:	4607      	mov	r7, r0
    8f8a:	4688      	mov	r8, r1
    8f8c:	4615      	mov	r5, r2
    8f8e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    8f90:	4614      	mov	r4, r2
    8f92:	42b4      	cmp	r4, r6
    8f94:	eba4 0005 	sub.w	r0, r4, r5
    8f98:	d302      	bcc.n	8fa0 <outs+0x1c>
    8f9a:	b93e      	cbnz	r6, 8fac <outs+0x28>
    8f9c:	7823      	ldrb	r3, [r4, #0]
    8f9e:	b12b      	cbz	r3, 8fac <outs+0x28>
		int rc = out((int)*sp++, ctx);
    8fa0:	f814 0b01 	ldrb.w	r0, [r4], #1
    8fa4:	4641      	mov	r1, r8
    8fa6:	47b8      	blx	r7
		if (rc < 0) {
    8fa8:	2800      	cmp	r0, #0
    8faa:	daf2      	bge.n	8f92 <outs+0xe>
}
    8fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008fb0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    8fb0:	4770      	bx	lr

00008fb2 <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
    8fb2:	070b      	lsls	r3, r1, #28
    8fb4:	d504      	bpl.n	8fc0 <foldcase+0xe>
    8fb6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    8fba:	2b19      	cmp	r3, #25
			((ua | 32U) - (unsigned)'a' < 6U));
}

static inline int tolower(int chr)
{
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
    8fbc:	bf98      	it	ls
    8fbe:	3020      	addls	r0, #32
        return tolower(ch);
    return ch;
}
    8fc0:	4770      	bx	lr

00008fc2 <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
    8fc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8fc6:	b087      	sub	sp, #28
    8fc8:	468a      	mov	sl, r1
    8fca:	4614      	mov	r4, r2
    8fcc:	9302      	str	r3, [sp, #8]
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
    8fce:	4605      	mov	r5, r0
    8fd0:	b918      	cbnz	r0, 8fda <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
    8fd2:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
    8fd4:	b007      	add	sp, #28
    8fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
    8fda:	2900      	cmp	r1, #0
    8fdc:	d0f9      	beq.n	8fd2 <fnmatchx+0x10>
    if (recursion-- == 0)
    8fde:	9b02      	ldr	r3, [sp, #8]
    8fe0:	2b00      	cmp	r3, #0
    8fe2:	f000 811a 	beq.w	921a <fnmatchx+0x258>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    8fe6:	f004 0304 	and.w	r3, r4, #4
    8fea:	460a      	mov	r2, r1
    8fec:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
    8fee:	46a8      	mov	r8, r5
    8ff0:	4621      	mov	r1, r4
    8ff2:	f818 0b01 	ldrb.w	r0, [r8], #1
    8ff6:	f7ff ffdc 	bl	8fb2 <foldcase>
    8ffa:	4603      	mov	r3, r0
    8ffc:	b2c0      	uxtb	r0, r0
    8ffe:	283f      	cmp	r0, #63	; 0x3f
    9000:	7817      	ldrb	r7, [r2, #0]
    9002:	4606      	mov	r6, r0
    9004:	d024      	beq.n	9050 <fnmatchx+0x8e>
    9006:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    900a:	d10a      	bne.n	9022 <fnmatchx+0x60>
    900c:	b1c0      	cbz	r0, 9040 <fnmatchx+0x7e>
    900e:	282a      	cmp	r0, #42	; 0x2a
    9010:	d035      	beq.n	907e <fnmatchx+0xbc>
            if (c != FOLDCASE(*string++, flags))
    9012:	4621      	mov	r1, r4
    9014:	4638      	mov	r0, r7
    9016:	3201      	adds	r2, #1
    9018:	f7ff ffcb 	bl	8fb2 <foldcase>
    901c:	4286      	cmp	r6, r0
    901e:	d01e      	beq.n	905e <fnmatchx+0x9c>
    9020:	e7d7      	b.n	8fd2 <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
    9022:	285b      	cmp	r0, #91	; 0x5b
    9024:	d07b      	beq.n	911e <fnmatchx+0x15c>
    9026:	285c      	cmp	r0, #92	; 0x5c
    9028:	d1f3      	bne.n	9012 <fnmatchx+0x50>
            if (!(flags & FNM_NOESCAPE)) {
    902a:	07e3      	lsls	r3, r4, #31
    902c:	d4f1      	bmi.n	9012 <fnmatchx+0x50>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
    902e:	7868      	ldrb	r0, [r5, #1]
    9030:	f7ff ffbf 	bl	8fb2 <foldcase>
    9034:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    9038:	bf18      	it	ne
    903a:	f105 0802 	addne.w	r8, r5, #2
    903e:	e7e8      	b.n	9012 <fnmatchx+0x50>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
    9040:	06e4      	lsls	r4, r4, #27
    9042:	d501      	bpl.n	9048 <fnmatchx+0x86>
    9044:	2f2f      	cmp	r7, #47	; 0x2f
    9046:	d0c5      	beq.n	8fd4 <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
    9048:	1e38      	subs	r0, r7, #0
                        0 : FNM_NOMATCH;
    904a:	bf18      	it	ne
    904c:	2001      	movne	r0, #1
    904e:	e7c1      	b.n	8fd4 <fnmatchx+0x12>
            if (*string == EOS)
    9050:	2f00      	cmp	r7, #0
    9052:	d0be      	beq.n	8fd2 <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
    9054:	2f2f      	cmp	r7, #47	; 0x2f
    9056:	d104      	bne.n	9062 <fnmatchx+0xa0>
    9058:	07a1      	lsls	r1, r4, #30
    905a:	d4ba      	bmi.n	8fd2 <fnmatchx+0x10>
            ++string;
    905c:	3201      	adds	r2, #1
            break;
    905e:	4645      	mov	r5, r8
    9060:	e7c5      	b.n	8fee <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    9062:	2f2e      	cmp	r7, #46	; 0x2e
    9064:	d1fa      	bne.n	905c <fnmatchx+0x9a>
    9066:	9b04      	ldr	r3, [sp, #16]
    9068:	2b00      	cmp	r3, #0
    906a:	d0f7      	beq.n	905c <fnmatchx+0x9a>
    906c:	4552      	cmp	r2, sl
    906e:	d0b0      	beq.n	8fd2 <fnmatchx+0x10>
                (string == stringstart ||
    9070:	07a3      	lsls	r3, r4, #30
    9072:	d5f3      	bpl.n	905c <fnmatchx+0x9a>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
    9074:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    9078:	2b2f      	cmp	r3, #47	; 0x2f
    907a:	d1ef      	bne.n	905c <fnmatchx+0x9a>
    907c:	e7a9      	b.n	8fd2 <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
    907e:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
    9080:	f7ff ff97 	bl	8fb2 <foldcase>
    9084:	b2c1      	uxtb	r1, r0
            while (c == '*')
    9086:	292a      	cmp	r1, #42	; 0x2a
    9088:	d018      	beq.n	90bc <fnmatchx+0xfa>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    908a:	2f2e      	cmp	r7, #46	; 0x2e
    908c:	d109      	bne.n	90a2 <fnmatchx+0xe0>
    908e:	9b04      	ldr	r3, [sp, #16]
    9090:	b13b      	cbz	r3, 90a2 <fnmatchx+0xe0>
    9092:	4552      	cmp	r2, sl
    9094:	d09d      	beq.n	8fd2 <fnmatchx+0x10>
                (string == stringstart ||
    9096:	07a7      	lsls	r7, r4, #30
    9098:	d503      	bpl.n	90a2 <fnmatchx+0xe0>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
    909a:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    909e:	2b2f      	cmp	r3, #47	; 0x2f
    90a0:	d097      	beq.n	8fd2 <fnmatchx+0x10>
            if (c == EOS) {
    90a2:	b979      	cbnz	r1, 90c4 <fnmatchx+0x102>
                if (flags & FNM_PATHNAME)
    90a4:	f014 0002 	ands.w	r0, r4, #2
    90a8:	d094      	beq.n	8fd4 <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
    90aa:	06e6      	lsls	r6, r4, #27
    90ac:	f100 80b7 	bmi.w	921e <fnmatchx+0x25c>
                        strchr(string, '/') == NULL ?
    90b0:	212f      	movs	r1, #47	; 0x2f
    90b2:	4610      	mov	r0, r2
    90b4:	f001 fa3e 	bl	a534 <strchr>
                        0 : FNM_NOMATCH;
    90b8:	3800      	subs	r0, #0
    90ba:	e7c6      	b.n	904a <fnmatchx+0x88>
                c = FOLDCASE(*++pattern, flags);
    90bc:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    90c0:	4621      	mov	r1, r4
    90c2:	e7dd      	b.n	9080 <fnmatchx+0xbe>
            } else if (c == '/' && flags & FNM_PATHNAME) {
    90c4:	292f      	cmp	r1, #47	; 0x2f
    90c6:	d021      	beq.n	910c <fnmatchx+0x14a>
    if (recursion-- == 0)
    90c8:	9b02      	ldr	r3, [sp, #8]
    90ca:	4616      	mov	r6, r2
    90cc:	1e5f      	subs	r7, r3, #1
                switch ((e = fnmatchx(pattern, string,
    90ce:	f024 0904 	bic.w	r9, r4, #4
                if (test == '/' && flags & FNM_PATHNAME)
    90d2:	f004 0a02 	and.w	sl, r4, #2
    90d6:	46b3      	mov	fp, r6
            while ((test = FOLDCASE(*string, flags)) != EOS) {
    90d8:	4621      	mov	r1, r4
    90da:	f89b 0000 	ldrb.w	r0, [fp]
    90de:	f7ff ff68 	bl	8fb2 <foldcase>
    90e2:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
    90e6:	f106 0601 	add.w	r6, r6, #1
    90ea:	f43f af72 	beq.w	8fd2 <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
    90ee:	463b      	mov	r3, r7
    90f0:	464a      	mov	r2, r9
    90f2:	4659      	mov	r1, fp
    90f4:	4640      	mov	r0, r8
    90f6:	f7ff ff64 	bl	8fc2 <fnmatchx>
    90fa:	2801      	cmp	r0, #1
    90fc:	f47f af6a 	bne.w	8fd4 <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
    9100:	2d2f      	cmp	r5, #47	; 0x2f
    9102:	d1e8      	bne.n	90d6 <fnmatchx+0x114>
    9104:	f1ba 0f00 	cmp.w	sl, #0
    9108:	d0e5      	beq.n	90d6 <fnmatchx+0x114>
    910a:	e762      	b.n	8fd2 <fnmatchx+0x10>
            } else if (c == '/' && flags & FNM_PATHNAME) {
    910c:	07a5      	lsls	r5, r4, #30
    910e:	d5db      	bpl.n	90c8 <fnmatchx+0x106>
                if ((string = strchr(string, '/')) == NULL)
    9110:	4610      	mov	r0, r2
    9112:	f001 fa0f 	bl	a534 <strchr>
    9116:	4602      	mov	r2, r0
    9118:	2800      	cmp	r0, #0
    911a:	d1a0      	bne.n	905e <fnmatchx+0x9c>
    911c:	e759      	b.n	8fd2 <fnmatchx+0x10>
            if (*string == EOS)
    911e:	2f00      	cmp	r7, #0
    9120:	f43f af57 	beq.w	8fd2 <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
    9124:	2f2f      	cmp	r7, #47	; 0x2f
    9126:	d102      	bne.n	912e <fnmatchx+0x16c>
    9128:	07a0      	lsls	r0, r4, #30
    912a:	f53f af52 	bmi.w	8fd2 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
    912e:	4621      	mov	r1, r4
    9130:	4638      	mov	r0, r7
    9132:	f7ff ff3e 	bl	8fb2 <foldcase>
    9136:	9000      	str	r0, [sp, #0]
    if (pattern == NULL)
    9138:	f1b8 0f00 	cmp.w	r8, #0
    913c:	f43f af49 	beq.w	8fd2 <fnmatchx+0x10>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    9140:	786b      	ldrb	r3, [r5, #1]
    9142:	2b21      	cmp	r3, #33	; 0x21
    9144:	d001      	beq.n	914a <fnmatchx+0x188>
    9146:	2b5e      	cmp	r3, #94	; 0x5e
    9148:	d126      	bne.n	9198 <fnmatchx+0x1d6>
        ++pattern;
    914a:	3502      	adds	r5, #2
    914c:	2301      	movs	r3, #1
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    914e:	9301      	str	r3, [sp, #4]
    need = 1;
    9150:	2301      	movs	r3, #1
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    9152:	ea04 0103 	and.w	r1, r4, r3
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
    9156:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    915a:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
    915c:	462e      	mov	r6, r5
    915e:	4621      	mov	r1, r4
    9160:	f816 0b01 	ldrb.w	r0, [r6], #1
    9164:	9305      	str	r3, [sp, #20]
    9166:	f7ff ff24 	bl	8fb2 <foldcase>
    916a:	fa5f f980 	uxtb.w	r9, r0
    916e:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
    9172:	9b05      	ldr	r3, [sp, #20]
    9174:	d113      	bne.n	919e <fnmatchx+0x1dc>
    9176:	bb2b      	cbnz	r3, 91c4 <fnmatchx+0x202>
    return ok == negate ? NULL : pattern;
    9178:	9b01      	ldr	r3, [sp, #4]
    917a:	455b      	cmp	r3, fp
    917c:	f43f af29 	beq.w	8fd2 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
    9180:	2e00      	cmp	r6, #0
    9182:	f43f af26 	beq.w	8fd2 <fnmatchx+0x10>
            if (r == (void *)-1) {
    9186:	1c71      	adds	r1, r6, #1
    9188:	d103      	bne.n	9192 <fnmatchx+0x1d0>
                if (*string != '[')
    918a:	2f5b      	cmp	r7, #91	; 0x5b
    918c:	f47f af21 	bne.w	8fd2 <fnmatchx+0x10>
    9190:	4646      	mov	r6, r8
            ++string;
    9192:	3201      	adds	r2, #1
            break;
    9194:	46b0      	mov	r8, r6
    9196:	e762      	b.n	905e <fnmatchx+0x9c>
    9198:	4645      	mov	r5, r8
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    919a:	2300      	movs	r3, #0
    919c:	e7d7      	b.n	914e <fnmatchx+0x18c>
        if (c == '/')
    919e:	f1b9 0f2f 	cmp.w	r9, #47	; 0x2f
    91a2:	d0f2      	beq.n	918a <fnmatchx+0x1c8>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    91a4:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    91a8:	d108      	bne.n	91bc <fnmatchx+0x1fa>
    91aa:	9b03      	ldr	r3, [sp, #12]
    91ac:	b953      	cbnz	r3, 91c4 <fnmatchx+0x202>
            c = FOLDCASE(*pattern++, flags);
    91ae:	7868      	ldrb	r0, [r5, #1]
    91b0:	4621      	mov	r1, r4
    91b2:	f7ff fefe 	bl	8fb2 <foldcase>
    91b6:	1cae      	adds	r6, r5, #2
    91b8:	fa5f f980 	uxtb.w	r9, r0
        if (c == EOS)
    91bc:	f1b9 0f00 	cmp.w	r9, #0
    91c0:	f43f af07 	beq.w	8fd2 <fnmatchx+0x10>
        if (*pattern == '-' 
    91c4:	7833      	ldrb	r3, [r6, #0]
    91c6:	2b2d      	cmp	r3, #45	; 0x2d
    91c8:	d120      	bne.n	920c <fnmatchx+0x24a>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
    91ca:	7870      	ldrb	r0, [r6, #1]
    91cc:	4621      	mov	r1, r4
    91ce:	f7ff fef0 	bl	8fb2 <foldcase>
    91d2:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    91d6:	d019      	beq.n	920c <fnmatchx+0x24a>
    91d8:	285d      	cmp	r0, #93	; 0x5d
    91da:	d017      	beq.n	920c <fnmatchx+0x24a>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
    91dc:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
    91de:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
    91e2:	d10a      	bne.n	91fa <fnmatchx+0x238>
    91e4:	9b03      	ldr	r3, [sp, #12]
    91e6:	b943      	cbnz	r3, 91fa <fnmatchx+0x238>
                c2 = FOLDCASE(*pattern++, flags);
    91e8:	78b0      	ldrb	r0, [r6, #2]
    91ea:	f7ff fee2 	bl	8fb2 <foldcase>
            if (c2 == EOS)
    91ee:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
                c2 = FOLDCASE(*pattern++, flags);
    91f2:	f106 0503 	add.w	r5, r6, #3
            if (c2 == EOS)
    91f6:	f43f aeec 	beq.w	8fd2 <fnmatchx+0x10>
            if (c <= test && test <= c2)
    91fa:	9b00      	ldr	r3, [sp, #0]
    91fc:	454b      	cmp	r3, r9
    91fe:	db03      	blt.n	9208 <fnmatchx+0x246>
                ok = 1;
    9200:	4283      	cmp	r3, r0
    9202:	bfd8      	it	le
    9204:	f04f 0b01 	movle.w	fp, #1
            ok = 1;
    9208:	2300      	movs	r3, #0
    920a:	e7a7      	b.n	915c <fnmatchx+0x19a>
        } else if (c == test)
    920c:	9b00      	ldr	r3, [sp, #0]
    920e:	4635      	mov	r5, r6
    9210:	454b      	cmp	r3, r9
    9212:	bf08      	it	eq
    9214:	f04f 0b01 	moveq.w	fp, #1
    9218:	e7f6      	b.n	9208 <fnmatchx+0x246>
        return FNM_NORES;
    921a:	2003      	movs	r0, #3
    921c:	e6da      	b.n	8fd4 <fnmatchx+0x12>
                return 0;
    921e:	4608      	mov	r0, r1
    9220:	e6d8      	b.n	8fd4 <fnmatchx+0x12>

00009222 <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
    9222:	2340      	movs	r3, #64	; 0x40
    9224:	f7ff becd 	b.w	8fc2 <fnmatchx>

00009228 <cmd_kernel_reboot_warm>:
#endif

#if defined(CONFIG_REBOOT)
static int cmd_kernel_reboot_warm(const struct shell *shell,
				  size_t argc, char **argv)
{
    9228:	b508      	push	{r3, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
#if (CONFIG_KERNEL_SHELL_REBOOT_DELAY > 0)
	k_sleep(K_MSEC(CONFIG_KERNEL_SHELL_REBOOT_DELAY));
#endif
	sys_reboot(SYS_REBOOT_WARM);
    922a:	2000      	movs	r0, #0
    922c:	f7f9 fb8c 	bl	2948 <sys_reboot>

00009230 <cmd_kernel_reboot_cold>:
	return 0;
}

static int cmd_kernel_reboot_cold(const struct shell *shell,
				  size_t argc, char **argv)
{
    9230:	b508      	push	{r3, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
#if (CONFIG_KERNEL_SHELL_REBOOT_DELAY > 0)
	k_sleep(K_MSEC(CONFIG_KERNEL_SHELL_REBOOT_DELAY));
#endif
	sys_reboot(SYS_REBOOT_COLD);
    9232:	2001      	movs	r0, #1
    9234:	f7f9 fb88 	bl	2948 <sys_reboot>

00009238 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    9238:	4603      	mov	r3, r0
    923a:	b140      	cbz	r0, 924e <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    923c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    923e:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    9242:	2a02      	cmp	r2, #2
    9244:	d006      	beq.n	9254 <sys_notify_validate+0x1c>
    9246:	2a03      	cmp	r2, #3
    9248:	d004      	beq.n	9254 <sys_notify_validate+0x1c>
    924a:	2a01      	cmp	r2, #1
    924c:	d005      	beq.n	925a <sys_notify_validate+0x22>
		return -EINVAL;
    924e:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
    9252:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    9254:	681a      	ldr	r2, [r3, #0]
    9256:	2a00      	cmp	r2, #0
    9258:	d0f9      	beq.n	924e <sys_notify_validate+0x16>
		notify->result = 0;
    925a:	2000      	movs	r0, #0
    925c:	6098      	str	r0, [r3, #8]
    925e:	4770      	bx	lr

00009260 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9260:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    9262:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    9266:	2a02      	cmp	r2, #2
{
    9268:	b510      	push	{r4, lr}
    926a:	4603      	mov	r3, r0
	notify->result = res;
    926c:	6081      	str	r1, [r0, #8]
	switch (method) {
    926e:	d00a      	beq.n	9286 <sys_notify_finalize+0x26>
    9270:	2a03      	cmp	r2, #3
    9272:	d10b      	bne.n	928c <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    9274:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
    9276:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    9278:	2200      	movs	r2, #0
    927a:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    927c:	b108      	cbz	r0, 9282 <sys_notify_finalize+0x22>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    927e:	f7fe fbcf 	bl	7a20 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    9282:	4620      	mov	r0, r4
    9284:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
    9286:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    9288:	2400      	movs	r4, #0
		break;
    928a:	e7f5      	b.n	9278 <sys_notify_finalize+0x18>
	switch (method) {
    928c:	2400      	movs	r4, #0
    928e:	4620      	mov	r0, r4
    9290:	e7f2      	b.n	9278 <sys_notify_finalize+0x18>

00009292 <abort_function>:
{
    9292:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    9294:	2000      	movs	r0, #0
    9296:	f7f9 fb57 	bl	2948 <sys_reboot>

0000929a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    929a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    929c:	f013 0307 	ands.w	r3, r3, #7
    92a0:	d105      	bne.n	92ae <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    92a2:	6803      	ldr	r3, [r0, #0]
    92a4:	2b00      	cmp	r3, #0
		evt = EVT_START;
    92a6:	bf0c      	ite	eq
    92a8:	2000      	moveq	r0, #0
    92aa:	2003      	movne	r0, #3
    92ac:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    92ae:	2b02      	cmp	r3, #2
    92b0:	d105      	bne.n	92be <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    92b2:	8b43      	ldrh	r3, [r0, #26]
    92b4:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    92b6:	bf14      	ite	ne
    92b8:	2000      	movne	r0, #0
    92ba:	2004      	moveq	r0, #4
    92bc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    92be:	2b01      	cmp	r3, #1
    92c0:	d105      	bne.n	92ce <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    92c2:	6803      	ldr	r3, [r0, #0]
    92c4:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    92c6:	bf0c      	ite	eq
    92c8:	2000      	moveq	r0, #0
    92ca:	2005      	movne	r0, #5
    92cc:	4770      	bx	lr
	int evt = EVT_NOP;
    92ce:	2000      	movs	r0, #0
}
    92d0:	4770      	bx	lr

000092d2 <notify_one>:
{
    92d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    92d6:	460d      	mov	r5, r1
    92d8:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    92da:	4619      	mov	r1, r3
    92dc:	1d28      	adds	r0, r5, #4
{
    92de:	4690      	mov	r8, r2
    92e0:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    92e2:	f7ff ffbd 	bl	9260 <sys_notify_finalize>
	if (cb) {
    92e6:	4604      	mov	r4, r0
    92e8:	b138      	cbz	r0, 92fa <notify_one+0x28>
		cb(mgr, cli, state, res);
    92ea:	4633      	mov	r3, r6
    92ec:	4642      	mov	r2, r8
    92ee:	4629      	mov	r1, r5
    92f0:	4638      	mov	r0, r7
    92f2:	46a4      	mov	ip, r4
}
    92f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    92f8:	4760      	bx	ip
}
    92fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000092fe <transition_complete>:
{
    92fe:	b410      	push	{r4}
	__asm__ volatile(
    9300:	f04f 0420 	mov.w	r4, #32
    9304:	f3ef 8211 	mrs	r2, BASEPRI
    9308:	f384 8812 	msr	BASEPRI_MAX, r4
    930c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    9310:	6141      	str	r1, [r0, #20]
}
    9312:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    9314:	2101      	movs	r1, #1
    9316:	f7f9 b8ef 	b.w	24f8 <process_event>

0000931a <validate_args>:
{
    931a:	b510      	push	{r4, lr}
    931c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    931e:	b140      	cbz	r0, 9332 <validate_args+0x18>
    9320:	b139      	cbz	r1, 9332 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    9322:	1d08      	adds	r0, r1, #4
    9324:	f7ff ff88 	bl	9238 <sys_notify_validate>
	if ((rv == 0)
    9328:	b928      	cbnz	r0, 9336 <validate_args+0x1c>
	    && ((cli->notify.flags
    932a:	68a3      	ldr	r3, [r4, #8]
    932c:	f033 0303 	bics.w	r3, r3, #3
    9330:	d001      	beq.n	9336 <validate_args+0x1c>
		rv = -EINVAL;
    9332:	f06f 0015 	mvn.w	r0, #21
}
    9336:	bd10      	pop	{r4, pc}

00009338 <onoff_manager_init>:
{
    9338:	b538      	push	{r3, r4, r5, lr}
    933a:	460c      	mov	r4, r1
	if ((mgr == NULL)
    933c:	4605      	mov	r5, r0
    933e:	b158      	cbz	r0, 9358 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    9340:	b151      	cbz	r1, 9358 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    9342:	680b      	ldr	r3, [r1, #0]
    9344:	b143      	cbz	r3, 9358 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    9346:	684b      	ldr	r3, [r1, #4]
    9348:	b133      	cbz	r3, 9358 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    934a:	221c      	movs	r2, #28
    934c:	2100      	movs	r1, #0
    934e:	f001 f95c 	bl	a60a <memset>
    9352:	612c      	str	r4, [r5, #16]
	return 0;
    9354:	2000      	movs	r0, #0
}
    9356:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    9358:	f06f 0015 	mvn.w	r0, #21
    935c:	e7fb      	b.n	9356 <onoff_manager_init+0x1e>

0000935e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    935e:	b570      	push	{r4, r5, r6, lr}
    9360:	4604      	mov	r4, r0
    9362:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    9364:	f7ff ffd9 	bl	931a <validate_args>

	if (rv < 0) {
    9368:	1e05      	subs	r5, r0, #0
    936a:	db31      	blt.n	93d0 <onoff_request+0x72>
    936c:	f04f 0320 	mov.w	r3, #32
    9370:	f3ef 8111 	mrs	r1, BASEPRI
    9374:	f383 8812 	msr	BASEPRI_MAX, r3
    9378:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    937c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    937e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    9380:	f64f 75ff 	movw	r5, #65535	; 0xffff
    9384:	42ab      	cmp	r3, r5
    9386:	f000 0207 	and.w	r2, r0, #7
    938a:	d02e      	beq.n	93ea <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    938c:	2a02      	cmp	r2, #2
    938e:	d10e      	bne.n	93ae <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    9390:	3301      	adds	r3, #1
    9392:	8363      	strh	r3, [r4, #26]
	rv = state;
    9394:	4615      	mov	r5, r2
		notify = true;
    9396:	2301      	movs	r3, #1
	__asm__ volatile(
    9398:	f381 8811 	msr	BASEPRI, r1
    939c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    93a0:	b1b3      	cbz	r3, 93d0 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    93a2:	2300      	movs	r3, #0
    93a4:	4631      	mov	r1, r6
    93a6:	4620      	mov	r0, r4
    93a8:	f7ff ff93 	bl	92d2 <notify_one>
    93ac:	e010      	b.n	93d0 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    93ae:	0783      	lsls	r3, r0, #30
    93b0:	d001      	beq.n	93b6 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    93b2:	2a06      	cmp	r2, #6
    93b4:	d10e      	bne.n	93d4 <onoff_request+0x76>
	parent->next = child;
    93b6:	2300      	movs	r3, #0
    93b8:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    93ba:	6863      	ldr	r3, [r4, #4]
    93bc:	b993      	cbnz	r3, 93e4 <onoff_request+0x86>
	list->head = node;
    93be:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    93c2:	4615      	mov	r5, r2
    93c4:	b962      	cbnz	r2, 93e0 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    93c6:	460a      	mov	r2, r1
    93c8:	4620      	mov	r0, r4
    93ca:	2102      	movs	r1, #2
    93cc:	f7f9 f894 	bl	24f8 <process_event>
		}
	}

	return rv;
}
    93d0:	4628      	mov	r0, r5
    93d2:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    93d4:	2a05      	cmp	r2, #5
    93d6:	bf0c      	ite	eq
    93d8:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    93dc:	f06f 0504 	mvnne.w	r5, #4
    93e0:	2300      	movs	r3, #0
    93e2:	e7d9      	b.n	9398 <onoff_request+0x3a>
	parent->next = child;
    93e4:	601e      	str	r6, [r3, #0]
	list->tail = node;
    93e6:	6066      	str	r6, [r4, #4]
}
    93e8:	e7eb      	b.n	93c2 <onoff_request+0x64>
		rv = -EAGAIN;
    93ea:	f06f 050a 	mvn.w	r5, #10
    93ee:	e7f7      	b.n	93e0 <onoff_request+0x82>

000093f0 <arch_printk_char_out>:
}
    93f0:	2000      	movs	r0, #0
    93f2:	4770      	bx	lr

000093f4 <str_out>:
{
    93f4:	b530      	push	{r4, r5, lr}
    93f6:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    93f8:	680c      	ldr	r4, [r1, #0]
    93fa:	1c55      	adds	r5, r2, #1
    93fc:	b114      	cbz	r4, 9404 <str_out+0x10>
    93fe:	684b      	ldr	r3, [r1, #4]
    9400:	4293      	cmp	r3, r2
    9402:	dc01      	bgt.n	9408 <str_out+0x14>
		ctx->count++;
    9404:	608d      	str	r5, [r1, #8]
}
    9406:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    9408:	3b01      	subs	r3, #1
    940a:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    940c:	bf08      	it	eq
    940e:	2200      	moveq	r2, #0
    9410:	608d      	str	r5, [r1, #8]
    9412:	bf0c      	ite	eq
    9414:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    9416:	54a0      	strbne	r0, [r4, r2]
    9418:	e7f5      	b.n	9406 <str_out+0x12>

0000941a <printk>:
{
    941a:	b40f      	push	{r0, r1, r2, r3}
    941c:	b507      	push	{r0, r1, r2, lr}
    941e:	a904      	add	r1, sp, #16
    9420:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    9424:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    9426:	f7f9 fa6d 	bl	2904 <vprintk>
}
    942a:	b003      	add	sp, #12
    942c:	f85d eb04 	ldr.w	lr, [sp], #4
    9430:	b004      	add	sp, #16
    9432:	4770      	bx	lr

00009434 <snprintk>:
{
    9434:	b40c      	push	{r2, r3}
    9436:	b507      	push	{r0, r1, r2, lr}
    9438:	ab04      	add	r3, sp, #16
    943a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    943e:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    9440:	f7f9 fa6e 	bl	2920 <vsnprintk>
}
    9444:	b003      	add	sp, #12
    9446:	f85d eb04 	ldr.w	lr, [sp], #4
    944a:	b002      	add	sp, #8
    944c:	4770      	bx	lr

0000944e <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    944e:	2200      	movs	r2, #0
    9450:	e9c0 2200 	strd	r2, r2, [r0]
    9454:	6082      	str	r2, [r0, #8]
}
    9456:	4770      	bx	lr

00009458 <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
    9458:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    945c:	4770      	bx	lr

0000945e <ring_buf_put_claim>:

	return 0;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    945e:	b5f0      	push	{r4, r5, r6, r7, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    9460:	6985      	ldr	r5, [r0, #24]
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
    9462:	6886      	ldr	r6, [r0, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    9464:	6907      	ldr	r7, [r0, #16]
{
    9466:	4604      	mov	r4, r0
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    9468:	b185      	cbz	r5, 948c <ring_buf_put_claim+0x2e>
    946a:	4035      	ands	r5, r6
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
    946c:	6823      	ldr	r3, [r4, #0]
    946e:	443b      	add	r3, r7
    9470:	1b98      	subs	r0, r3, r6
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
    9472:	4290      	cmp	r0, r2
    9474:	bf28      	it	cs
    9476:	4610      	movcs	r0, r2
	trail_size = buf->size - tmp_trail_mod;
    9478:	1b7f      	subs	r7, r7, r5

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
	*data = &buf->buf.buf8[tmp_trail_mod];
    947a:	6963      	ldr	r3, [r4, #20]
	allocated = MIN(trail_size, size);
    947c:	42b8      	cmp	r0, r7
    947e:	bf28      	it	cs
    9480:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_trail_mod];
    9482:	441d      	add	r5, r3

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
    9484:	4406      	add	r6, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
    9486:	600d      	str	r5, [r1, #0]
	buf->misc.byte_mode.tmp_tail =
    9488:	60a6      	str	r6, [r4, #8]

	return allocated;
}
    948a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    948c:	fbb6 f5f7 	udiv	r5, r6, r7
    9490:	fb07 6515 	mls	r5, r7, r5, r6
    9494:	e7ea      	b.n	946c <ring_buf_put_claim+0xe>

00009496 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
    9496:	b570      	push	{r4, r5, r6, lr}
    9498:	4605      	mov	r5, r0
    949a:	460c      	mov	r4, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
    949c:	f7ff ffdc 	bl	9458 <ring_buf_get_rewind_threshold>

	if ((buf->tail + size) > (buf->head + buf->size)) {
    94a0:	686e      	ldr	r6, [r5, #4]
    94a2:	692b      	ldr	r3, [r5, #16]
    94a4:	682a      	ldr	r2, [r5, #0]
    94a6:	1931      	adds	r1, r6, r4
    94a8:	441a      	add	r2, r3
    94aa:	4291      	cmp	r1, r2
    94ac:	d80a      	bhi.n	94c4 <ring_buf_put_finish+0x2e>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
    94ae:	4286      	cmp	r6, r0
		rew = get_rewind_value(buf->size, threshold);
	} else {
		rew = 0;
    94b0:	bf92      	itee	ls
    94b2:	2300      	movls	r3, #0
	return buf_size * (threshold / buf_size);
    94b4:	fbb0 f0f3 	udivhi	r0, r0, r3
    94b8:	4343      	mulhi	r3, r0
	}

	buf->tail += (size - rew);
    94ba:	1ac9      	subs	r1, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
    94bc:	e9c5 1101 	strd	r1, r1, [r5, #4]

	return 0;
    94c0:	2000      	movs	r0, #0
}
    94c2:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    94c4:	f06f 0015 	mvn.w	r0, #21
    94c8:	e7fb      	b.n	94c2 <ring_buf_put_finish+0x2c>

000094ca <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    94ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    94ce:	4680      	mov	r8, r0
    94d0:	460e      	mov	r6, r1
    94d2:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    94d4:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    94d6:	462a      	mov	r2, r5
    94d8:	a901      	add	r1, sp, #4
    94da:	4640      	mov	r0, r8
    94dc:	f7ff ffbf 	bl	945e <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
    94e0:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
    94e2:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    94e4:	4602      	mov	r2, r0
    94e6:	9801      	ldr	r0, [sp, #4]
    94e8:	f001 f884 	bl	a5f4 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    94ec:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
    94ee:	4427      	add	r7, r4
		data += partial_size;
    94f0:	4426      	add	r6, r4
	} while (size && partial_size);
    94f2:	d001      	beq.n	94f8 <ring_buf_put+0x2e>
    94f4:	2c00      	cmp	r4, #0
    94f6:	d1ee      	bne.n	94d6 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    94f8:	4639      	mov	r1, r7
    94fa:	4640      	mov	r0, r8
    94fc:	f7ff ffcb 	bl	9496 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    9500:	4638      	mov	r0, r7
    9502:	b002      	add	sp, #8
    9504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009508 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    9508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    950c:	68c3      	ldr	r3, [r0, #12]
	uint32_t tail = buf->tail;
    950e:	6846      	ldr	r6, [r0, #4]
	if (tail < buf->misc.byte_mode.tmp_head) {
    9510:	42b3      	cmp	r3, r6
{
    9512:	4604      	mov	r4, r0
    9514:	460f      	mov	r7, r1
    9516:	4690      	mov	r8, r2
	if (tail < buf->misc.byte_mode.tmp_head) {
    9518:	d906      	bls.n	9528 <ring_buf_get_claim+0x20>
    951a:	6905      	ldr	r5, [r0, #16]
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
    951c:	f7ff ff9c 	bl	9458 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size);
    9520:	fbb0 f0f5 	udiv	r0, r0, r5
		tail += get_rewind_value(buf->size,
    9524:	fb05 6600 	mla	r6, r5, r0, r6
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    9528:	69a5      	ldr	r5, [r4, #24]
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
    952a:	68e1      	ldr	r1, [r4, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    952c:	6923      	ldr	r3, [r4, #16]
    952e:	b185      	cbz	r5, 9552 <ring_buf_get_claim+0x4a>
    9530:	400d      	ands	r5, r1
	space = tail - buf->misc.byte_mode.tmp_head;
    9532:	1a70      	subs	r0, r6, r1
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
    9534:	4540      	cmp	r0, r8
    9536:	bf28      	it	cs
    9538:	4640      	movcs	r0, r8
    953a:	4606      	mov	r6, r0
	trail_size = buf->size - tmp_head_mod;
    953c:	1b58      	subs	r0, r3, r5

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
    953e:	42b0      	cmp	r0, r6

	*data = &buf->buf.buf8[tmp_head_mod];
    9540:	6963      	ldr	r3, [r4, #20]
	granted_size = MIN(trail_size, granted_size);
    9542:	bf28      	it	cs
    9544:	4630      	movcs	r0, r6
	*data = &buf->buf.buf8[tmp_head_mod];
    9546:	441d      	add	r5, r3
	buf->misc.byte_mode.tmp_head += granted_size;
    9548:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_head_mod];
    954a:	603d      	str	r5, [r7, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
    954c:	60e1      	str	r1, [r4, #12]

	return granted_size;
}
    954e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    9552:	fbb1 f5f3 	udiv	r5, r1, r3
    9556:	fb03 1515 	mls	r5, r3, r5, r1
    955a:	e7ea      	b.n	9532 <ring_buf_get_claim+0x2a>

0000955c <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
    955c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = buf->tail;
    955e:	6847      	ldr	r7, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    9560:	68c3      	ldr	r3, [r0, #12]
    9562:	42bb      	cmp	r3, r7
{
    9564:	4605      	mov	r5, r0
    9566:	460c      	mov	r4, r1
	if (tail < buf->misc.byte_mode.tmp_head) {
    9568:	d912      	bls.n	9590 <ring_buf_get_finish+0x34>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
    956a:	6906      	ldr	r6, [r0, #16]
    956c:	f7ff ff74 	bl	9458 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size);
    9570:	fbb0 f0f6 	udiv	r0, r0, r6
    9574:	4370      	muls	r0, r6
				       ring_buf_get_rewind_threshold());
		tail += rew;
    9576:	4407      	add	r7, r0
	} else {
		rew = 0;
	}

	if ((buf->head + size) > tail) {
    9578:	6829      	ldr	r1, [r5, #0]
    957a:	4421      	add	r1, r4
    957c:	42b9      	cmp	r1, r7
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
    957e:	bf9f      	itttt	ls
    9580:	1a09      	subls	r1, r1, r0
    9582:	6029      	strls	r1, [r5, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
    9584:	60e9      	strls	r1, [r5, #12]

	return 0;
    9586:	2000      	movls	r0, #0
		return -EINVAL;
    9588:	bf88      	it	hi
    958a:	f06f 0015 	mvnhi.w	r0, #21
}
    958e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = 0;
    9590:	2000      	movs	r0, #0
    9592:	e7f1      	b.n	9578 <ring_buf_get_finish+0x1c>

00009594 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    9594:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9598:	4680      	mov	r8, r0
    959a:	460d      	mov	r5, r1
    959c:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    959e:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    95a0:	4632      	mov	r2, r6
    95a2:	a901      	add	r1, sp, #4
    95a4:	4640      	mov	r0, r8
    95a6:	f7ff ffaf 	bl	9508 <ring_buf_get_claim>
    95aa:	4604      	mov	r4, r0
		if (data) {
    95ac:	b12d      	cbz	r5, 95ba <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
    95ae:	4602      	mov	r2, r0
    95b0:	9901      	ldr	r1, [sp, #4]
    95b2:	4628      	mov	r0, r5
    95b4:	f001 f81e 	bl	a5f4 <memcpy>
			data += partial_size;
    95b8:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
    95ba:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    95bc:	4427      	add	r7, r4
	} while (size && partial_size);
    95be:	d001      	beq.n	95c4 <ring_buf_get+0x30>
    95c0:	2c00      	cmp	r4, #0
    95c2:	d1ed      	bne.n	95a0 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    95c4:	4639      	mov	r1, r7
    95c6:	4640      	mov	r0, r8
    95c8:	f7ff ffc8 	bl	955c <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    95cc:	4638      	mov	r0, r7
    95ce:	b002      	add	sp, #8
    95d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000095d4 <atomic_or>:
{
    95d4:	4603      	mov	r3, r0
}
    95d6:	f3bf 8f5b 	dmb	ish
    95da:	e853 0f00 	ldrex	r0, [r3]
    95de:	ea40 0201 	orr.w	r2, r0, r1
    95e2:	e843 2c00 	strex	ip, r2, [r3]
    95e6:	f1bc 0f00 	cmp.w	ip, #0
    95ea:	d1f6      	bne.n	95da <atomic_or+0x6>
    95ec:	f3bf 8f5b 	dmb	ish
    95f0:	4770      	bx	lr

000095f2 <atomic_and>:
{
    95f2:	4603      	mov	r3, r0
}
    95f4:	f3bf 8f5b 	dmb	ish
    95f8:	e853 0f00 	ldrex	r0, [r3]
    95fc:	ea00 0201 	and.w	r2, r0, r1
    9600:	e843 2c00 	strex	ip, r2, [r3]
    9604:	f1bc 0f00 	cmp.w	ip, #0
    9608:	d1f6      	bne.n	95f8 <atomic_and+0x6>
    960a:	f3bf 8f5b 	dmb	ish
    960e:	4770      	bx	lr

00009610 <kill_handler>:
{
    9610:	b538      	push	{r3, r4, r5, lr}
	if (z_flag_processing_get(shell)) {
    9612:	6883      	ldr	r3, [r0, #8]
	return sh->ctx->ctx.flags.processing == 1;
    9614:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
    9618:	07db      	lsls	r3, r3, #31
{
    961a:	4604      	mov	r4, r0
	if (z_flag_processing_get(shell)) {
    961c:	d41a      	bmi.n	9654 <kill_handler+0x44>
	err = shell->iface->api->uninit(shell->iface);
    961e:	6840      	ldr	r0, [r0, #4]
    9620:	6803      	ldr	r3, [r0, #0]
    9622:	685b      	ldr	r3, [r3, #4]
    9624:	4798      	blx	r3
	if (err != 0) {
    9626:	4605      	mov	r5, r0
    9628:	b920      	cbnz	r0, 9634 <kill_handler+0x24>
	z_shell_history_purge(shell->history);
    962a:	68e0      	ldr	r0, [r4, #12]
    962c:	f000 f9bd 	bl	99aa <z_shell_history_purge>
	shell->ctx->state = state;
    9630:	68a3      	ldr	r3, [r4, #8]
    9632:	711d      	strb	r5, [r3, #4]
	if (shell->ctx->uninit_cb) {
    9634:	68a3      	ldr	r3, [r4, #8]
    9636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9638:	b113      	cbz	r3, 9640 <kill_handler+0x30>
		shell->ctx->uninit_cb(shell, err);
    963a:	4629      	mov	r1, r5
    963c:	4620      	mov	r0, r4
    963e:	4798      	blx	r3
	shell->ctx->tid = NULL;
    9640:	68a3      	ldr	r3, [r4, #8]
    9642:	2200      	movs	r2, #0
    9644:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
	return z_impl_z_current_get();
    9648:	f7fe fd16 	bl	8078 <z_impl_z_current_get>
}
    964c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
    9650:	f7fb b808 	b.w	4664 <z_impl_k_thread_abort>
		return -EBUSY;
    9654:	f06f 050f 	mvn.w	r5, #15
    9658:	e7ec      	b.n	9634 <kill_handler+0x24>

0000965a <shell_signal_handle>:
{
    965a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
    965c:	6885      	ldr	r5, [r0, #8]
    965e:	0109      	lsls	r1, r1, #4
    9660:	f501 716a 	add.w	r1, r1, #936	; 0x3a8
{
    9664:	4604      	mov	r4, r0
    9666:	4616      	mov	r6, r2
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
    9668:	440d      	add	r5, r1
	z_impl_k_poll_signal_check(sig, signaled, result);
    966a:	aa01      	add	r2, sp, #4
    966c:	4669      	mov	r1, sp
    966e:	4628      	mov	r0, r5
    9670:	f002 f8a0 	bl	b7b4 <z_impl_k_poll_signal_check>
	if (set) {
    9674:	9b00      	ldr	r3, [sp, #0]
    9676:	b123      	cbz	r3, 9682 <shell_signal_handle+0x28>
	z_impl_k_poll_signal_reset(sig);
    9678:	4628      	mov	r0, r5
    967a:	f002 f898 	bl	b7ae <z_impl_k_poll_signal_reset>
		handler(shell);
    967e:	4620      	mov	r0, r4
    9680:	47b0      	blx	r6
}
    9682:	b002      	add	sp, #8
    9684:	bd70      	pop	{r4, r5, r6, pc}

00009686 <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
    9686:	f7fe b927 	b.w	78d8 <z_impl_k_mutex_unlock>

0000968a <z_shell_strlen>:
{
    968a:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
    968c:	b110      	cbz	r0, 9694 <z_shell_strlen+0xa>
    968e:	f000 ff5f 	bl	a550 <strlen>
    9692:	b280      	uxth	r0, r0
}
    9694:	bd08      	pop	{r3, pc}

00009696 <z_shell_raw_fprintf>:
{
    9696:	b40e      	push	{r1, r2, r3}
    9698:	b503      	push	{r0, r1, lr}
    969a:	aa03      	add	r2, sp, #12
    969c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    96a0:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    96a2:	f7fa f96f 	bl	3984 <z_shell_fprintf_fmt>
}
    96a6:	b002      	add	sp, #8
    96a8:	f85d eb04 	ldr.w	lr, [sp], #4
    96ac:	b003      	add	sp, #12
    96ae:	4770      	bx	lr

000096b0 <z_flag_history_exit_set.isra.0>:
static inline bool z_flag_history_exit_set(const struct shell *sh, bool val)
    96b0:	b508      	push	{r3, lr}
    96b2:	460b      	mov	r3, r1
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, history_exit, val, ret);
    96b4:	f500 7069 	add.w	r0, r0, #932	; 0x3a4
    96b8:	2104      	movs	r1, #4
    96ba:	b123      	cbz	r3, 96c6 <z_flag_history_exit_set.isra.0+0x16>
    96bc:	f7ff ff8a 	bl	95d4 <atomic_or>
}
    96c0:	f3c0 0080 	ubfx	r0, r0, #2, #1
    96c4:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, history_exit, val, ret);
    96c6:	f06f 0104 	mvn.w	r1, #4
    96ca:	f7ff ff92 	bl	95f2 <atomic_and>
    96ce:	e7f7      	b.n	96c0 <z_flag_history_exit_set.isra.0+0x10>

000096d0 <z_flag_insert_mode_set.isra.0>:
static inline bool z_flag_insert_mode_set(const struct shell *sh, bool val)
    96d0:	b508      	push	{r3, lr}
    96d2:	460b      	mov	r3, r1
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
    96d4:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
    96d8:	2101      	movs	r1, #1
    96da:	b123      	cbz	r3, 96e6 <z_flag_insert_mode_set.isra.0+0x16>
    96dc:	f7ff ff7a 	bl	95d4 <atomic_or>
}
    96e0:	f000 0001 	and.w	r0, r0, #1
    96e4:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
    96e6:	f06f 0101 	mvn.w	r1, #1
    96ea:	f7ff ff82 	bl	95f2 <atomic_and>
    96ee:	e7f7      	b.n	96e0 <z_flag_insert_mode_set.isra.0+0x10>

000096f0 <transport_evt_handler>:
	signal = (evt_type == SHELL_TRANSPORT_EVT_RX_RDY) ?
    96f0:	688b      	ldr	r3, [r1, #8]
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
    96f2:	b920      	cbnz	r0, 96fe <transport_evt_handler+0xe>
    96f4:	f503 706a 	add.w	r0, r3, #936	; 0x3a8
	return z_impl_k_poll_signal_raise(sig, result);
    96f8:	2100      	movs	r1, #0
    96fa:	f7fe b991 	b.w	7a20 <z_impl_k_poll_signal_raise>
    96fe:	f503 7076 	add.w	r0, r3, #984	; 0x3d8
    9702:	e7f9      	b.n	96f8 <transport_evt_handler+0x8>

00009704 <k_mutex_lock.constprop.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    9704:	f7fe b86a 	b.w	77dc <z_impl_k_mutex_lock>

00009708 <shell_vfprintf>:
{
    9708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    970a:	4604      	mov	r4, r0
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
    970c:	6880      	ldr	r0, [r0, #8]
{
    970e:	461f      	mov	r7, r3
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
    9710:	7903      	ldrb	r3, [r0, #4]
    9712:	2b02      	cmp	r3, #2
{
    9714:	460d      	mov	r5, r1
    9716:	4616      	mov	r6, r2
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
    9718:	d007      	beq.n	972a <shell_vfprintf+0x22>
}
    971a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
    971e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    9722:	f500 7069 	add.w	r0, r0, #932	; 0x3a4
    9726:	f7ff bf55 	b.w	95d4 <atomic_or>
	k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
    972a:	f04f 32ff 	mov.w	r2, #4294967295
    972e:	f04f 33ff 	mov.w	r3, #4294967295
    9732:	f500 6087 	add.w	r0, r0, #1080	; 0x438
    9736:	f7ff ffe5 	bl	9704 <k_mutex_lock.constprop.0>
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
    973a:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->ctx.flags.cmd_ctx == 1;
    973c:	f8d3 23a4 	ldr.w	r2, [r3, #932]	; 0x3a4
    9740:	0511      	lsls	r1, r2, #20
    9742:	d404      	bmi.n	974e <shell_vfprintf+0x46>
    9744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9746:	b913      	cbnz	r3, 974e <shell_vfprintf+0x46>
		z_shell_cmd_line_erase(sh);
    9748:	4620      	mov	r0, r4
    974a:	f000 fa66 	bl	9c1a <z_shell_cmd_line_erase>
	z_shell_vfprintf(sh, color, fmt, args);
    974e:	463b      	mov	r3, r7
    9750:	4632      	mov	r2, r6
    9752:	4629      	mov	r1, r5
    9754:	4620      	mov	r0, r4
    9756:	f000 fac1 	bl	9cdc <z_shell_vfprintf>
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
    975a:	68a3      	ldr	r3, [r4, #8]
    975c:	f8d3 23a4 	ldr.w	r2, [r3, #932]	; 0x3a4
    9760:	0512      	lsls	r2, r2, #20
    9762:	d404      	bmi.n	976e <shell_vfprintf+0x66>
    9764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9766:	b913      	cbnz	r3, 976e <shell_vfprintf+0x66>
		z_shell_print_prompt_and_cmd(sh);
    9768:	4620      	mov	r0, r4
    976a:	f7fa fbbf 	bl	3eec <z_shell_print_prompt_and_cmd>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
    976e:	6960      	ldr	r0, [r4, #20]
    9770:	f000 f8a6 	bl	98c0 <z_shell_fprintf_buffer_flush>
	k_mutex_unlock(&sh->ctx->wr_mtx);
    9774:	68a0      	ldr	r0, [r4, #8]
}
    9776:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&sh->ctx->wr_mtx);
    977a:	f500 6087 	add.w	r0, r0, #1080	; 0x438
    977e:	f7ff bf82 	b.w	9686 <k_mutex_unlock>

00009782 <shell_fprintf>:
{
    9782:	b40c      	push	{r2, r3}
    9784:	b507      	push	{r0, r1, r2, lr}
    9786:	ab04      	add	r3, sp, #16
    9788:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
    978c:	9301      	str	r3, [sp, #4]
	shell_vfprintf(shell, color, fmt, args);
    978e:	f7ff ffbb 	bl	9708 <shell_vfprintf>
}
    9792:	b003      	add	sp, #12
    9794:	f85d eb04 	ldr.w	lr, [sp], #4
    9798:	b002      	add	sp, #8
    979a:	4770      	bx	lr

0000979c <shell_hexdump>:
{
    979c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    97a0:	4607      	mov	r7, r0
    97a2:	460e      	mov	r6, r1
    97a4:	4614      	mov	r4, r2
	const uint8_t *p = data;
    97a6:	460d      	mov	r5, r1
	while (len) {
    97a8:	b90c      	cbnz	r4, 97ae <shell_hexdump+0x12>
}
    97aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		line_len = MIN(len, SHELL_HEXDUMP_BYTES_IN_LINE);
    97ae:	2c10      	cmp	r4, #16
    97b0:	46a0      	mov	r8, r4
    97b2:	bf28      	it	cs
    97b4:	f04f 0810 	movcs.w	r8, #16
		shell_hexdump_line(shell, p - data, p, line_len);
    97b8:	462a      	mov	r2, r5
    97ba:	1ba9      	subs	r1, r5, r6
    97bc:	4643      	mov	r3, r8
    97be:	4638      	mov	r0, r7
    97c0:	f7f9 ff2a 	bl	3618 <shell_hexdump_line>
		len -= line_len;
    97c4:	eba4 0408 	sub.w	r4, r4, r8
		p += line_len;
    97c8:	4445      	add	r5, r8
    97ca:	e7ed      	b.n	97a8 <shell_hexdump+0xc>

000097cc <shell_set_bypass>:
	sh->ctx->bypass = bypass;
    97cc:	6883      	ldr	r3, [r0, #8]
    97ce:	6399      	str	r1, [r3, #56]	; 0x38
}
    97d0:	4770      	bx	lr

000097d2 <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
    97d2:	6983      	ldr	r3, [r0, #24]
    97d4:	2000      	movs	r0, #0
    97d6:	6018      	str	r0, [r3, #0]
}
    97d8:	4770      	bx	lr

000097da <z_shell_raw_fprintf>:
{
    97da:	b40e      	push	{r1, r2, r3}
    97dc:	b503      	push	{r0, r1, lr}
    97de:	aa03      	add	r2, sp, #12
    97e0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    97e4:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    97e6:	f7fa f8cd 	bl	3984 <z_shell_fprintf_fmt>
}
    97ea:	b002      	add	sp, #8
    97ec:	f85d eb04 	ldr.w	lr, [sp], #4
    97f0:	b003      	add	sp, #12
    97f2:	4770      	bx	lr

000097f4 <cmd_echo_on>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, echo, val, ret);
    97f4:	6883      	ldr	r3, [r0, #8]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    97f6:	f3bf 8f5b 	dmb	ish
    97fa:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
    97fe:	e853 2f00 	ldrex	r2, [r3]
    9802:	f042 0202 	orr.w	r2, r2, #2
    9806:	e843 2100 	strex	r1, r2, [r3]
    980a:	2900      	cmp	r1, #0
    980c:	d1f7      	bne.n	97fe <cmd_echo_on+0xa>
    980e:	f3bf 8f5b 	dmb	ish
}
    9812:	2000      	movs	r0, #0
    9814:	4770      	bx	lr

00009816 <cmd_bacskpace_mode_backspace>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, mode_delete, val, ret);
    9816:	6883      	ldr	r3, [r0, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9818:	f3bf 8f5b 	dmb	ish
    981c:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
    9820:	e853 2f00 	ldrex	r2, [r3]
    9824:	f022 0208 	bic.w	r2, r2, #8
    9828:	e843 2100 	strex	r1, r2, [r3]
    982c:	2900      	cmp	r1, #0
    982e:	d1f7      	bne.n	9820 <cmd_bacskpace_mode_backspace+0xa>
    9830:	f3bf 8f5b 	dmb	ish
}
    9834:	2000      	movs	r0, #0
    9836:	4770      	bx	lr

00009838 <cmd_echo_off>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, echo, val, ret);
    9838:	6883      	ldr	r3, [r0, #8]
    983a:	f3bf 8f5b 	dmb	ish
    983e:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
    9842:	e853 2f00 	ldrex	r2, [r3]
    9846:	f022 0202 	bic.w	r2, r2, #2
    984a:	e843 2100 	strex	r1, r2, [r3]
    984e:	2900      	cmp	r1, #0
    9850:	d1f7      	bne.n	9842 <cmd_echo_off+0xa>
    9852:	f3bf 8f5b 	dmb	ish
}
    9856:	2000      	movs	r0, #0
    9858:	4770      	bx	lr

0000985a <cmd_colors_off>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, use_colors, val, ret);
    985a:	6883      	ldr	r3, [r0, #8]
    985c:	f3bf 8f5b 	dmb	ish
    9860:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
    9864:	e853 2f00 	ldrex	r2, [r3]
    9868:	f022 0210 	bic.w	r2, r2, #16
    986c:	e843 2100 	strex	r1, r2, [r3]
    9870:	2900      	cmp	r1, #0
    9872:	d1f7      	bne.n	9864 <cmd_colors_off+0xa>
    9874:	f3bf 8f5b 	dmb	ish
}
    9878:	2000      	movs	r0, #0
    987a:	4770      	bx	lr

0000987c <cmd_bacskpace_mode_delete>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, mode_delete, val, ret);
    987c:	6883      	ldr	r3, [r0, #8]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    987e:	f3bf 8f5b 	dmb	ish
    9882:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
    9886:	e853 2f00 	ldrex	r2, [r3]
    988a:	f042 0208 	orr.w	r2, r2, #8
    988e:	e843 2100 	strex	r1, r2, [r3]
    9892:	2900      	cmp	r1, #0
    9894:	d1f7      	bne.n	9886 <cmd_bacskpace_mode_delete+0xa>
    9896:	f3bf 8f5b 	dmb	ish
}
    989a:	2000      	movs	r0, #0
    989c:	4770      	bx	lr

0000989e <cmd_colors_on>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, use_colors, val, ret);
    989e:	6883      	ldr	r3, [r0, #8]
    98a0:	f3bf 8f5b 	dmb	ish
    98a4:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
    98a8:	e853 2f00 	ldrex	r2, [r3]
    98ac:	f042 0210 	orr.w	r2, r2, #16
    98b0:	e843 2100 	strex	r1, r2, [r3]
    98b4:	2900      	cmp	r1, #0
    98b6:	d1f7      	bne.n	98a8 <cmd_colors_on+0xa>
    98b8:	f3bf 8f5b 	dmb	ish
}
    98bc:	2000      	movs	r0, #0
    98be:	4770      	bx	lr

000098c0 <z_shell_fprintf_buffer_flush>:


void z_shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
    98c0:	6902      	ldr	r2, [r0, #16]
    98c2:	6883      	ldr	r3, [r0, #8]
    98c4:	6812      	ldr	r2, [r2, #0]
    98c6:	6801      	ldr	r1, [r0, #0]
{
    98c8:	b510      	push	{r4, lr}
    98ca:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
    98cc:	68c0      	ldr	r0, [r0, #12]
    98ce:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
    98d0:	6923      	ldr	r3, [r4, #16]
    98d2:	2200      	movs	r2, #0
    98d4:	601a      	str	r2, [r3, #0]
}
    98d6:	bd10      	pop	{r4, pc}

000098d8 <out_func>:
{
    98d8:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    98da:	68cb      	ldr	r3, [r1, #12]
    98dc:	7c1b      	ldrb	r3, [r3, #16]
    98de:	2b02      	cmp	r3, #2
{
    98e0:	4605      	mov	r5, r0
    98e2:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    98e4:	d104      	bne.n	98f0 <out_func+0x18>
    98e6:	280a      	cmp	r0, #10
    98e8:	d102      	bne.n	98f0 <out_func+0x18>
		(void)out_func('\r', ctx);
    98ea:	200d      	movs	r0, #13
    98ec:	f7ff fff4 	bl	98d8 <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (uint8_t)c;
    98f0:	6923      	ldr	r3, [r4, #16]
    98f2:	6822      	ldr	r2, [r4, #0]
    98f4:	681b      	ldr	r3, [r3, #0]
    98f6:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
    98f8:	6922      	ldr	r2, [r4, #16]
    98fa:	6813      	ldr	r3, [r2, #0]
    98fc:	3301      	adds	r3, #1
    98fe:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
    9900:	6862      	ldr	r2, [r4, #4]
    9902:	4293      	cmp	r3, r2
    9904:	d102      	bne.n	990c <out_func+0x34>
		z_shell_fprintf_buffer_flush(sh_fprintf);
    9906:	4620      	mov	r0, r4
    9908:	f7ff ffda 	bl	98c0 <z_shell_fprintf_buffer_flush>
}
    990c:	2000      	movs	r0, #0
    990e:	bd38      	pop	{r3, r4, r5, pc}

00009910 <z_shell_raw_fprintf>:
{
    9910:	b40e      	push	{r1, r2, r3}
    9912:	b503      	push	{r0, r1, lr}
    9914:	aa03      	add	r2, sp, #12
    9916:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    991a:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    991c:	f7fa f832 	bl	3984 <z_shell_fprintf_fmt>
}
    9920:	b002      	add	sp, #8
    9922:	f85d eb04 	ldr.w	lr, [sp], #4
    9926:	b003      	add	sp, #12
    9928:	4770      	bx	lr

0000992a <remove_from_tail.part.0>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
    992a:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    992c:	6883      	ldr	r3, [r0, #8]

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
	ring_buf_get_finish(history->ring_buf, total_len);
    992e:	6800      	ldr	r0, [r0, #0]
	sys_dnode_t *const next = node->next;
    9930:	e9d3 2100 	ldrd	r2, r1, [r3]
	prev->next = next;
    9934:	600a      	str	r2, [r1, #0]
	next->prev = prev;
    9936:	6051      	str	r1, [r2, #4]
	node->next = NULL;
    9938:	2200      	movs	r2, #0
	node->prev = NULL;
    993a:	e9c3 2200 	strd	r2, r2, [r3]
			h_item->len + h_item->padding;
    993e:	8919      	ldrh	r1, [r3, #8]
    9940:	895b      	ldrh	r3, [r3, #10]
    9942:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
    9944:	310c      	adds	r1, #12
    9946:	f7ff fe09 	bl	955c <ring_buf_get_finish>

	return true;
}
    994a:	2001      	movs	r0, #1
    994c:	bd08      	pop	{r3, pc}

0000994e <z_shell_history_mode_exit>:
	history->current = NULL;
    994e:	2300      	movs	r3, #0
    9950:	60c3      	str	r3, [r0, #12]
}
    9952:	4770      	bx	lr

00009954 <z_shell_history_get>:
{
    9954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9956:	461f      	mov	r7, r3
	return list->head == list;
    9958:	4603      	mov	r3, r0
    995a:	4616      	mov	r6, r2
    995c:	f853 4f04 	ldr.w	r4, [r3, #4]!
	if (sys_dlist_is_empty(&history->list)) {
    9960:	429c      	cmp	r4, r3
    9962:	d102      	bne.n	996a <z_shell_history_get+0x16>
		*len = 0U;
    9964:	2000      	movs	r0, #0
    9966:	8038      	strh	r0, [r7, #0]
}
    9968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!up) { /* button down */
    996a:	68c5      	ldr	r5, [r0, #12]
    996c:	b9b1      	cbnz	r1, 999c <z_shell_history_get+0x48>
		if (history->current == NULL) {
    996e:	2d00      	cmp	r5, #0
    9970:	d0f8      	beq.n	9964 <z_shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
    9972:	42ac      	cmp	r4, r5
    9974:	d102      	bne.n	997c <z_shell_history_get+0x28>
	history->current = l_item;
    9976:	2300      	movs	r3, #0
    9978:	60c3      	str	r3, [r0, #12]
	if (l_item) {
    997a:	e7f3      	b.n	9964 <z_shell_history_get+0x10>
    997c:	686c      	ldr	r4, [r5, #4]
	history->current = l_item;
    997e:	60c4      	str	r4, [r0, #12]
	if (l_item) {
    9980:	2c00      	cmp	r4, #0
    9982:	d0ef      	beq.n	9964 <z_shell_history_get+0x10>
		memcpy(dst, h_item->data, h_item->len);
    9984:	8922      	ldrh	r2, [r4, #8]
    9986:	f104 010c 	add.w	r1, r4, #12
    998a:	4630      	mov	r0, r6
    998c:	f000 fe32 	bl	a5f4 <memcpy>
		*len = h_item->len;
    9990:	8923      	ldrh	r3, [r4, #8]
    9992:	803b      	strh	r3, [r7, #0]
		dst[*len] = '\0';
    9994:	2200      	movs	r2, #0
    9996:	54f2      	strb	r2, [r6, r3]
		return true;
    9998:	2001      	movs	r0, #1
    999a:	e7e5      	b.n	9968 <z_shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
    999c:	2d00      	cmp	r5, #0
    999e:	d0ee      	beq.n	997e <z_shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
    99a0:	6883      	ldr	r3, [r0, #8]
    99a2:	42ab      	cmp	r3, r5
    99a4:	d0e7      	beq.n	9976 <z_shell_history_get+0x22>
    99a6:	682c      	ldr	r4, [r5, #0]
    99a8:	e7e9      	b.n	997e <z_shell_history_get+0x2a>

000099aa <z_shell_history_purge>:

void z_shell_history_purge(struct shell_history *history)
{
    99aa:	b538      	push	{r3, r4, r5, lr}
    99ac:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
    99ae:	1d05      	adds	r5, r0, #4
    99b0:	6863      	ldr	r3, [r4, #4]
    99b2:	42ab      	cmp	r3, r5
    99b4:	d004      	beq.n	99c0 <z_shell_history_purge+0x16>
    99b6:	4620      	mov	r0, r4
    99b8:	f7ff ffb7 	bl	992a <remove_from_tail.part.0>
	while (remove_from_tail(history)) {
    99bc:	2800      	cmp	r0, #0
    99be:	d1f7      	bne.n	99b0 <z_shell_history_purge+0x6>
	}
}
    99c0:	bd38      	pop	{r3, r4, r5, pc}

000099c2 <z_shell_history_put>:

void z_shell_history_put(struct shell_history *history, uint8_t *line,
			 size_t len)
{
    99c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    99c6:	6803      	ldr	r3, [r0, #0]
	uint32_t total_len = len + offsetof(struct shell_history_item, data);
    99c8:	f102 050c 	add.w	r5, r2, #12
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
    99cc:	f1c5 0800 	rsb	r8, r5, #0
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    99d0:	691b      	ldr	r3, [r3, #16]
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
    99d2:	f008 0803 	and.w	r8, r8, #3
	total_len += padding;
    99d6:	4445      	add	r5, r8
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    99d8:	429d      	cmp	r5, r3
{
    99da:	4604      	mov	r4, r0
    99dc:	468a      	mov	sl, r1
    99de:	4617      	mov	r7, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    99e0:	d841      	bhi.n	9a66 <z_shell_history_put+0xa4>
	history->current = NULL;
    99e2:	2300      	movs	r3, #0
    99e4:	60c3      	str	r3, [r0, #12]
		return;
	}

	z_shell_history_mode_exit(history);

	if (len == 0) {
    99e6:	2a00      	cmp	r2, #0
    99e8:	d03d      	beq.n	9a66 <z_shell_history_put+0xa4>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
    99ea:	f100 0904 	add.w	r9, r0, #4
	return list->head == list;
    99ee:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    99f0:	4581      	cmp	r9, r0
    99f2:	d12d      	bne.n	9a50 <z_shell_history_put+0x8e>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
    99f4:	9301      	str	r3, [sp, #4]
			add_to_head(history, h_item, line, len, padding);
			ring_buf_put_finish(history->ring_buf, claim_len);
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
    99f6:	f04f 0b00 	mov.w	fp, #0
		claim_len = ring_buf_put_claim(history->ring_buf,
    99fa:	6820      	ldr	r0, [r4, #0]
    99fc:	462a      	mov	r2, r5
    99fe:	a901      	add	r1, sp, #4
    9a00:	f7ff fd2d 	bl	945e <ring_buf_put_claim>
		if (claim_len < total_len) {
    9a04:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
    9a06:	4606      	mov	r6, r0
		if (claim_len < total_len) {
    9a08:	d930      	bls.n	9a6c <z_shell_history_put+0xaa>
				ring_buf_put_claim(history->ring_buf,
    9a0a:	6820      	ldr	r0, [r4, #0]
    9a0c:	462a      	mov	r2, r5
    9a0e:	a901      	add	r1, sp, #4
    9a10:	f7ff fd25 	bl	945e <ring_buf_put_claim>
			if (claim2_len == total_len) {
    9a14:	4285      	cmp	r5, r0
    9a16:	d12a      	bne.n	9a6e <z_shell_history_put+0xac>
				ring_buf_put_finish(history->ring_buf,
    9a18:	4631      	mov	r1, r6
    9a1a:	6820      	ldr	r0, [r4, #0]
    9a1c:	f7ff fd3b 	bl	9496 <ring_buf_put_finish>
				padding += claim_len;
    9a20:	44b0      	add	r8, r6
    9a22:	fa1f f888 	uxth.w	r8, r8
    9a26:	462e      	mov	r6, r5
			add_to_head(history, h_item, line, len, padding);
    9a28:	9d01      	ldr	r5, [sp, #4]
	memcpy(item->data, src, len);
    9a2a:	4651      	mov	r1, sl
	item->len = len;
    9a2c:	812f      	strh	r7, [r5, #8]
	item->padding = padding;
    9a2e:	f8a5 800a 	strh.w	r8, [r5, #10]
	memcpy(item->data, src, len);
    9a32:	463a      	mov	r2, r7
    9a34:	f105 000c 	add.w	r0, r5, #12
    9a38:	f000 fddc 	bl	a5f4 <memcpy>
	sys_dnode_t *const head = list->head;
    9a3c:	6863      	ldr	r3, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
    9a3e:	6820      	ldr	r0, [r4, #0]
	node->prev = list;
    9a40:	e9c5 3900 	strd	r3, r9, [r5]
    9a44:	4631      	mov	r1, r6
	head->prev = node;
    9a46:	605d      	str	r5, [r3, #4]
	list->head = node;
    9a48:	6065      	str	r5, [r4, #4]
    9a4a:	f7ff fd24 	bl	9496 <ring_buf_put_finish>
			break;
    9a4e:	e00a      	b.n	9a66 <z_shell_history_put+0xa4>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
    9a50:	9001      	str	r0, [sp, #4]
	if (l_item &&
    9a52:	2800      	cmp	r0, #0
    9a54:	d0cf      	beq.n	99f6 <z_shell_history_put+0x34>
	   (h_item->len == len) &&
    9a56:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
    9a58:	4293      	cmp	r3, r2
    9a5a:	d1cc      	bne.n	99f6 <z_shell_history_put+0x34>
	   (memcmp(h_item->data, line, len) == 0)) {
    9a5c:	300c      	adds	r0, #12
    9a5e:	f000 fda2 	bl	a5a6 <memcmp>
	   (h_item->len == len) &&
    9a62:	2800      	cmp	r0, #0
    9a64:	d1c7      	bne.n	99f6 <z_shell_history_put+0x34>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
    9a66:	b003      	add	sp, #12
    9a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
    9a6c:	d0dc      	beq.n	9a28 <z_shell_history_put+0x66>
		ring_buf_put_finish(history->ring_buf, 0);
    9a6e:	6820      	ldr	r0, [r4, #0]
    9a70:	2100      	movs	r1, #0
    9a72:	f7ff fd10 	bl	9496 <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
    9a76:	6863      	ldr	r3, [r4, #4]
    9a78:	4599      	cmp	r9, r3
    9a7a:	d108      	bne.n	9a8e <z_shell_history_put+0xcc>
			ring_buf_reset(history->ring_buf);
    9a7c:	6820      	ldr	r0, [r4, #0]
    9a7e:	2208      	movs	r2, #8
	buf->tail = 0;
    9a80:	e9c0 bb00 	strd	fp, fp, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    9a84:	2100      	movs	r1, #0
    9a86:	4410      	add	r0, r2
    9a88:	f000 fdbf 	bl	a60a <memset>
}
    9a8c:	e7b5      	b.n	99fa <z_shell_history_put+0x38>
    9a8e:	4620      	mov	r0, r4
    9a90:	f7ff ff4b 	bl	992a <remove_from_tail.part.0>
		if (remove_from_tail(history) == false) {
    9a94:	2800      	cmp	r0, #0
    9a96:	d1b0      	bne.n	99fa <z_shell_history_put+0x38>
    9a98:	e7f0      	b.n	9a7c <z_shell_history_put+0xba>

00009a9a <z_shell_history_init>:

void z_shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
    9a9a:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
    9a9c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
    9aa0:	2300      	movs	r3, #0
    9aa2:	60c3      	str	r3, [r0, #12]
}
    9aa4:	4770      	bx	lr

00009aa6 <z_shell_raw_fprintf>:
{
    9aa6:	b40e      	push	{r1, r2, r3}
    9aa8:	b503      	push	{r0, r1, lr}
    9aaa:	aa03      	add	r2, sp, #12
    9aac:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    9ab0:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    9ab2:	f7f9 ff67 	bl	3984 <z_shell_fprintf_fmt>
}
    9ab6:	b002      	add	sp, #8
    9ab8:	f85d eb04 	ldr.w	lr, [sp], #4
    9abc:	b003      	add	sp, #12
    9abe:	4770      	bx	lr

00009ac0 <full_line_cmd.isra.0>:
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
    9ac0:	6802      	ldr	r2, [r0, #0]
static inline bool full_line_cmd(const struct shell *shell)
    9ac2:	b538      	push	{r3, r4, r5, lr}
    9ac4:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
    9ac6:	6810      	ldr	r0, [r2, #0]
    9ac8:	8f95      	ldrh	r5, [r2, #60]	; 0x3c
	return str == NULL ? 0U : (uint16_t)strlen(str);
    9aca:	b110      	cbz	r0, 9ad2 <full_line_cmd.isra.0+0x12>
    9acc:	f000 fd40 	bl	a550 <strlen>
    9ad0:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    9ad2:	6822      	ldr	r2, [r4, #0]
    9ad4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
    9ad6:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    9ad8:	fbb3 f0f2 	udiv	r0, r3, r2
    9adc:	fb02 3010 	mls	r0, r2, r0, r3
}
    9ae0:	fab0 f080 	clz	r0, r0
    9ae4:	0940      	lsrs	r0, r0, #5
    9ae6:	bd38      	pop	{r3, r4, r5, pc}

00009ae8 <z_shell_cursor_in_empty_line>:
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
    9ae8:	6882      	ldr	r2, [r0, #8]
{
    9aea:	b538      	push	{r3, r4, r5, lr}
    9aec:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
    9aee:	6810      	ldr	r0, [r2, #0]
    9af0:	8fd5      	ldrh	r5, [r2, #62]	; 0x3e
    9af2:	b110      	cbz	r0, 9afa <z_shell_cursor_in_empty_line+0x12>
    9af4:	f000 fd2c 	bl	a550 <strlen>
    9af8:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    9afa:	68a2      	ldr	r2, [r4, #8]
    9afc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
    9afe:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    9b00:	fbb3 f0f2 	udiv	r0, r3, r2
    9b04:	fb02 3010 	mls	r0, r2, r0, r3
}
    9b08:	fab0 f080 	clz	r0, r0
    9b0c:	0940      	lsrs	r0, r0, #5
    9b0e:	bd38      	pop	{r3, r4, r5, pc}

00009b10 <z_shell_op_cursor_move>:
{
    9b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9b12:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    9b14:	6880      	ldr	r0, [r0, #8]
{
    9b16:	460d      	mov	r5, r1
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
    9b18:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    9b1a:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    9b1c:	3020      	adds	r0, #32
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
    9b1e:	440d      	add	r5, r1
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    9b20:	f000 fa67 	bl	9ff2 <z_shell_multiline_data_calc>
						&shell->ctx->vt100_ctx.cons,
    9b24:	68a0      	ldr	r0, [r4, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
    9b26:	b2ad      	uxth	r5, r5
	row_span = z_row_span_with_buffer_offsets_get(
    9b28:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    9b2a:	462a      	mov	r2, r5
    9b2c:	3020      	adds	r0, #32
    9b2e:	f000 fa55 	bl	9fdc <z_row_span_with_buffer_offsets_get>
    9b32:	4607      	mov	r7, r0
						&shell->ctx->vt100_ctx.cons,
    9b34:	68a0      	ldr	r0, [r4, #8]
	col_span = z_column_span_with_buffer_offsets_get(
    9b36:	462a      	mov	r2, r5
    9b38:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    9b3a:	3020      	adds	r0, #32
    9b3c:	f000 fa3f 	bl	9fbe <z_column_span_with_buffer_offsets_get>
	z_shell_op_cursor_vert_move(shell, -row_span);
    9b40:	4279      	negs	r1, r7
	col_span = z_column_span_with_buffer_offsets_get(
    9b42:	4606      	mov	r6, r0
	z_shell_op_cursor_vert_move(shell, -row_span);
    9b44:	4620      	mov	r0, r4
    9b46:	f7fa f84d 	bl	3be4 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, col_span);
    9b4a:	4631      	mov	r1, r6
    9b4c:	4620      	mov	r0, r4
    9b4e:	f7fa f85f 	bl	3c10 <z_shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
    9b52:	68a3      	ldr	r3, [r4, #8]
    9b54:	87dd      	strh	r5, [r3, #62]	; 0x3e
}
    9b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009b58 <z_shell_op_cursor_word_move>:
{
    9b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (val < 0) {
    9b5c:	1e0c      	subs	r4, r1, #0
{
    9b5e:	4606      	mov	r6, r0
	if (val < 0) {
    9b60:	da32      	bge.n	9bc8 <z_shell_op_cursor_word_move+0x70>
		val = -val;
    9b62:	4264      	negs	r4, r4
    9b64:	b224      	sxth	r4, r4
		sign = -1;
    9b66:	f04f 35ff 	mov.w	r5, #4294967295
    9b6a:	b2af      	uxth	r7, r5
    9b6c:	e022      	b.n	9bb4 <z_shell_op_cursor_word_move+0x5c>
		shift = shift_calc(shell->ctx->cmd_buff,
    9b6e:	68b3      	ldr	r3, [r6, #8]
    9b70:	f8b3 e03e 	ldrh.w	lr, [r3, #62]	; 0x3e
    9b74:	f8b3 903c 	ldrh.w	r9, [r3, #60]	; 0x3c
    9b78:	f103 0842 	add.w	r8, r3, #66	; 0x42
	bool found = false;
    9b7c:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
    9b7e:	4673      	mov	r3, lr
		idx = pos + ret * sign;
    9b80:	eba3 010e 	sub.w	r1, r3, lr
    9b84:	b209      	sxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
    9b86:	b90b      	cbnz	r3, 9b8c <z_shell_op_cursor_word_move+0x34>
    9b88:	1c6a      	adds	r2, r5, #1
    9b8a:	d010      	beq.n	9bae <z_shell_op_cursor_word_move+0x56>
    9b8c:	4599      	cmp	r9, r3
    9b8e:	d101      	bne.n	9b94 <z_shell_op_cursor_word_move+0x3c>
		    ((idx == len) && (sign > 0))) {
    9b90:	2d01      	cmp	r5, #1
    9b92:	d00c      	beq.n	9bae <z_shell_op_cursor_word_move+0x56>
		if (isalnum((int)str[idx]) != 0) {
    9b94:	f818 2003 	ldrb.w	r2, [r8, r3]
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    9b98:	f042 0c20 	orr.w	ip, r2, #32
    9b9c:	f1ac 0c61 	sub.w	ip, ip, #97	; 0x61
				(int)'z') ? (chr - 32) : (chr));
}

static inline int isalnum(int chr)
{
	return (int)(isalpha(chr) || isdigit(chr));
    9ba0:	f1bc 0f19 	cmp.w	ip, #25
    9ba4:	d90c      	bls.n	9bc0 <z_shell_op_cursor_word_move+0x68>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    9ba6:	3a30      	subs	r2, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
    9ba8:	2a09      	cmp	r2, #9
    9baa:	d909      	bls.n	9bc0 <z_shell_op_cursor_word_move+0x68>
			if (found) {
    9bac:	b148      	cbz	r0, 9bc2 <z_shell_op_cursor_word_move+0x6a>
		z_shell_op_cursor_move(shell, sign * shift);
    9bae:	4630      	mov	r0, r6
    9bb0:	f7ff ffae 	bl	9b10 <z_shell_op_cursor_move>
	while (val--) {
    9bb4:	3c01      	subs	r4, #1
    9bb6:	b224      	sxth	r4, r4
    9bb8:	1c63      	adds	r3, r4, #1
    9bba:	d1d8      	bne.n	9b6e <z_shell_op_cursor_word_move+0x16>
}
    9bbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
    9bc0:	2001      	movs	r0, #1
	while (1) {
    9bc2:	443b      	add	r3, r7
    9bc4:	b29b      	uxth	r3, r3
		idx = pos + ret * sign;
    9bc6:	e7db      	b.n	9b80 <z_shell_op_cursor_word_move+0x28>
		sign = 1;
    9bc8:	2501      	movs	r5, #1
    9bca:	e7ce      	b.n	9b6a <z_shell_op_cursor_word_move+0x12>

00009bcc <z_shell_op_cursor_home_move>:
	z_shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
    9bcc:	6883      	ldr	r3, [r0, #8]
    9bce:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
    9bd0:	4249      	negs	r1, r1
    9bd2:	b209      	sxth	r1, r1
    9bd4:	f7ff bf9c 	b.w	9b10 <z_shell_op_cursor_move>

00009bd8 <z_shell_op_cursor_end_move>:
	z_shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
    9bd8:	6883      	ldr	r3, [r0, #8]
    9bda:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
    9bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    9bde:	1ac9      	subs	r1, r1, r3
    9be0:	b209      	sxth	r1, r1
    9be2:	f7ff bf95 	b.w	9b10 <z_shell_op_cursor_move>

00009be6 <z_shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
    9be6:	6883      	ldr	r3, [r0, #8]
    9be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    9bea:	b11b      	cbz	r3, 9bf4 <z_shell_op_left_arrow+0xe>
		z_shell_op_cursor_move(shell, -1);
    9bec:	f04f 31ff 	mov.w	r1, #4294967295
    9bf0:	f7ff bf8e 	b.w	9b10 <z_shell_op_cursor_move>
}
    9bf4:	4770      	bx	lr

00009bf6 <z_shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
    9bf6:	6883      	ldr	r3, [r0, #8]
    9bf8:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    9bfa:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    9bfc:	429a      	cmp	r2, r3
    9bfe:	d202      	bcs.n	9c06 <z_shell_op_right_arrow+0x10>
		z_shell_op_cursor_move(shell, 1);
    9c00:	2101      	movs	r1, #1
    9c02:	f7ff bf85 	b.w	9b10 <z_shell_op_cursor_move>
}
    9c06:	4770      	bx	lr

00009c08 <z_shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
    9c08:	6883      	ldr	r3, [r0, #8]
    9c0a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    9c0c:	879a      	strh	r2, [r3, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
    9c0e:	4413      	add	r3, r2
    9c10:	2200      	movs	r2, #0
    9c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	z_clear_eos(shell);
    9c16:	f7f9 bfd9 	b.w	3bcc <z_clear_eos>

00009c1a <z_shell_cmd_line_erase>:
{
    9c1a:	b510      	push	{r4, lr}
    9c1c:	4604      	mov	r4, r0
	z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
    9c1e:	6880      	ldr	r0, [r0, #8]
    9c20:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    9c22:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    9c24:	3020      	adds	r0, #32
    9c26:	f000 f9e4 	bl	9ff2 <z_shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
    9c2a:	68a3      	ldr	r3, [r4, #8]
    9c2c:	8c19      	ldrh	r1, [r3, #32]
	z_shell_op_cursor_horiz_move(shell,
    9c2e:	4620      	mov	r0, r4
    9c30:	f1c1 0101 	rsb	r1, r1, #1
    9c34:	f7f9 ffec 	bl	3c10 <z_shell_op_cursor_horiz_move>
	z_shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
    9c38:	68a3      	ldr	r3, [r4, #8]
    9c3a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    9c3c:	4620      	mov	r0, r4
    9c3e:	3901      	subs	r1, #1
    9c40:	f7f9 ffd0 	bl	3be4 <z_shell_op_cursor_vert_move>
	z_clear_eos(shell);
    9c44:	4620      	mov	r0, r4
}
    9c46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_clear_eos(shell);
    9c4a:	f7f9 bfbf 	b.w	3bcc <z_clear_eos>

00009c4e <z_shell_write>:
{
    9c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9c52:	4605      	mov	r5, r0
    9c54:	b086      	sub	sp, #24
    9c56:	460f      	mov	r7, r1
    9c58:	4614      	mov	r4, r2
	size_t offset = 0;
    9c5a:	2600      	movs	r6, #0
	while (length) {
    9c5c:	b914      	cbnz	r4, 9c64 <z_shell_write+0x16>
}
    9c5e:	b006      	add	sp, #24
    9c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = shell->iface->api->write(shell->iface,
    9c64:	6868      	ldr	r0, [r5, #4]
    9c66:	6803      	ldr	r3, [r0, #0]
    9c68:	4622      	mov	r2, r4
    9c6a:	f8d3 800c 	ldr.w	r8, [r3, #12]
    9c6e:	19b9      	adds	r1, r7, r6
    9c70:	466b      	mov	r3, sp
    9c72:	47c0      	blx	r8
		offset += tmp_cnt;
    9c74:	9a00      	ldr	r2, [sp, #0]
    9c76:	4416      	add	r6, r2
		length -= tmp_cnt;
    9c78:	1aa4      	subs	r4, r4, r2
		if (tmp_cnt == 0 &&
    9c7a:	2a00      	cmp	r2, #0
    9c7c:	d1ee      	bne.n	9c5c <z_shell_write+0xe>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
    9c7e:	68ab      	ldr	r3, [r5, #8]
    9c80:	7919      	ldrb	r1, [r3, #4]
		if (tmp_cnt == 0 &&
    9c82:	2903      	cmp	r1, #3
    9c84:	d0ea      	beq.n	9c5c <z_shell_write+0xe>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
    9c86:	2902      	cmp	r1, #2
    9c88:	d813      	bhi.n	9cb2 <z_shell_write+0x64>
		k_poll_event_init(&event,
    9c8a:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
    9c8e:	2101      	movs	r1, #1
    9c90:	a801      	add	r0, sp, #4
    9c92:	f001 fd6a 	bl	b76a <k_poll_event_init>
	return z_impl_k_poll(events, num_events, timeout);
    9c96:	f04f 32ff 	mov.w	r2, #4294967295
    9c9a:	f04f 33ff 	mov.w	r3, #4294967295
    9c9e:	2101      	movs	r1, #1
    9ca0:	a801      	add	r0, sp, #4
    9ca2:	f7fd fe61 	bl	7968 <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
    9ca6:	68a8      	ldr	r0, [r5, #8]
    9ca8:	f500 7076 	add.w	r0, r0, #984	; 0x3d8
	z_impl_k_poll_signal_reset(sig);
    9cac:	f001 fd7f 	bl	b7ae <z_impl_k_poll_signal_reset>
    9cb0:	e7d4      	b.n	9c5c <z_shell_write+0xe>
	return sh->ctx->ctx.flags.tx_rdy == 1;
    9cb2:	f8d3 23a4 	ldr.w	r2, [r3, #932]	; 0x3a4
		while (!z_flag_tx_rdy_get(shell)) {
    9cb6:	0792      	lsls	r2, r2, #30
    9cb8:	d5fb      	bpl.n	9cb2 <z_shell_write+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9cba:	f3bf 8f5b 	dmb	ish
    9cbe:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
    9cc2:	e853 2f00 	ldrex	r2, [r3]
    9cc6:	f022 0202 	bic.w	r2, r2, #2
    9cca:	e843 2100 	strex	r1, r2, [r3]
    9cce:	2900      	cmp	r1, #0
    9cd0:	d1f7      	bne.n	9cc2 <z_shell_write+0x74>
    9cd2:	f3bf 8f5b 	dmb	ish
	return ret;
    9cd6:	e7c1      	b.n	9c5c <z_shell_write+0xe>

00009cd8 <z_shell_print_stream>:
	z_shell_write((const struct shell *) user_ctx, data, len);
    9cd8:	f7ff bfb9 	b.w	9c4e <z_shell_write>

00009cdc <z_shell_vfprintf>:

void z_shell_vfprintf(const struct shell *shell, enum shell_vt100_color color,
		      const char *fmt, va_list args)
{
    9cdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9cde:	460f      	mov	r7, r1
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
	    z_flag_use_colors_get(shell)	  &&
    9ce0:	6881      	ldr	r1, [r0, #8]
{
    9ce2:	461e      	mov	r6, r3
	return sh->ctx->cfg.flags.use_colors == 1;
    9ce4:	f8d1 33a0 	ldr.w	r3, [r1, #928]	; 0x3a0
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
    9ce8:	06db      	lsls	r3, r3, #27
{
    9cea:	4604      	mov	r4, r0
    9cec:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
    9cee:	d517      	bpl.n	9d20 <z_shell_vfprintf+0x44>
	    z_flag_use_colors_get(shell)	  &&
    9cf0:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    9cf4:	42bb      	cmp	r3, r7
    9cf6:	d013      	beq.n	9d20 <z_shell_vfprintf+0x44>
			     enum shell_vt100_color color);

static inline void z_shell_vt100_colors_store(const struct shell *sh,
					      struct shell_vt100_colors *color)
{
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
    9cf8:	2202      	movs	r2, #2
    9cfa:	312e      	adds	r1, #46	; 0x2e
    9cfc:	a801      	add	r0, sp, #4
    9cfe:	f000 fc79 	bl	a5f4 <memcpy>
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		z_shell_vt100_colors_store(shell, &col);
		z_shell_vt100_color_set(shell, color);
    9d02:	4639      	mov	r1, r7
    9d04:	4620      	mov	r0, r4
    9d06:	f7f9 ffdf 	bl	3cc8 <z_shell_vt100_color_set>

		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
    9d0a:	6960      	ldr	r0, [r4, #20]
    9d0c:	4629      	mov	r1, r5
    9d0e:	4632      	mov	r2, r6
    9d10:	f7f9 fe38 	bl	3984 <z_shell_fprintf_fmt>

		z_shell_vt100_colors_restore(shell, &col);
    9d14:	a901      	add	r1, sp, #4
    9d16:	4620      	mov	r0, r4
    9d18:	f7f9 fff6 	bl	3d08 <z_shell_vt100_colors_restore>
	} else {
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
    9d1c:	b003      	add	sp, #12
    9d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
    9d20:	6960      	ldr	r0, [r4, #20]
    9d22:	4632      	mov	r2, r6
    9d24:	4629      	mov	r1, r5
    9d26:	f7f9 fe2d 	bl	3984 <z_shell_fprintf_fmt>
}
    9d2a:	e7f7      	b.n	9d1c <z_shell_vfprintf+0x40>

00009d2c <z_shell_fprintf>:

void z_shell_fprintf(const struct shell *sh,
		     enum shell_vt100_color color,
		     const char *fmt, ...)
{
    9d2c:	b40c      	push	{r2, r3}
    9d2e:	b507      	push	{r0, r1, r2, lr}
    9d30:	ab04      	add	r3, sp, #16
    9d32:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT(z_flag_panic_mode_get(sh) || !k_is_in_isr(),
		 "Thread context required.");

	va_list args;

	va_start(args, fmt);
    9d36:	9301      	str	r3, [sp, #4]
	z_shell_vfprintf(sh, color, fmt, args);
    9d38:	f7ff ffd0 	bl	9cdc <z_shell_vfprintf>
	va_end(args);
}
    9d3c:	b003      	add	sp, #12
    9d3e:	f85d eb04 	ldr.w	lr, [sp], #4
    9d42:	b002      	add	sp, #8
    9d44:	4770      	bx	lr

00009d46 <data_insert>:
{
    9d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    9d4a:	6886      	ldr	r6, [r0, #8]
    9d4c:	8fb5      	ldrh	r5, [r6, #60]	; 0x3c
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    9d4e:	18ab      	adds	r3, r5, r2
    9d50:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
{
    9d54:	4607      	mov	r7, r0
    9d56:	4688      	mov	r8, r1
    9d58:	4614      	mov	r4, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    9d5a:	da1f      	bge.n	9d9c <data_insert+0x56>
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    9d5c:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
    9d5e:	1aed      	subs	r5, r5, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
    9d60:	3342      	adds	r3, #66	; 0x42
    9d62:	441e      	add	r6, r3
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    9d64:	b2ad      	uxth	r5, r5
	memmove(curr_pos + len, curr_pos, after);
    9d66:	462a      	mov	r2, r5
    9d68:	4631      	mov	r1, r6
    9d6a:	1930      	adds	r0, r6, r4
    9d6c:	f000 fc2b 	bl	a5c6 <memmove>
	memcpy(curr_pos, data, len);
    9d70:	4622      	mov	r2, r4
    9d72:	4641      	mov	r1, r8
    9d74:	4630      	mov	r0, r6
    9d76:	f000 fc3d 	bl	a5f4 <memcpy>
	shell->ctx->cmd_buff_len += len;
    9d7a:	68ba      	ldr	r2, [r7, #8]
    9d7c:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
    9d7e:	4423      	add	r3, r4
    9d80:	b29b      	uxth	r3, r3
    9d82:	8793      	strh	r3, [r2, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    9d84:	4413      	add	r3, r2
    9d86:	2200      	movs	r2, #0
    9d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	if (!z_flag_echo_get(shell)) {
    9d8c:	68bb      	ldr	r3, [r7, #8]
	return sh->ctx->cfg.flags.echo == 1;
    9d8e:	f8d3 13a0 	ldr.w	r1, [r3, #928]	; 0x3a0
    9d92:	0789      	lsls	r1, r1, #30
    9d94:	d404      	bmi.n	9da0 <data_insert+0x5a>
		shell->ctx->cmd_buff_pos += len;
    9d96:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    9d98:	4414      	add	r4, r2
    9d9a:	87dc      	strh	r4, [r3, #62]	; 0x3e
}
    9d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
    9da0:	4629      	mov	r1, r5
    9da2:	4638      	mov	r0, r7
}
    9da4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
    9da8:	f7fa b828 	b.w	3dfc <reprint_from_cursor>

00009dac <z_shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
    9dac:	f7ff bfcb 	b.w	9d46 <data_insert>

00009db0 <z_shell_op_char_delete>:
{
    9db0:	b538      	push	{r3, r4, r5, lr}
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    9db2:	6883      	ldr	r3, [r0, #8]
{
    9db4:	4605      	mov	r5, r0
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    9db6:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
    9db8:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
    9dba:	1a24      	subs	r4, r4, r0
    9dbc:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
    9dbe:	b18c      	cbz	r4, 9de4 <z_shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
    9dc0:	3042      	adds	r0, #66	; 0x42
    9dc2:	4418      	add	r0, r3
	memmove(str, str + 1, diff);
    9dc4:	4622      	mov	r2, r4
    9dc6:	1c41      	adds	r1, r0, #1
    9dc8:	f000 fbfd 	bl	a5c6 <memmove>
	--shell->ctx->cmd_buff_len;
    9dcc:	68aa      	ldr	r2, [r5, #8]
    9dce:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
    9dd0:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
    9dd2:	3b01      	subs	r3, #1
    9dd4:	8793      	strh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
    9dd6:	4628      	mov	r0, r5
    9dd8:	2201      	movs	r2, #1
}
    9dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
    9dde:	b289      	uxth	r1, r1
    9de0:	f7fa b80c 	b.w	3dfc <reprint_from_cursor>
}
    9de4:	bd38      	pop	{r3, r4, r5, pc}

00009de6 <z_shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
    9de6:	6883      	ldr	r3, [r0, #8]
    9de8:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
    9dea:	b510      	push	{r4, lr}
    9dec:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    9dee:	b152      	cbz	r2, 9e06 <z_shell_op_char_backspace+0x20>
    9df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    9df2:	b143      	cbz	r3, 9e06 <z_shell_op_char_backspace+0x20>
	z_shell_op_cursor_move(shell, -1);
    9df4:	f04f 31ff 	mov.w	r1, #4294967295
    9df8:	f7ff fe8a 	bl	9b10 <z_shell_op_cursor_move>
	z_shell_op_char_delete(shell);
    9dfc:	4620      	mov	r0, r4
}
    9dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_op_char_delete(shell);
    9e02:	f7ff bfd5 	b.w	9db0 <z_shell_op_char_delete>
}
    9e06:	bd10      	pop	{r4, pc}

00009e08 <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
    9e08:	6883      	ldr	r3, [r0, #8]
    9e0a:	6a1b      	ldr	r3, [r3, #32]
    9e0c:	b103      	cbz	r3, 9e10 <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
    9e0e:	4718      	bx	r3
}
    9e10:	4770      	bx	lr

00009e12 <read>:
{
    9e12:	b510      	push	{r4, lr}
    9e14:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
    9e16:	6843      	ldr	r3, [r0, #4]
    9e18:	68d8      	ldr	r0, [r3, #12]
    9e1a:	f7ff fbbb 	bl	9594 <ring_buf_get>
    9e1e:	6020      	str	r0, [r4, #0]
}
    9e20:	2000      	movs	r0, #0
    9e22:	bd10      	pop	{r4, pc}

00009e24 <write>:
{
    9e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    9e28:	6845      	ldr	r5, [r0, #4]
{
    9e2a:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
    9e2c:	682b      	ldr	r3, [r5, #0]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
    9e2e:	7c1b      	ldrb	r3, [r3, #16]
{
    9e30:	460c      	mov	r4, r1
    9e32:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
    9e34:	b153      	cbz	r3, 9e4c <write+0x28>
    9e36:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
    9e3a:	4544      	cmp	r4, r8
    9e3c:	682b      	ldr	r3, [r5, #0]
    9e3e:	d120      	bne.n	9e82 <write+0x5e>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    9e40:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
		*cnt = length;
    9e44:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    9e46:	2001      	movs	r0, #1
    9e48:	4790      	blx	r2
    9e4a:	e017      	b.n	9e7c <write+0x58>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
    9e4c:	68a8      	ldr	r0, [r5, #8]
    9e4e:	f7ff fb3c 	bl	94ca <ring_buf_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9e52:	682b      	ldr	r3, [r5, #0]
    9e54:	6030      	str	r0, [r6, #0]
    9e56:	330c      	adds	r3, #12
    9e58:	2101      	movs	r1, #1
    9e5a:	f3bf 8f5b 	dmb	ish
    9e5e:	e853 2f00 	ldrex	r2, [r3]
    9e62:	e843 1000 	strex	r0, r1, [r3]
    9e66:	2800      	cmp	r0, #0
    9e68:	d1f9      	bne.n	9e5e <write+0x3a>
    9e6a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
    9e6e:	b92a      	cbnz	r2, 9e7c <write+0x58>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
    9e70:	682b      	ldr	r3, [r5, #0]
    9e72:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable != NULL) {
    9e74:	6883      	ldr	r3, [r0, #8]
    9e76:	69db      	ldr	r3, [r3, #28]
    9e78:	b103      	cbz	r3, 9e7c <write+0x58>
		api->irq_tx_enable(dev);
    9e7a:	4798      	blx	r3
}
    9e7c:	2000      	movs	r0, #0
    9e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
    9e82:	6818      	ldr	r0, [r3, #0]
    9e84:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
    9e88:	6883      	ldr	r3, [r0, #8]
    9e8a:	685b      	ldr	r3, [r3, #4]
    9e8c:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    9e8e:	e7d4      	b.n	9e3a <write+0x16>

00009e90 <uninit>:
		const struct device *dev = sh_uart->ctrl_blk->dev;
    9e90:	6843      	ldr	r3, [r0, #4]
    9e92:	681b      	ldr	r3, [r3, #0]
{
    9e94:	b510      	push	{r4, lr}
		const struct device *dev = sh_uart->ctrl_blk->dev;
    9e96:	681c      	ldr	r4, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_TX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
    9e98:	4620      	mov	r0, r4
    9e9a:	f7ff ffb5 	bl	9e08 <z_impl_uart_irq_tx_disable>
	if (api->irq_rx_disable != NULL) {
    9e9e:	68a3      	ldr	r3, [r4, #8]
    9ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9ea2:	b10b      	cbz	r3, 9ea8 <uninit+0x18>
		api->irq_rx_disable(dev);
    9ea4:	4620      	mov	r0, r4
    9ea6:	4798      	blx	r3
}
    9ea8:	2000      	movs	r0, #0
    9eaa:	bd10      	pop	{r4, pc}

00009eac <enable>:
{
    9eac:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
    9eae:	6843      	ldr	r3, [r0, #4]
    9eb0:	681b      	ldr	r3, [r3, #0]
    9eb2:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
    9eb4:	b111      	cbz	r1, 9ebc <enable+0x10>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
    9eb6:	6818      	ldr	r0, [r3, #0]
    9eb8:	f7ff ffa6 	bl	9e08 <z_impl_uart_irq_tx_disable>
}
    9ebc:	2000      	movs	r0, #0
    9ebe:	bd08      	pop	{r3, pc}

00009ec0 <uart_callback>:
{
    9ec0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9ec4:	4680      	mov	r8, r0
    9ec6:	460d      	mov	r5, r1
	if (api->irq_update == NULL) {
    9ec8:	6883      	ldr	r3, [r0, #8]
    9eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9ecc:	b103      	cbz	r3, 9ed0 <uart_callback+0x10>
	return api->irq_update(dev);
    9ece:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
    9ed0:	f8d8 3008 	ldr.w	r3, [r8, #8]
    9ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9ed6:	bb13      	cbnz	r3, 9f1e <uart_callback+0x5e>
    9ed8:	2700      	movs	r7, #0
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
    9eda:	68e8      	ldr	r0, [r5, #12]
    9edc:	a901      	add	r1, sp, #4
    9ede:	6902      	ldr	r2, [r0, #16]
    9ee0:	f7ff fabd 	bl	945e <ring_buf_put_claim>
		if (len > 0) {
    9ee4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    9ee8:	4606      	mov	r6, r0
    9eea:	2800      	cmp	r0, #0
    9eec:	d02f      	beq.n	9f4e <uart_callback+0x8e>
	if (api->fifo_read == NULL) {
    9eee:	699b      	ldr	r3, [r3, #24]
			rd_len = uart_fifo_read(dev, data, len);
    9ef0:	9901      	ldr	r1, [sp, #4]
    9ef2:	b34b      	cbz	r3, 9f48 <uart_callback+0x88>
	return api->fifo_read(dev, rx_data, size);
    9ef4:	4602      	mov	r2, r0
    9ef6:	4640      	mov	r0, r8
    9ef8:	4798      	blx	r3
    9efa:	4604      	mov	r4, r0
				new_data = true;
    9efc:	2c00      	cmp	r4, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    9efe:	68e8      	ldr	r0, [r5, #12]
    9f00:	4621      	mov	r1, r4
				new_data = true;
    9f02:	bf18      	it	ne
    9f04:	2701      	movne	r7, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    9f06:	f7ff fac6 	bl	9496 <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
    9f0a:	b10c      	cbz	r4, 9f10 <uart_callback+0x50>
    9f0c:	42a6      	cmp	r6, r4
    9f0e:	d0e4      	beq.n	9eda <uart_callback+0x1a>
	if (new_data) {
    9f10:	b14f      	cbz	r7, 9f26 <uart_callback+0x66>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
    9f12:	682b      	ldr	r3, [r5, #0]
    9f14:	2000      	movs	r0, #0
    9f16:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    9f1a:	4790      	blx	r2
}
    9f1c:	e003      	b.n	9f26 <uart_callback+0x66>
	return api->irq_rx_ready(dev);
    9f1e:	4640      	mov	r0, r8
    9f20:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
    9f22:	2800      	cmp	r0, #0
    9f24:	d1d8      	bne.n	9ed8 <uart_callback+0x18>
	if (api->irq_tx_ready == NULL) {
    9f26:	f8d8 3008 	ldr.w	r3, [r8, #8]
    9f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9f2c:	b9db      	cbnz	r3, 9f66 <uart_callback+0xa6>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (uint8_t **)&data,
    9f2e:	68a8      	ldr	r0, [r5, #8]
    9f30:	a901      	add	r1, sp, #4
    9f32:	6902      	ldr	r2, [r0, #16]
    9f34:	f7ff fae8 	bl	9508 <ring_buf_get_claim>
	if (len) {
    9f38:	4604      	mov	r4, r0
    9f3a:	b9d8      	cbnz	r0, 9f74 <uart_callback+0xb4>
    9f3c:	4640      	mov	r0, r8
    9f3e:	f7ff ff63 	bl	9e08 <z_impl_uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
    9f42:	682b      	ldr	r3, [r5, #0]
    9f44:	60dc      	str	r4, [r3, #12]
    9f46:	e021      	b.n	9f8c <uart_callback+0xcc>
		return -ENOSYS;
    9f48:	f06f 0457 	mvn.w	r4, #87	; 0x57
    9f4c:	e7d6      	b.n	9efc <uart_callback+0x3c>
	if (api->fifo_read == NULL) {
    9f4e:	699b      	ldr	r3, [r3, #24]
    9f50:	b133      	cbz	r3, 9f60 <uart_callback+0xa0>
	return api->fifo_read(dev, rx_data, size);
    9f52:	2201      	movs	r2, #1
    9f54:	f10d 0103 	add.w	r1, sp, #3
    9f58:	4640      	mov	r0, r8
    9f5a:	4798      	blx	r3
    9f5c:	4604      	mov	r4, r0
    9f5e:	e7d4      	b.n	9f0a <uart_callback+0x4a>
		return -ENOSYS;
    9f60:	f06f 0457 	mvn.w	r4, #87	; 0x57
    9f64:	e7d1      	b.n	9f0a <uart_callback+0x4a>
	return api->irq_tx_ready(dev);
    9f66:	4640      	mov	r0, r8
    9f68:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
    9f6a:	2800      	cmp	r0, #0
    9f6c:	d1df      	bne.n	9f2e <uart_callback+0x6e>
}
    9f6e:	b002      	add	sp, #8
    9f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (api->fifo_fill == NULL) {
    9f74:	f8d8 3008 	ldr.w	r3, [r8, #8]
		len = uart_fifo_fill(dev, data, len);
    9f78:	9901      	ldr	r1, [sp, #4]
    9f7a:	695b      	ldr	r3, [r3, #20]
    9f7c:	b163      	cbz	r3, 9f98 <uart_callback+0xd8>
	return api->fifo_fill(dev, tx_data, size);
    9f7e:	4602      	mov	r2, r0
    9f80:	4640      	mov	r0, r8
    9f82:	4798      	blx	r3
    9f84:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
    9f86:	68a8      	ldr	r0, [r5, #8]
    9f88:	f7ff fae8 	bl	955c <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    9f8c:	682b      	ldr	r3, [r5, #0]
    9f8e:	2001      	movs	r0, #1
    9f90:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    9f94:	4790      	blx	r2
}
    9f96:	e7ea      	b.n	9f6e <uart_callback+0xae>
		return -ENOSYS;
    9f98:	f06f 0157 	mvn.w	r1, #87	; 0x57
    9f9c:	e7f3      	b.n	9f86 <uart_callback+0xc6>

00009f9e <isspace>:
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    9f9e:	2820      	cmp	r0, #32
    9fa0:	d005      	beq.n	9fae <isspace+0x10>
    9fa2:	3809      	subs	r0, #9
    9fa4:	2804      	cmp	r0, #4
    9fa6:	bf8c      	ite	hi
    9fa8:	2000      	movhi	r0, #0
    9faa:	2001      	movls	r0, #1
    9fac:	4770      	bx	lr
    9fae:	2001      	movs	r0, #1
}
    9fb0:	4770      	bx	lr

00009fb2 <z_shell_strlen>:
{
    9fb2:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
    9fb4:	b110      	cbz	r0, 9fbc <z_shell_strlen+0xa>
    9fb6:	f000 facb 	bl	a550 <strlen>
    9fba:	b280      	uxth	r0, r0
}
    9fbc:	bd08      	pop	{r3, pc}

00009fbe <z_column_span_with_buffer_offsets_get>:
{
    9fbe:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
    9fc0:	7b04      	ldrb	r4, [r0, #12]
    9fc2:	8943      	ldrh	r3, [r0, #10]
    9fc4:	4422      	add	r2, r4
    9fc6:	4421      	add	r1, r4
    9fc8:	fbb2 f0f3 	udiv	r0, r2, r3
    9fcc:	fbb1 f4f3 	udiv	r4, r1, r3
    9fd0:	fb03 2010 	mls	r0, r3, r0, r2
    9fd4:	fb03 1114 	mls	r1, r3, r4, r1
}
    9fd8:	1a40      	subs	r0, r0, r1
    9fda:	bd10      	pop	{r4, pc}

00009fdc <z_row_span_with_buffer_offsets_get>:
{
    9fdc:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
    9fde:	7b04      	ldrb	r4, [r0, #12]
    9fe0:	8943      	ldrh	r3, [r0, #10]
    9fe2:	4421      	add	r1, r4
    9fe4:	1910      	adds	r0, r2, r4
    9fe6:	fbb1 f1f3 	udiv	r1, r1, r3
    9fea:	fbb0 f0f3 	udiv	r0, r0, r3
}
    9fee:	1a40      	subs	r0, r0, r1
    9ff0:	bd10      	pop	{r4, pc}

00009ff2 <z_shell_multiline_data_calc>:
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    9ff2:	7b03      	ldrb	r3, [r0, #12]
{
    9ff4:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    9ff6:	8944      	ldrh	r4, [r0, #10]
    9ff8:	4419      	add	r1, r3
    9ffa:	fbb1 f5f4 	udiv	r5, r1, r4
    9ffe:	fb04 1115 	mls	r1, r4, r5, r1
    a002:	3101      	adds	r1, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    a004:	441a      	add	r2, r3
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    a006:	8001      	strh	r1, [r0, #0]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    a008:	fbb2 f3f4 	udiv	r3, r2, r4
    a00c:	1c59      	adds	r1, r3, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    a00e:	fb04 2313 	mls	r3, r4, r3, r2
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
    a012:	3501      	adds	r5, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    a014:	3301      	adds	r3, #1
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
    a016:	8085      	strh	r5, [r0, #4]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    a018:	80c1      	strh	r1, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    a01a:	8043      	strh	r3, [r0, #2]
}
    a01c:	bd30      	pop	{r4, r5, pc}

0000a01e <z_shell_make_argv>:
{
    a01e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*argc = 0;
    a022:	2500      	movs	r5, #0
{
    a024:	4606      	mov	r6, r0
    a026:	460f      	mov	r7, r1
    a028:	4614      	mov	r4, r2
    a02a:	4698      	mov	r8, r3
	*argc = 0;
    a02c:	6005      	str	r5, [r0, #0]
		c = *cmd;
    a02e:	7820      	ldrb	r0, [r4, #0]
		if (c == '\0') {
    a030:	2800      	cmp	r0, #0
    a032:	f000 80b5 	beq.w	a1a0 <z_shell_make_argv+0x182>
		if (isspace((int) c)) {
    a036:	f7ff ffb2 	bl	9f9e <isspace>
    a03a:	b118      	cbz	r0, a044 <z_shell_make_argv+0x26>
			*cmd++ = '\0';
    a03c:	2300      	movs	r3, #0
    a03e:	f804 3b01 	strb.w	r3, [r4], #1
			continue;
    a042:	e7f4      	b.n	a02e <z_shell_make_argv+0x10>
		argv[(*argc)++] = cmd;
    a044:	6832      	ldr	r2, [r6, #0]
    a046:	1c53      	adds	r3, r2, #1
		if (*argc == max_argc) {
    a048:	4543      	cmp	r3, r8
		argv[(*argc)++] = cmd;
    a04a:	6033      	str	r3, [r6, #0]
    a04c:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
		if (*argc == max_argc) {
    a050:	f000 80a6 	beq.w	a1a0 <z_shell_make_argv+0x182>
	char quote = 0;
    a054:	4605      	mov	r5, r0
		c = *cmd;
    a056:	f894 9000 	ldrb.w	r9, [r4]
		if (c == '\0') {
    a05a:	f1b9 0f00 	cmp.w	r9, #0
    a05e:	d0e6      	beq.n	a02e <z_shell_make_argv+0x10>
		if (!quote) {
    a060:	2d00      	cmp	r5, #0
    a062:	f040 8089 	bne.w	a178 <z_shell_make_argv+0x15a>
			switch (c) {
    a066:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
    a06a:	d006      	beq.n	a07a <z_shell_make_argv+0x5c>
    a06c:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    a070:	f000 808a 	beq.w	a188 <z_shell_make_argv+0x16a>
    a074:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
    a078:	d176      	bne.n	a168 <z_shell_make_argv+0x14a>
						z_shell_strlen(cmd));
    a07a:	4620      	mov	r0, r4
    a07c:	f7ff ff99 	bl	9fb2 <z_shell_strlen>
				memmove(cmd, cmd + 1,
    a080:	1c61      	adds	r1, r4, #1
						z_shell_strlen(cmd));
    a082:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
    a084:	4620      	mov	r0, r4
    a086:	f000 fa9e 	bl	a5c6 <memmove>
				continue;
    a08a:	464d      	mov	r5, r9
    a08c:	e7e3      	b.n	a056 <z_shell_make_argv+0x38>
			memmove(cmd, cmd + 1, z_shell_strlen(cmd));
    a08e:	4620      	mov	r0, r4
    a090:	f7ff ff8f 	bl	9fb2 <z_shell_strlen>
    a094:	1c61      	adds	r1, r4, #1
    a096:	4602      	mov	r2, r0
    a098:	4620      	mov	r0, r4
    a09a:	f000 fa94 	bl	a5c6 <memmove>
			quote = 0;
    a09e:	2500      	movs	r5, #0
			continue;
    a0a0:	e7d9      	b.n	a056 <z_shell_make_argv+0x38>
			if (t == '0') {
    a0a2:	2930      	cmp	r1, #48	; 0x30
    a0a4:	d125      	bne.n	a0f2 <z_shell_make_argv+0xd4>
    a0a6:	2302      	movs	r3, #2
				uint8_t v = 0U;
    a0a8:	f04f 0a00 	mov.w	sl, #0
					t = *(cmd + i);
    a0ac:	5ce1      	ldrb	r1, [r4, r3]
					if (t >= '0' && t <= '7') {
    a0ae:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    a0b2:	b2d0      	uxtb	r0, r2
    a0b4:	2807      	cmp	r0, #7
    a0b6:	fa5f f983 	uxtb.w	r9, r3
    a0ba:	d817      	bhi.n	a0ec <z_shell_make_argv+0xce>
						v = (v << 3) | (t - '0');
    a0bc:	3301      	adds	r3, #1
    a0be:	ea42 0aca 	orr.w	sl, r2, sl, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
    a0c2:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
    a0c4:	fa5f fa8a 	uxtb.w	sl, sl
				for (i = 2U; i < (2 + 3); i++) {
    a0c8:	d1f0      	bne.n	a0ac <z_shell_make_argv+0x8e>
    a0ca:	4699      	mov	r9, r3
						z_shell_strlen(cmd) - (i - 2));
    a0cc:	4620      	mov	r0, r4
    a0ce:	f7ff ff70 	bl	9fb2 <z_shell_strlen>
					memmove(cmd, cmd + (i - 1),
    a0d2:	f109 3bff 	add.w	fp, r9, #4294967295
    a0d6:	44a3      	add	fp, r4
						z_shell_strlen(cmd) - (i - 2));
    a0d8:	1c82      	adds	r2, r0, #2
					memmove(cmd, cmd + (i - 1),
    a0da:	eba2 0209 	sub.w	r2, r2, r9
    a0de:	4620      	mov	r0, r4
    a0e0:	4659      	mov	r1, fp
    a0e2:	f000 fa70 	bl	a5c6 <memmove>
					*cmd++ = v;
    a0e6:	f804 ab01 	strb.w	sl, [r4], #1
					continue;
    a0ea:	e7b4      	b.n	a056 <z_shell_make_argv+0x38>
				if (i > 2) {
    a0ec:	f1b9 0f02 	cmp.w	r9, #2
    a0f0:	d1ec      	bne.n	a0cc <z_shell_make_argv+0xae>
			if (t == 'x') {
    a0f2:	2978      	cmp	r1, #120	; 0x78
    a0f4:	d13e      	bne.n	a174 <z_shell_make_argv+0x156>
    a0f6:	2302      	movs	r3, #2
				uint8_t v = 0U;
    a0f8:	f04f 0900 	mov.w	r9, #0
					t = *(cmd + i);
    a0fc:	5ce2      	ldrb	r2, [r4, r3]
					if (t >= '0' && t <= '9') {
    a0fe:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    a102:	fa5f fc81 	uxtb.w	ip, r1
    a106:	f1bc 0f09 	cmp.w	ip, #9
    a10a:	b2d8      	uxtb	r0, r3
    a10c:	d819      	bhi.n	a142 <z_shell_make_argv+0x124>
						v = (v << 4) | (t - '0');
    a10e:	ea41 1209 	orr.w	r2, r1, r9, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
    a112:	2b03      	cmp	r3, #3
						v = (v << 4) | (t - 'A' + 10);
    a114:	fa5f f982 	uxtb.w	r9, r2
				for (i = 2U; i < (2 + 2); i++) {
    a118:	d111      	bne.n	a13e <z_shell_make_argv+0x120>
    a11a:	f04f 0b04 	mov.w	fp, #4
						z_shell_strlen(cmd) - (i - 2));
    a11e:	4620      	mov	r0, r4
    a120:	f7ff ff47 	bl	9fb2 <z_shell_strlen>
					memmove(cmd, cmd + (i - 1),
    a124:	f10b 3aff 	add.w	sl, fp, #4294967295
    a128:	44a2      	add	sl, r4
						z_shell_strlen(cmd) - (i - 2));
    a12a:	1c82      	adds	r2, r0, #2
					memmove(cmd, cmd + (i - 1),
    a12c:	eba2 020b 	sub.w	r2, r2, fp
    a130:	4620      	mov	r0, r4
    a132:	4651      	mov	r1, sl
    a134:	f000 fa47 	bl	a5c6 <memmove>
					*cmd++ = v;
    a138:	f804 9b01 	strb.w	r9, [r4], #1
					continue;
    a13c:	e78b      	b.n	a056 <z_shell_make_argv+0x38>
    a13e:	2303      	movs	r3, #3
    a140:	e7dc      	b.n	a0fc <z_shell_make_argv+0xde>
					} else if ((t >= 'a') &&
    a142:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
    a146:	2905      	cmp	r1, #5
    a148:	d803      	bhi.n	a152 <z_shell_make_argv+0x134>
						v = (v << 4) | (t - 'a' + 10);
    a14a:	3a57      	subs	r2, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
    a14c:	ea42 1209 	orr.w	r2, r2, r9, lsl #4
    a150:	e7df      	b.n	a112 <z_shell_make_argv+0xf4>
					} else if ((t >= 'A') && (t <= 'F')) {
    a152:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
    a156:	2905      	cmp	r1, #5
    a158:	d801      	bhi.n	a15e <z_shell_make_argv+0x140>
						v = (v << 4) | (t - 'A' + 10);
    a15a:	3a37      	subs	r2, #55	; 0x37
    a15c:	e7f6      	b.n	a14c <z_shell_make_argv+0x12e>
				if (i > 2) {
    a15e:	2802      	cmp	r0, #2
    a160:	d008      	beq.n	a174 <z_shell_make_argv+0x156>
    a162:	f04f 0b03 	mov.w	fp, #3
    a166:	e7da      	b.n	a11e <z_shell_make_argv+0x100>
		if (!quote && isspace((int) c)) {
    a168:	4648      	mov	r0, r9
    a16a:	f7ff ff18 	bl	9f9e <isspace>
    a16e:	2800      	cmp	r0, #0
    a170:	f47f af5d 	bne.w	a02e <z_shell_make_argv+0x10>
		cmd += 1;
    a174:	3401      	adds	r4, #1
    a176:	e76e      	b.n	a056 <z_shell_make_argv+0x38>
		if (quote == c) {
    a178:	45a9      	cmp	r9, r5
    a17a:	d088      	beq.n	a08e <z_shell_make_argv+0x70>
		if (quote && c == '\\') {
    a17c:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    a180:	d1f8      	bne.n	a174 <z_shell_make_argv+0x156>
    a182:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
    a184:	428d      	cmp	r5, r1
    a186:	d18c      	bne.n	a0a2 <z_shell_make_argv+0x84>
						z_shell_strlen(cmd));
    a188:	4620      	mov	r0, r4
    a18a:	f7ff ff12 	bl	9fb2 <z_shell_strlen>
				memmove(cmd, cmd + 1,
    a18e:	f104 0901 	add.w	r9, r4, #1
						z_shell_strlen(cmd));
    a192:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
    a194:	4649      	mov	r1, r9
    a196:	4620      	mov	r0, r4
    a198:	f000 fa15 	bl	a5c6 <memmove>
				cmd += 1;
    a19c:	464c      	mov	r4, r9
				continue;
    a19e:	e75a      	b.n	a056 <z_shell_make_argv+0x38>
}
    a1a0:	4628      	mov	r0, r5
    a1a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000a1a6 <z_shell_pattern_remove>:
{
    a1a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a1a8:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
    a1aa:	4611      	mov	r1, r2
{
    a1ac:	4615      	mov	r5, r2
    a1ae:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
    a1b0:	f000 fa34 	bl	a61c <strstr>
    a1b4:	4604      	mov	r4, r0
	uint16_t pattern_len = z_shell_strlen(pattern);
    a1b6:	4628      	mov	r0, r5
    a1b8:	f7ff fefb 	bl	9fb2 <z_shell_strlen>
    a1bc:	4605      	mov	r5, r0
	if (!pattern_addr) {
    a1be:	b1c4      	cbz	r4, a1f2 <z_shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
    a1c0:	42a7      	cmp	r7, r4
    a1c2:	d207      	bcs.n	a1d4 <z_shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
    a1c4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    a1c8:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
    a1ca:	bf02      	ittt	eq
    a1cc:	3501      	addeq	r5, #1
    a1ce:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
    a1d0:	f104 34ff 	addeq.w	r4, r4, #4294967295
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    a1d4:	4620      	mov	r0, r4
    a1d6:	f7ff feec 	bl	9fb2 <z_shell_strlen>
	*buff_len -= pattern_len;
    a1da:	8833      	ldrh	r3, [r6, #0]
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    a1dc:	1b42      	subs	r2, r0, r5
	*buff_len -= pattern_len;
    a1de:	1b5b      	subs	r3, r3, r5
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    a1e0:	3201      	adds	r2, #1
	*buff_len -= pattern_len;
    a1e2:	8033      	strh	r3, [r6, #0]
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
    a1e4:	1961      	adds	r1, r4, r5
    a1e6:	4620      	mov	r0, r4
    a1e8:	b292      	uxth	r2, r2
}
    a1ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
    a1ee:	f000 b9ea 	b.w	a5c6 <memmove>
}
    a1f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a1f4 <z_shell_find_cmd>:
 */
const struct shell_static_entry *z_shell_find_cmd(
					const struct shell_static_entry *parent,
					const char *cmd_str,
					struct shell_static_entry *dloc)
{
    a1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a1f8:	4688      	mov	r8, r1
    a1fa:	b086      	sub	sp, #24
    a1fc:	4617      	mov	r7, r2
	 * dynamic commands at the same time (current and subcommand) they
	 * will operate on the same memory region what can cause undefined
	 * behaviour.
	 * Hence we need a separate memory for each of them.
	 */
	if (parent) {
    a1fe:	4604      	mov	r4, r0
    a200:	b128      	cbz	r0, a20e <z_shell_find_cmd+0x1a>
		memcpy(&parent_cpy, parent, sizeof(struct shell_static_entry));
    a202:	4601      	mov	r1, r0
    a204:	2214      	movs	r2, #20
    a206:	a801      	add	r0, sp, #4
    a208:	f000 f9f4 	bl	a5f4 <memcpy>
		parent = &parent_cpy;
    a20c:	ac01      	add	r4, sp, #4
    a20e:	2600      	movs	r6, #0
	}

	while ((entry = z_shell_cmd_get(parent, idx++, dloc)) != NULL) {
    a210:	4631      	mov	r1, r6
    a212:	463a      	mov	r2, r7
    a214:	4620      	mov	r0, r4
    a216:	f7f9 fec7 	bl	3fa8 <z_shell_cmd_get>
    a21a:	3601      	adds	r6, #1
    a21c:	4605      	mov	r5, r0
    a21e:	b128      	cbz	r0, a22c <z_shell_find_cmd+0x38>
		if (strcmp(cmd_str, entry->syntax) == 0) {
    a220:	6829      	ldr	r1, [r5, #0]
    a222:	4640      	mov	r0, r8
    a224:	f000 f9a4 	bl	a570 <strcmp>
    a228:	2800      	cmp	r0, #0
    a22a:	d1f1      	bne.n	a210 <z_shell_find_cmd+0x1c>
			return entry;
		}
	}

	return NULL;
}
    a22c:	4628      	mov	r0, r5
    a22e:	b006      	add	sp, #24
    a230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a234 <z_shell_get_last_command>:
					size_t argc,
					const char *argv[],
					size_t *match_arg,
					struct shell_static_entry *dloc,
					bool only_static)
{
    a234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a238:	461c      	mov	r4, r3
    a23a:	f8dd 8020 	ldr.w	r8, [sp, #32]
    a23e:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	const struct shell_static_entry *prev_entry = NULL;

	*match_arg = Z_SHELL_CMD_ROOT_LVL;
    a242:	2300      	movs	r3, #0
{
    a244:	460f      	mov	r7, r1
    a246:	4616      	mov	r6, r2
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
    a248:	6023      	str	r3, [r4, #0]

	while (*match_arg < argc) {
    a24a:	6823      	ldr	r3, [r4, #0]
    a24c:	42bb      	cmp	r3, r7

		if (IS_ENABLED(CONFIG_SHELL_WILDCARD)) {
			/* ignore wildcard argument */
			if (z_shell_has_wildcard(argv[*match_arg])) {
				(*match_arg)++;
				continue;
    a24e:	4605      	mov	r5, r0
	while (*match_arg < argc) {
    a250:	d21b      	bcs.n	a28a <z_shell_get_last_command+0x56>
			if (z_shell_has_wildcard(argv[*match_arg])) {
    a252:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
    a256:	f000 f8b7 	bl	a3c8 <z_shell_has_wildcard>
    a25a:	6823      	ldr	r3, [r4, #0]
    a25c:	4682      	mov	sl, r0
    a25e:	b118      	cbz	r0, a268 <z_shell_get_last_command+0x34>
				(*match_arg)++;
    a260:	3301      	adds	r3, #1
    a262:	6023      	str	r3, [r4, #0]
				continue;
    a264:	4628      	mov	r0, r5
    a266:	e7f0      	b.n	a24a <z_shell_get_last_command+0x16>
			}
		}

		prev_entry = entry;
		entry = z_shell_find_cmd(entry, argv[*match_arg], dloc);
    a268:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    a26c:	4642      	mov	r2, r8
    a26e:	4628      	mov	r0, r5
    a270:	f7ff ffc0 	bl	a1f4 <z_shell_find_cmd>
		if (entry) {
    a274:	b148      	cbz	r0, a28a <z_shell_get_last_command+0x56>
			(*match_arg)++;
    a276:	6823      	ldr	r3, [r4, #0]
    a278:	1c5a      	adds	r2, r3, #1
    a27a:	6022      	str	r2, [r4, #0]
		} else {
			entry = prev_entry;
			break;
		}

		if (only_static && (entry == dloc)) {
    a27c:	f1b9 0f00 	cmp.w	r9, #0
    a280:	d0e3      	beq.n	a24a <z_shell_get_last_command+0x16>
    a282:	4580      	cmp	r8, r0
    a284:	d1e1      	bne.n	a24a <z_shell_get_last_command+0x16>
			(*match_arg)--;
    a286:	6023      	str	r3, [r4, #0]
			return NULL;
    a288:	4655      	mov	r5, sl
		}
	}

	return entry;
}
    a28a:	4628      	mov	r0, r5
    a28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000a290 <z_shell_spaces_trim>:




void z_shell_spaces_trim(char *str)
{
    a290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a294:	4606      	mov	r6, r0
	uint16_t len = z_shell_strlen(str);
    a296:	f7ff fe8c 	bl	9fb2 <z_shell_strlen>
    a29a:	4605      	mov	r5, r0
	uint16_t shift = 0U;

	if (!str) {
    a29c:	bb56      	cbnz	r6, a2f4 <z_shell_spaces_trim+0x64>

				break;
			}
		}
	}
}
    a29e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (shift > 0) {
    a2a2:	b14c      	cbz	r4, a2b8 <z_shell_spaces_trim+0x28>
						len - j + 1);
    a2a4:	1c6a      	adds	r2, r5, #1
    a2a6:	b29b      	uxth	r3, r3
					memmove(&str[i + 1],
    a2a8:	3701      	adds	r7, #1
    a2aa:	1ad2      	subs	r2, r2, r3
    a2ac:	19f0      	adds	r0, r6, r7
    a2ae:	f000 f98a 	bl	a5c6 <memmove>
					len -= shift;
    a2b2:	1b2d      	subs	r5, r5, r4
    a2b4:	b2ad      	uxth	r5, r5
					shift = 0U;
    a2b6:	464c      	mov	r4, r9
	for (uint16_t i = 0; i < len - 1; i++) {
    a2b8:	f108 0801 	add.w	r8, r8, #1
    a2bc:	fa1f f388 	uxth.w	r3, r8
    a2c0:	1e6a      	subs	r2, r5, #1
    a2c2:	4293      	cmp	r3, r2
    a2c4:	461f      	mov	r7, r3
    a2c6:	daea      	bge.n	a29e <z_shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
    a2c8:	5df0      	ldrb	r0, [r6, r7]
    a2ca:	f7ff fe68 	bl	9f9e <isspace>
    a2ce:	2800      	cmp	r0, #0
    a2d0:	d0f2      	beq.n	a2b8 <z_shell_spaces_trim+0x28>
			for (uint16_t j = i + 1; j < len; j++) {
    a2d2:	3301      	adds	r3, #1
    a2d4:	b29b      	uxth	r3, r3
    a2d6:	b29a      	uxth	r2, r3
    a2d8:	4295      	cmp	r5, r2
    a2da:	d9ed      	bls.n	a2b8 <z_shell_spaces_trim+0x28>
				if (isspace((int)str[j])) {
    a2dc:	5cf0      	ldrb	r0, [r6, r3]
    a2de:	18f1      	adds	r1, r6, r3
    a2e0:	f7ff fe5d 	bl	9f9e <isspace>
    a2e4:	1c5a      	adds	r2, r3, #1
    a2e6:	4681      	mov	r9, r0
    a2e8:	2800      	cmp	r0, #0
    a2ea:	d0da      	beq.n	a2a2 <z_shell_spaces_trim+0x12>
					shift++;
    a2ec:	3401      	adds	r4, #1
    a2ee:	b2a4      	uxth	r4, r4
    a2f0:	4613      	mov	r3, r2
    a2f2:	e7f0      	b.n	a2d6 <z_shell_spaces_trim+0x46>
    a2f4:	f04f 0800 	mov.w	r8, #0
	uint16_t shift = 0U;
    a2f8:	4644      	mov	r4, r8
    a2fa:	e7df      	b.n	a2bc <z_shell_spaces_trim+0x2c>

0000a2fc <z_shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void z_shell_cmd_trim(const struct shell *shell)
{
    a2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
    a2fe:	6884      	ldr	r4, [r0, #8]
	if (buff[0] == '\0') {
    a300:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
{
    a304:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
    a306:	b953      	cbnz	r3, a31e <z_shell_cmd_trim+0x22>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    a308:	68ab      	ldr	r3, [r5, #8]
    a30a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    a30c:	87da      	strh	r2, [r3, #62]	; 0x3e
}
    a30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
    a310:	3a01      	subs	r2, #1
    a312:	b292      	uxth	r2, r2
    a314:	87a2      	strh	r2, [r4, #60]	; 0x3c
		if (*buff_len == 0U) {
    a316:	b922      	cbnz	r2, a322 <z_shell_cmd_trim+0x26>
			buff[0] = '\0';
    a318:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			return;
    a31c:	e7f4      	b.n	a308 <z_shell_cmd_trim+0xc>
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
    a31e:	f104 0642 	add.w	r6, r4, #66	; 0x42
	while (isspace((int) buff[*buff_len - 1U])) {
    a322:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    a324:	18b3      	adds	r3, r6, r2
    a326:	f813 0c01 	ldrb.w	r0, [r3, #-1]
    a32a:	f7ff fe38 	bl	9f9e <isspace>
    a32e:	4603      	mov	r3, r0
    a330:	2800      	cmp	r0, #0
    a332:	d1ed      	bne.n	a310 <z_shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
    a334:	54b0      	strb	r0, [r6, r2]
	while (isspace((int) buff[i++])) {
    a336:	b29f      	uxth	r7, r3
    a338:	fa16 f183 	uxtah	r1, r6, r3
    a33c:	5df0      	ldrb	r0, [r6, r7]
    a33e:	f7ff fe2e 	bl	9f9e <isspace>
    a342:	3301      	adds	r3, #1
    a344:	2800      	cmp	r0, #0
    a346:	d1f6      	bne.n	a336 <z_shell_cmd_trim+0x3a>
	if (--i > 0) {
    a348:	2f00      	cmp	r7, #0
    a34a:	d0dd      	beq.n	a308 <z_shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
    a34c:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    a34e:	3301      	adds	r3, #1
    a350:	1bda      	subs	r2, r3, r7
    a352:	4630      	mov	r0, r6
    a354:	f000 f937 	bl	a5c6 <memmove>
		*buff_len = *buff_len - i;
    a358:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    a35a:	1bdb      	subs	r3, r3, r7
    a35c:	87a3      	strh	r3, [r4, #60]	; 0x3c
    a35e:	e7d3      	b.n	a308 <z_shell_cmd_trim+0xc>

0000a360 <shell_device_lookup>:

const struct device *shell_device_lookup(size_t idx,
				   const char *prefix)
{
    a360:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a364:	4607      	mov	r7, r0
	size_t match_idx = 0;
	const struct device *dev;
	size_t len = z_device_get_all_static(&dev);
    a366:	a801      	add	r0, sp, #4
{
    a368:	460c      	mov	r4, r1
	size_t len = z_device_get_all_static(&dev);
    a36a:	f7fd f8c3 	bl	74f4 <z_device_get_all_static>
	const struct device *dev_end = dev + len;
    a36e:	9b01      	ldr	r3, [sp, #4]
    a370:	2518      	movs	r5, #24
    a372:	fb05 3500 	mla	r5, r5, r0, r3
	size_t match_idx = 0;
    a376:	2600      	movs	r6, #0

	while (dev < dev_end) {
    a378:	9801      	ldr	r0, [sp, #4]
    a37a:	42a8      	cmp	r0, r5
    a37c:	d301      	bcc.n	a382 <shell_device_lookup+0x22>
			++match_idx;
		}
		++dev;
	}

	return NULL;
    a37e:	2000      	movs	r0, #0
    a380:	e00c      	b.n	a39c <shell_device_lookup+0x3c>
	return z_device_ready(dev) ? 0 : -ENODEV;
    a382:	f001 f82d 	bl	b3e0 <z_device_ready>
    a386:	b1c8      	cbz	r0, a3bc <shell_device_lookup+0x5c>
		    && (dev->name != NULL)
    a388:	9b01      	ldr	r3, [sp, #4]
    a38a:	6818      	ldr	r0, [r3, #0]
    a38c:	b1b0      	cbz	r0, a3bc <shell_device_lookup+0x5c>
		    && (strlen(dev->name) != 0)
    a38e:	f000 f8df 	bl	a550 <strlen>
    a392:	b198      	cbz	r0, a3bc <shell_device_lookup+0x5c>
		    && ((prefix == NULL)
    a394:	b92c      	cbnz	r4, a3a2 <shell_device_lookup+0x42>
			if (match_idx == idx) {
    a396:	42be      	cmp	r6, r7
    a398:	d114      	bne.n	a3c4 <shell_device_lookup+0x64>
				return dev;
    a39a:	9801      	ldr	r0, [sp, #4]
}
    a39c:	b002      	add	sp, #8
    a39e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			|| (strncmp(prefix, dev->name,
    a3a2:	9b01      	ldr	r3, [sp, #4]
    a3a4:	4620      	mov	r0, r4
    a3a6:	f8d3 8000 	ldr.w	r8, [r3]
    a3aa:	f000 f8d1 	bl	a550 <strlen>
    a3ae:	4641      	mov	r1, r8
    a3b0:	4602      	mov	r2, r0
    a3b2:	4620      	mov	r0, r4
    a3b4:	f000 f8e8 	bl	a588 <strncmp>
    a3b8:	2800      	cmp	r0, #0
    a3ba:	d0ec      	beq.n	a396 <shell_device_lookup+0x36>
		++dev;
    a3bc:	9b01      	ldr	r3, [sp, #4]
    a3be:	3318      	adds	r3, #24
    a3c0:	9301      	str	r3, [sp, #4]
    a3c2:	e7d9      	b.n	a378 <shell_device_lookup+0x18>
			++match_idx;
    a3c4:	3601      	adds	r6, #1
    a3c6:	e7f9      	b.n	a3bc <shell_device_lookup+0x5c>

0000a3c8 <z_shell_has_wildcard>:
{
    a3c8:	b510      	push	{r4, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
    a3ca:	4604      	mov	r4, r0
    a3cc:	b908      	cbnz	r0, a3d2 <z_shell_has_wildcard+0xa>
	return false;
    a3ce:	2000      	movs	r0, #0
}
    a3d0:	bd10      	pop	{r4, pc}
    a3d2:	f000 f8bd 	bl	a550 <strlen>
	for (size_t i = 0; i < str_len; i++) {
    a3d6:	2300      	movs	r3, #0
    a3d8:	b280      	uxth	r0, r0
    a3da:	4283      	cmp	r3, r0
    a3dc:	d2f7      	bcs.n	a3ce <z_shell_has_wildcard+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
    a3de:	5ce2      	ldrb	r2, [r4, r3]
    a3e0:	2a3f      	cmp	r2, #63	; 0x3f
    a3e2:	d003      	beq.n	a3ec <z_shell_has_wildcard+0x24>
    a3e4:	2a2a      	cmp	r2, #42	; 0x2a
    a3e6:	d001      	beq.n	a3ec <z_shell_has_wildcard+0x24>
	for (size_t i = 0; i < str_len; i++) {
    a3e8:	3301      	adds	r3, #1
    a3ea:	e7f6      	b.n	a3da <z_shell_has_wildcard+0x12>
			return true;
    a3ec:	2001      	movs	r0, #1
    a3ee:	e7ef      	b.n	a3d0 <z_shell_has_wildcard+0x8>

0000a3f0 <z_shell_wildcard_prepare>:
{
    a3f0:	b510      	push	{r4, lr}
    a3f2:	4604      	mov	r4, r0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    a3f4:	6880      	ldr	r0, [r0, #8]
    a3f6:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    a3fa:	2100      	movs	r1, #0
    a3fc:	f500 70f1 	add.w	r0, r0, #482	; 0x1e2
    a400:	f000 f903 	bl	a60a <memset>
	memcpy(shell->ctx->temp_buff,
    a404:	68a0      	ldr	r0, [r4, #8]
    a406:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    a408:	f100 0142 	add.w	r1, r0, #66	; 0x42
    a40c:	f500 70f1 	add.w	r0, r0, #482	; 0x1e2
    a410:	f000 f8f0 	bl	a5f4 <memcpy>
	z_shell_spaces_trim(shell->ctx->temp_buff);
    a414:	68a0      	ldr	r0, [r4, #8]
    a416:	f500 70f1 	add.w	r0, r0, #482	; 0x1e2
    a41a:	f7ff ff39 	bl	a290 <z_shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = z_shell_strlen(shell->ctx->temp_buff) + 1;
    a41e:	68a3      	ldr	r3, [r4, #8]
    a420:	f513 70f1 	adds.w	r0, r3, #482	; 0x1e2
    a424:	d007      	beq.n	a436 <z_shell_wildcard_prepare+0x46>
    a426:	f000 f893 	bl	a550 <strlen>
    a42a:	b283      	uxth	r3, r0
    a42c:	68a2      	ldr	r2, [r4, #8]
    a42e:	3301      	adds	r3, #1
    a430:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
}
    a434:	bd10      	pop	{r4, pc}
    a436:	4603      	mov	r3, r0
    a438:	e7f8      	b.n	a42c <z_shell_wildcard_prepare+0x3c>

0000a43a <z_shell_wildcard_finalize>:

void z_shell_wildcard_finalize(const struct shell *shell)
{
    a43a:	b510      	push	{r4, lr}
    a43c:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
    a43e:	6880      	ldr	r0, [r0, #8]
    a440:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
    a444:	f500 71f1 	add.w	r1, r0, #482	; 0x1e2
    a448:	3042      	adds	r0, #66	; 0x42
    a44a:	f000 f8d3 	bl	a5f4 <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
    a44e:	68a3      	ldr	r3, [r4, #8]
    a450:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    a454:	879a      	strh	r2, [r3, #60]	; 0x3c
}
    a456:	bd10      	pop	{r4, pc}

0000a458 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    a458:	4604      	mov	r4, r0
    a45a:	b508      	push	{r3, lr}
    a45c:	4608      	mov	r0, r1
    a45e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    a460:	461a      	mov	r2, r3
    a462:	47a0      	blx	r4
	return z_impl_z_current_get();
    a464:	f7fd fe08 	bl	8078 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    a468:	f7fa f8fc 	bl	4664 <z_impl_k_thread_abort>

0000a46c <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    a46c:	f000 bfda 	b.w	b424 <z_fatal_error>

0000a470 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    a470:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    a472:	6800      	ldr	r0, [r0, #0]
    a474:	f000 bfd6 	b.w	b424 <z_fatal_error>

0000a478 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    a478:	2100      	movs	r1, #0
    a47a:	2001      	movs	r0, #1
    a47c:	f7ff bff6 	b.w	a46c <z_arm_fatal_error>

0000a480 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    a480:	b508      	push	{r3, lr}
	handler();
    a482:	f7f9 fe69 	bl	4158 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    a486:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    a48a:	f7f9 bf61 	b.w	4350 <z_arm_exc_exit>

0000a48e <atoi>:

#include <stdlib.h>
#include <ctype.h>

int atoi(const char *s)
{
    a48e:	b530      	push	{r4, r5, lr}
	int n = 0;
	int neg = 0;

	while (isspace(*s)) {
    a490:	7802      	ldrb	r2, [r0, #0]
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    a492:	2a20      	cmp	r2, #32
    a494:	4603      	mov	r3, r0
    a496:	f100 0001 	add.w	r0, r0, #1
    a49a:	d0f9      	beq.n	a490 <atoi+0x2>
    a49c:	f1a2 0109 	sub.w	r1, r2, #9
    a4a0:	2904      	cmp	r1, #4
    a4a2:	d9f5      	bls.n	a490 <atoi+0x2>
		s++;
	}
	switch (*s) {
    a4a4:	2a2b      	cmp	r2, #43	; 0x2b
    a4a6:	d008      	beq.n	a4ba <atoi+0x2c>
	case '-':
		neg = 1;
		s++;
    a4a8:	2a2d      	cmp	r2, #45	; 0x2d
    a4aa:	bf0a      	itet	eq
    a4ac:	4603      	moveq	r3, r0
    a4ae:	2100      	movne	r1, #0
    a4b0:	2101      	moveq	r1, #1
    a4b2:	3b01      	subs	r3, #1
	switch (*s) {
    a4b4:	2000      	movs	r0, #0
		 */
		break;
	}
	/* Compute n as a negative number to avoid overflow on INT_MIN */
	while (isdigit(*s)) {
		n = 10*n - (*s++ - '0');
    a4b6:	250a      	movs	r5, #10
    a4b8:	e006      	b.n	a4c8 <atoi+0x3a>
		s++;
    a4ba:	4603      	mov	r3, r0
	int neg = 0;
    a4bc:	2100      	movs	r1, #0
    a4be:	e7f8      	b.n	a4b2 <atoi+0x24>
		n = 10*n - (*s++ - '0');
    a4c0:	f1c2 0230 	rsb	r2, r2, #48	; 0x30
    a4c4:	fb05 2000 	mla	r0, r5, r0, r2
	while (isdigit(*s)) {
    a4c8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    a4cc:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
    a4d0:	2c09      	cmp	r4, #9
    a4d2:	d9f5      	bls.n	a4c0 <atoi+0x32>
	}
	return neg ? n : -n;
    a4d4:	b901      	cbnz	r1, a4d8 <atoi+0x4a>
    a4d6:	4240      	negs	r0, r0
}
    a4d8:	bd30      	pop	{r4, r5, pc}

0000a4da <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    a4da:	684b      	ldr	r3, [r1, #4]
    a4dc:	2b01      	cmp	r3, #1
    a4de:	dd07      	ble.n	a4f0 <sprintf_out+0x16>
		*(p->ptr) = c;
    a4e0:	680b      	ldr	r3, [r1, #0]
    a4e2:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    a4e4:	680b      	ldr	r3, [r1, #0]
    a4e6:	3301      	adds	r3, #1
    a4e8:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    a4ea:	684b      	ldr	r3, [r1, #4]
    a4ec:	3b01      	subs	r3, #1
    a4ee:	604b      	str	r3, [r1, #4]
}
    a4f0:	2000      	movs	r0, #0
    a4f2:	4770      	bx	lr

0000a4f4 <_stdout_hook_default>:
}
    a4f4:	f04f 30ff 	mov.w	r0, #4294967295
    a4f8:	4770      	bx	lr

0000a4fa <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    a4fa:	3901      	subs	r1, #1
    a4fc:	4603      	mov	r3, r0
    a4fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    a502:	b90a      	cbnz	r2, a508 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    a504:	701a      	strb	r2, [r3, #0]

	return dest;
}
    a506:	4770      	bx	lr
		*d = *s;
    a508:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    a50c:	e7f7      	b.n	a4fe <strcpy+0x4>

0000a50e <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
    a50e:	b570      	push	{r4, r5, r6, lr}
    a510:	3901      	subs	r1, #1
    a512:	4605      	mov	r5, r0
    a514:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    a516:	b142      	cbz	r2, a52a <strncpy+0x1c>
    a518:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    a51c:	1e56      	subs	r6, r2, #1
    a51e:	b92b      	cbnz	r3, a52c <strncpy+0x1e>
    a520:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
    a522:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
    a526:	42a2      	cmp	r2, r4
    a528:	d1fb      	bne.n	a522 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
    a52a:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
    a52c:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
    a530:	4632      	mov	r2, r6
    a532:	e7ef      	b.n	a514 <strncpy+0x6>

0000a534 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
    a534:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
    a536:	4603      	mov	r3, r0
    a538:	781a      	ldrb	r2, [r3, #0]
    a53a:	428a      	cmp	r2, r1
    a53c:	4618      	mov	r0, r3
    a53e:	f103 0301 	add.w	r3, r3, #1
    a542:	d004      	beq.n	a54e <strchr+0x1a>
    a544:	2a00      	cmp	r2, #0
    a546:	d1f7      	bne.n	a538 <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
    a548:	2900      	cmp	r1, #0
    a54a:	bf18      	it	ne
    a54c:	2000      	movne	r0, #0
}
    a54e:	4770      	bx	lr

0000a550 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    a550:	4603      	mov	r3, r0
	size_t n = 0;
    a552:	2000      	movs	r0, #0

	while (*s != '\0') {
    a554:	5c1a      	ldrb	r2, [r3, r0]
    a556:	b902      	cbnz	r2, a55a <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    a558:	4770      	bx	lr
		n++;
    a55a:	3001      	adds	r0, #1
    a55c:	e7fa      	b.n	a554 <strlen+0x4>

0000a55e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    a55e:	4603      	mov	r3, r0
	size_t n = 0;
    a560:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    a562:	5c1a      	ldrb	r2, [r3, r0]
    a564:	b10a      	cbz	r2, a56a <strnlen+0xc>
    a566:	4288      	cmp	r0, r1
    a568:	d100      	bne.n	a56c <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    a56a:	4770      	bx	lr
		n++;
    a56c:	3001      	adds	r0, #1
    a56e:	e7f8      	b.n	a562 <strnlen+0x4>

0000a570 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    a570:	1e43      	subs	r3, r0, #1
    a572:	3901      	subs	r1, #1
    a574:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    a578:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    a57c:	4282      	cmp	r2, r0
    a57e:	d101      	bne.n	a584 <strcmp+0x14>
    a580:	2a00      	cmp	r2, #0
    a582:	d1f7      	bne.n	a574 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    a584:	1a10      	subs	r0, r2, r0
    a586:	4770      	bx	lr

0000a588 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
    a588:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    a58a:	2400      	movs	r4, #0
    a58c:	42a2      	cmp	r2, r4
    a58e:	d008      	beq.n	a5a2 <strncmp+0x1a>
    a590:	5d03      	ldrb	r3, [r0, r4]
    a592:	5d0d      	ldrb	r5, [r1, r4]
    a594:	42ab      	cmp	r3, r5
    a596:	d102      	bne.n	a59e <strncmp+0x16>
    a598:	3401      	adds	r4, #1
    a59a:	2b00      	cmp	r3, #0
    a59c:	d1f6      	bne.n	a58c <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
    a59e:	1b58      	subs	r0, r3, r5
    a5a0:	e000      	b.n	a5a4 <strncmp+0x1c>
    a5a2:	2000      	movs	r0, #0
}
    a5a4:	bd30      	pop	{r4, r5, pc}

0000a5a6 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    a5a6:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    a5a8:	b15a      	cbz	r2, a5c2 <memcmp+0x1c>
    a5aa:	3901      	subs	r1, #1
    a5ac:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    a5ae:	f810 2b01 	ldrb.w	r2, [r0], #1
    a5b2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    a5b6:	42a0      	cmp	r0, r4
    a5b8:	d001      	beq.n	a5be <memcmp+0x18>
    a5ba:	429a      	cmp	r2, r3
    a5bc:	d0f7      	beq.n	a5ae <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    a5be:	1ad0      	subs	r0, r2, r3
}
    a5c0:	bd10      	pop	{r4, pc}
		return 0;
    a5c2:	4610      	mov	r0, r2
    a5c4:	e7fc      	b.n	a5c0 <memcmp+0x1a>

0000a5c6 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    a5c6:	1a43      	subs	r3, r0, r1
    a5c8:	4293      	cmp	r3, r2
{
    a5ca:	b510      	push	{r4, lr}
    a5cc:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    a5d0:	d308      	bcc.n	a5e4 <memmove+0x1e>
    a5d2:	3901      	subs	r1, #1
	char *dest = d;
    a5d4:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    a5d6:	429a      	cmp	r2, r3
    a5d8:	d00b      	beq.n	a5f2 <memmove+0x2c>
			*dest = *src;
    a5da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    a5de:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    a5e2:	e7f8      	b.n	a5d6 <memmove+0x10>
    a5e4:	440a      	add	r2, r1
			dest[n] = src[n];
    a5e6:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    a5ea:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    a5ee:	428a      	cmp	r2, r1
    a5f0:	d1f9      	bne.n	a5e6 <memmove+0x20>
		}
	}

	return d;
}
    a5f2:	bd10      	pop	{r4, pc}

0000a5f4 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    a5f4:	b510      	push	{r4, lr}
    a5f6:	1e43      	subs	r3, r0, #1
    a5f8:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    a5fa:	4291      	cmp	r1, r2
    a5fc:	d100      	bne.n	a600 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    a5fe:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    a600:	f811 4b01 	ldrb.w	r4, [r1], #1
    a604:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    a608:	e7f7      	b.n	a5fa <memcpy+0x6>

0000a60a <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    a60a:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    a60c:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    a60e:	4603      	mov	r3, r0
	while (n > 0) {
    a610:	4293      	cmp	r3, r2
    a612:	d100      	bne.n	a616 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    a614:	4770      	bx	lr
		*(d_byte++) = c_byte;
    a616:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    a61a:	e7f9      	b.n	a610 <memset+0x6>

0000a61c <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
    a61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
    a620:	f891 8000 	ldrb.w	r8, [r1]
{
    a624:	4605      	mov	r5, r0
	if (c != 0) {
    a626:	f1b8 0f00 	cmp.w	r8, #0
    a62a:	d010      	beq.n	a64e <strstr+0x32>
	c = *find++;
    a62c:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
    a62e:	4620      	mov	r0, r4
    a630:	f7ff ff8e 	bl	a550 <strlen>
    a634:	4607      	mov	r7, r0
		do {
			do {
				sc = *s++;
    a636:	462e      	mov	r6, r5
    a638:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
    a63c:	b163      	cbz	r3, a658 <strstr+0x3c>
					return NULL;
				}
			} while (sc != c);
    a63e:	4598      	cmp	r8, r3
    a640:	d108      	bne.n	a654 <strstr+0x38>
		} while (strncmp(s, find, len) != 0);
    a642:	463a      	mov	r2, r7
    a644:	4621      	mov	r1, r4
    a646:	4630      	mov	r0, r6
    a648:	f7ff ff9e 	bl	a588 <strncmp>
    a64c:	b910      	cbnz	r0, a654 <strstr+0x38>
	s--;
	}
	return (char *)s;
}
    a64e:	4628      	mov	r0, r5
    a650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    a654:	4635      	mov	r5, r6
    a656:	e7ee      	b.n	a636 <strstr+0x1a>
					return NULL;
    a658:	461d      	mov	r5, r3
    a65a:	e7f8      	b.n	a64e <strstr+0x32>

0000a65c <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
    a65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a660:	4684      	mov	ip, r0
    a662:	4688      	mov	r8, r1
	register const char *s = nptr;
    a664:	4601      	mov	r1, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
    a666:	460c      	mov	r4, r1
    a668:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    a66c:	2b20      	cmp	r3, #32
    a66e:	d033      	beq.n	a6d8 <strtol+0x7c>
    a670:	f1a3 0009 	sub.w	r0, r3, #9
    a674:	2804      	cmp	r0, #4
    a676:	d92f      	bls.n	a6d8 <strtol+0x7c>
	} while (isspace(c));
	if (c == '-') {
    a678:	2b2d      	cmp	r3, #45	; 0x2d
    a67a:	d12f      	bne.n	a6dc <strtol+0x80>
		neg = 1;
		c = *s++;
    a67c:	784b      	ldrb	r3, [r1, #1]
    a67e:	1c8c      	adds	r4, r1, #2
		neg = 1;
    a680:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
    a682:	2a00      	cmp	r2, #0
    a684:	d05c      	beq.n	a740 <strtol+0xe4>
    a686:	2a10      	cmp	r2, #16
    a688:	d109      	bne.n	a69e <strtol+0x42>
    a68a:	2b30      	cmp	r3, #48	; 0x30
    a68c:	d107      	bne.n	a69e <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
    a68e:	7823      	ldrb	r3, [r4, #0]
    a690:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    a694:	2b58      	cmp	r3, #88	; 0x58
    a696:	d14e      	bne.n	a736 <strtol+0xda>
		c = s[1];
    a698:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
    a69a:	2210      	movs	r2, #16
		s += 2;
    a69c:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
    a69e:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
    a6a2:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
    a6a4:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
    a6a6:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
    a6aa:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
    a6ac:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    a6b0:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
    a6b4:	2d09      	cmp	r5, #9
    a6b6:	d817      	bhi.n	a6e8 <strtol+0x8c>
			c -= '0';
    a6b8:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
    a6ba:	429a      	cmp	r2, r3
    a6bc:	dd24      	ble.n	a708 <strtol+0xac>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
    a6be:	1c75      	adds	r5, r6, #1
    a6c0:	d007      	beq.n	a6d2 <strtol+0x76>
    a6c2:	4570      	cmp	r0, lr
    a6c4:	d81d      	bhi.n	a702 <strtol+0xa6>
    a6c6:	d101      	bne.n	a6cc <strtol+0x70>
    a6c8:	454b      	cmp	r3, r9
    a6ca:	dc1a      	bgt.n	a702 <strtol+0xa6>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
    a6cc:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
    a6d0:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
    a6d2:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
    a6d6:	e7eb      	b.n	a6b0 <strtol+0x54>
{
    a6d8:	4621      	mov	r1, r4
    a6da:	e7c4      	b.n	a666 <strtol+0xa>
	} else if (c == '+') {
    a6dc:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
    a6de:	bf04      	itt	eq
    a6e0:	784b      	ldrbeq	r3, [r1, #1]
    a6e2:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
    a6e4:	2100      	movs	r1, #0
    a6e6:	e7cc      	b.n	a682 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    a6e8:	f043 0520 	orr.w	r5, r3, #32
    a6ec:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
    a6ee:	2d19      	cmp	r5, #25
    a6f0:	d80a      	bhi.n	a708 <strtol+0xac>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    a6f2:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
    a6f6:	2d1a      	cmp	r5, #26
    a6f8:	bf34      	ite	cc
    a6fa:	2537      	movcc	r5, #55	; 0x37
    a6fc:	2557      	movcs	r5, #87	; 0x57
    a6fe:	1b5b      	subs	r3, r3, r5
    a700:	e7db      	b.n	a6ba <strtol+0x5e>
			any = -1;
    a702:	f04f 36ff 	mov.w	r6, #4294967295
    a706:	e7e4      	b.n	a6d2 <strtol+0x76>
		}
	}

	if (any < 0) {
    a708:	1c73      	adds	r3, r6, #1
    a70a:	d109      	bne.n	a720 <strtol+0xc4>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    a70c:	f7fc ff2c 	bl	7568 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
    a710:	2322      	movs	r3, #34	; 0x22
    a712:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
    a714:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
    a716:	f1b8 0f00 	cmp.w	r8, #0
    a71a:	d107      	bne.n	a72c <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
    a71c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
    a720:	b101      	cbz	r1, a724 <strtol+0xc8>
		acc = -acc;
    a722:	4240      	negs	r0, r0
	if (endptr != NULL) {
    a724:	f1b8 0f00 	cmp.w	r8, #0
    a728:	d0f8      	beq.n	a71c <strtol+0xc0>
		*endptr = (char *)(any ? s - 1 : nptr);
    a72a:	b10e      	cbz	r6, a730 <strtol+0xd4>
    a72c:	f104 3cff 	add.w	ip, r4, #4294967295
    a730:	f8c8 c000 	str.w	ip, [r8]
	return acc;
    a734:	e7f2      	b.n	a71c <strtol+0xc0>
	if (base == 0) {
    a736:	2330      	movs	r3, #48	; 0x30
    a738:	2a00      	cmp	r2, #0
    a73a:	d1b0      	bne.n	a69e <strtol+0x42>
		base = c == '0' ? 8 : 10;
    a73c:	2208      	movs	r2, #8
    a73e:	e7ae      	b.n	a69e <strtol+0x42>
	if ((base == 0 || base == 16) &&
    a740:	2b30      	cmp	r3, #48	; 0x30
    a742:	d0a4      	beq.n	a68e <strtol+0x32>
		base = c == '0' ? 8 : 10;
    a744:	220a      	movs	r2, #10
    a746:	e7aa      	b.n	a69e <strtol+0x42>

0000a748 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
    a748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a74c:	4684      	mov	ip, r0
    a74e:	460f      	mov	r7, r1
	register const char *s = nptr;
    a750:	4605      	mov	r5, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
    a752:	462c      	mov	r4, r5
    a754:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    a758:	2b20      	cmp	r3, #32
    a75a:	d035      	beq.n	a7c8 <strtoul+0x80>
    a75c:	f1a3 0109 	sub.w	r1, r3, #9
    a760:	2904      	cmp	r1, #4
    a762:	d931      	bls.n	a7c8 <strtoul+0x80>
	} while (isspace(c));
	if (c == '-') {
    a764:	2b2d      	cmp	r3, #45	; 0x2d
    a766:	d131      	bne.n	a7cc <strtoul+0x84>
		neg = 1;
		c = *s++;
    a768:	786b      	ldrb	r3, [r5, #1]
    a76a:	1cac      	adds	r4, r5, #2
		neg = 1;
    a76c:	f04f 0e01 	mov.w	lr, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
    a770:	2a00      	cmp	r2, #0
    a772:	d05e      	beq.n	a832 <strtoul+0xea>
    a774:	2a10      	cmp	r2, #16
    a776:	d109      	bne.n	a78c <strtoul+0x44>
    a778:	2b30      	cmp	r3, #48	; 0x30
    a77a:	d107      	bne.n	a78c <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
    a77c:	7823      	ldrb	r3, [r4, #0]
    a77e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    a782:	2b58      	cmp	r3, #88	; 0x58
    a784:	d150      	bne.n	a828 <strtoul+0xe0>
		c = s[1];
    a786:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
    a788:	2210      	movs	r2, #16
		s += 2;
    a78a:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
    a78c:	f04f 31ff 	mov.w	r1, #4294967295
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
    a790:	2600      	movs	r6, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
    a792:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
    a796:	fb02 f801 	mul.w	r8, r2, r1
    a79a:	ea6f 0808 	mvn.w	r8, r8
	for (acc = 0, any = 0;; c = *s++) {
    a79e:	4630      	mov	r0, r6
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    a7a0:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
    a7a4:	2d09      	cmp	r5, #9
    a7a6:	d818      	bhi.n	a7da <strtoul+0x92>
			c -= '0';
    a7a8:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
    a7aa:	429a      	cmp	r2, r3
    a7ac:	dd25      	ble.n	a7fa <strtoul+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
    a7ae:	2e00      	cmp	r6, #0
    a7b0:	db20      	blt.n	a7f4 <strtoul+0xac>
    a7b2:	4288      	cmp	r0, r1
    a7b4:	d81e      	bhi.n	a7f4 <strtoul+0xac>
    a7b6:	d101      	bne.n	a7bc <strtoul+0x74>
    a7b8:	4543      	cmp	r3, r8
    a7ba:	dc1b      	bgt.n	a7f4 <strtoul+0xac>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
    a7bc:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
    a7c0:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
    a7c2:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
    a7c6:	e7eb      	b.n	a7a0 <strtoul+0x58>
{
    a7c8:	4625      	mov	r5, r4
    a7ca:	e7c2      	b.n	a752 <strtoul+0xa>
	} else if (c == '+') {
    a7cc:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
    a7ce:	bf04      	itt	eq
    a7d0:	786b      	ldrbeq	r3, [r5, #1]
    a7d2:	1cac      	addeq	r4, r5, #2
	register int neg = 0, any, cutlim;
    a7d4:	f04f 0e00 	mov.w	lr, #0
    a7d8:	e7ca      	b.n	a770 <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    a7da:	f043 0520 	orr.w	r5, r3, #32
    a7de:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
    a7e0:	2d19      	cmp	r5, #25
    a7e2:	d80a      	bhi.n	a7fa <strtoul+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    a7e4:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
    a7e8:	2d1a      	cmp	r5, #26
    a7ea:	bf34      	ite	cc
    a7ec:	2537      	movcc	r5, #55	; 0x37
    a7ee:	2557      	movcs	r5, #87	; 0x57
    a7f0:	1b5b      	subs	r3, r3, r5
    a7f2:	e7da      	b.n	a7aa <strtoul+0x62>
			any = -1;
    a7f4:	f04f 36ff 	mov.w	r6, #4294967295
    a7f8:	e7e3      	b.n	a7c2 <strtoul+0x7a>
		}
	}
	if (any < 0) {
    a7fa:	2e00      	cmp	r6, #0
    a7fc:	da08      	bge.n	a810 <strtoul+0xc8>
    a7fe:	f7fc feb3 	bl	7568 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
    a802:	2322      	movs	r3, #34	; 0x22
    a804:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
    a806:	f04f 30ff 	mov.w	r0, #4294967295
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
    a80a:	b947      	cbnz	r7, a81e <strtoul+0xd6>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
    a80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
    a810:	f1be 0f00 	cmp.w	lr, #0
    a814:	d000      	beq.n	a818 <strtoul+0xd0>
		acc = -acc;
    a816:	4240      	negs	r0, r0
	if (endptr != NULL) {
    a818:	2f00      	cmp	r7, #0
    a81a:	d0f7      	beq.n	a80c <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
    a81c:	b10e      	cbz	r6, a822 <strtoul+0xda>
    a81e:	f104 3cff 	add.w	ip, r4, #4294967295
    a822:	f8c7 c000 	str.w	ip, [r7]
	return acc;
    a826:	e7f1      	b.n	a80c <strtoul+0xc4>
	if (base == 0) {
    a828:	2330      	movs	r3, #48	; 0x30
    a82a:	2a00      	cmp	r2, #0
    a82c:	d1ae      	bne.n	a78c <strtoul+0x44>
		base = c == '0' ? 8 : 10;
    a82e:	2208      	movs	r2, #8
    a830:	e7ac      	b.n	a78c <strtoul+0x44>
	if ((base == 0 || base == 16) &&
    a832:	2b30      	cmp	r3, #48	; 0x30
    a834:	d0a2      	beq.n	a77c <strtoul+0x34>
		base = c == '0' ? 8 : 10;
    a836:	220a      	movs	r2, #10
    a838:	e7a8      	b.n	a78c <strtoul+0x44>

0000a83a <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    a83a:	b084      	sub	sp, #16
    a83c:	ab04      	add	r3, sp, #16
    a83e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    a842:	f89d 3004 	ldrb.w	r3, [sp, #4]
    a846:	2b06      	cmp	r3, #6
    a848:	d108      	bne.n	a85c <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    a84a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a84e:	2201      	movs	r2, #1
    a850:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    a854:	f3bf 8f4f 	dsb	sy
        __WFE();
    a858:	bf20      	wfe
    while (true)
    a85a:	e7fd      	b.n	a858 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    a85c:	b004      	add	sp, #16
    a85e:	4770      	bx	lr

0000a860 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    a860:	b084      	sub	sp, #16
    a862:	ab04      	add	r3, sp, #16
    a864:	e903 0007 	stmdb	r3, {r0, r1, r2}
    a868:	2300      	movs	r3, #0
    a86a:	f383 8811 	msr	BASEPRI, r3
    a86e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    a872:	b004      	add	sp, #16
    a874:	4770      	bx	lr

0000a876 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    a876:	6902      	ldr	r2, [r0, #16]
    a878:	b2cb      	uxtb	r3, r1
    a87a:	210c      	movs	r1, #12
    a87c:	fb03 2101 	mla	r1, r3, r1, r2
    a880:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
    a882:	f000 0007 	and.w	r0, r0, #7
    a886:	4770      	bx	lr

0000a888 <set_off_state>:
	__asm__ volatile(
    a888:	f04f 0320 	mov.w	r3, #32
    a88c:	f3ef 8211 	mrs	r2, BASEPRI
    a890:	f383 8812 	msr	BASEPRI_MAX, r3
    a894:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    a898:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    a89a:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    a89e:	d001      	beq.n	a8a4 <set_off_state+0x1c>
    a8a0:	428b      	cmp	r3, r1
    a8a2:	d107      	bne.n	a8b4 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    a8a4:	2301      	movs	r3, #1
    a8a6:	6003      	str	r3, [r0, #0]
	int err = 0;
    a8a8:	2000      	movs	r0, #0
	__asm__ volatile(
    a8aa:	f382 8811 	msr	BASEPRI, r2
    a8ae:	f3bf 8f6f 	isb	sy
}
    a8b2:	4770      	bx	lr
		err = -EPERM;
    a8b4:	f04f 30ff 	mov.w	r0, #4294967295
    a8b8:	e7f7      	b.n	a8aa <set_off_state+0x22>

0000a8ba <set_starting_state>:
{
    a8ba:	b510      	push	{r4, lr}
	__asm__ volatile(
    a8bc:	f04f 0320 	mov.w	r3, #32
    a8c0:	f3ef 8211 	mrs	r2, BASEPRI
    a8c4:	f383 8812 	msr	BASEPRI_MAX, r3
    a8c8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    a8cc:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    a8ce:	f003 0407 	and.w	r4, r3, #7
    a8d2:	2c01      	cmp	r4, #1
    a8d4:	d106      	bne.n	a8e4 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    a8d6:	6001      	str	r1, [r0, #0]
	int err = 0;
    a8d8:	2000      	movs	r0, #0
	__asm__ volatile(
    a8da:	f382 8811 	msr	BASEPRI, r2
    a8de:	f3bf 8f6f 	isb	sy
}
    a8e2:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    a8e4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    a8e8:	428b      	cmp	r3, r1
		err = -EALREADY;
    a8ea:	bf14      	ite	ne
    a8ec:	f04f 30ff 	movne.w	r0, #4294967295
    a8f0:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    a8f4:	e7f1      	b.n	a8da <set_starting_state+0x20>

0000a8f6 <set_on_state>:
	__asm__ volatile(
    a8f6:	f04f 0320 	mov.w	r3, #32
    a8fa:	f3ef 8211 	mrs	r2, BASEPRI
    a8fe:	f383 8812 	msr	BASEPRI_MAX, r3
    a902:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    a906:	6803      	ldr	r3, [r0, #0]
    a908:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a90c:	f043 0302 	orr.w	r3, r3, #2
    a910:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    a912:	f382 8811 	msr	BASEPRI, r2
    a916:	f3bf 8f6f 	isb	sy
}
    a91a:	4770      	bx	lr

0000a91c <onoff_started_callback>:
	return &data->mgr[type];
    a91c:	6900      	ldr	r0, [r0, #16]
{
    a91e:	b410      	push	{r4}
	return &data->mgr[type];
    a920:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    a922:	241c      	movs	r4, #28
    a924:	fb03 0004 	mla	r0, r3, r4, r0
    a928:	2100      	movs	r1, #0
}
    a92a:	bc10      	pop	{r4}
	notify(mgr, 0);
    a92c:	4710      	bx	r2

0000a92e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    a92e:	2000      	movs	r0, #0
    a930:	f7fb bcce 	b.w	62d0 <nrfx_clock_start>

0000a934 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    a934:	2000      	movs	r0, #0
    a936:	f7fb bcfd 	b.w	6334 <nrfx_clock_stop>

0000a93a <blocking_start_callback>:
{
    a93a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    a93c:	f7fd bc1a 	b.w	8174 <z_impl_k_sem_give>

0000a940 <api_stop>:
{
    a940:	b538      	push	{r3, r4, r5, lr}
    a942:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
    a944:	230c      	movs	r3, #12
{
    a946:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    a948:	4363      	muls	r3, r4
    a94a:	6900      	ldr	r0, [r0, #16]
    a94c:	3340      	adds	r3, #64	; 0x40
    a94e:	2180      	movs	r1, #128	; 0x80
    a950:	4418      	add	r0, r3
    a952:	f7ff ff99 	bl	a888 <set_off_state>
	if (err < 0) {
    a956:	2800      	cmp	r0, #0
    a958:	db05      	blt.n	a966 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    a95a:	6869      	ldr	r1, [r5, #4]
    a95c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    a960:	6863      	ldr	r3, [r4, #4]
    a962:	4798      	blx	r3
	return 0;
    a964:	2000      	movs	r0, #0
}
    a966:	bd38      	pop	{r3, r4, r5, pc}

0000a968 <api_start>:
{
    a968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a96c:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    a96e:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    a970:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    a972:	436f      	muls	r7, r5
{
    a974:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    a976:	f107 0040 	add.w	r0, r7, #64	; 0x40
    a97a:	2180      	movs	r1, #128	; 0x80
    a97c:	4420      	add	r0, r4
{
    a97e:	4690      	mov	r8, r2
    a980:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    a982:	f7ff ff9a 	bl	a8ba <set_starting_state>
	if (err < 0) {
    a986:	2800      	cmp	r0, #0
    a988:	db07      	blt.n	a99a <api_start+0x32>
	subdata->cb = cb;
    a98a:	443c      	add	r4, r7
	subdata->user_data = user_data;
    a98c:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    a990:	6873      	ldr	r3, [r6, #4]
    a992:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    a996:	4798      	blx	r3
	return 0;
    a998:	2000      	movs	r0, #0
}
    a99a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000a99e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a99e:	6843      	ldr	r3, [r0, #4]
    a9a0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    a9a2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    a9a6:	600b      	str	r3, [r1, #0]
}
    a9a8:	2000      	movs	r0, #0
    a9aa:	4770      	bx	lr

0000a9ac <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a9ac:	6843      	ldr	r3, [r0, #4]
    a9ae:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    a9b0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    a9b4:	4042      	eors	r2, r0
    a9b6:	400a      	ands	r2, r1
    a9b8:	4042      	eors	r2, r0
    p_reg->OUT = value;
    a9ba:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    a9be:	2000      	movs	r0, #0
    a9c0:	4770      	bx	lr

0000a9c2 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a9c2:	6843      	ldr	r3, [r0, #4]
    a9c4:	685b      	ldr	r3, [r3, #4]
}
    a9c6:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    a9c8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    a9cc:	4770      	bx	lr

0000a9ce <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a9ce:	6843      	ldr	r3, [r0, #4]
    a9d0:	685b      	ldr	r3, [r3, #4]
}
    a9d2:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    a9d4:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    a9d8:	4770      	bx	lr

0000a9da <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a9da:	6843      	ldr	r3, [r0, #4]
    a9dc:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    a9de:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    a9e2:	404b      	eors	r3, r1
    p_reg->OUT = value;
    a9e4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    a9e8:	2000      	movs	r0, #0
    a9ea:	4770      	bx	lr

0000a9ec <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    a9ec:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
    a9ee:	6858      	ldr	r0, [r3, #4]
{
    a9f0:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    a9f2:	b158      	cbz	r0, aa0c <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a9f4:	2400      	movs	r4, #0
    a9f6:	4281      	cmp	r1, r0
    a9f8:	d113      	bne.n	aa22 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    a9fa:	6808      	ldr	r0, [r1, #0]
    a9fc:	b95c      	cbnz	r4, aa16 <gpio_nrfx_manage_callback+0x2a>
    a9fe:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    aa00:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    aa02:	42a1      	cmp	r1, r4
    aa04:	d100      	bne.n	aa08 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    aa06:	6098      	str	r0, [r3, #8]
	parent->next = child;
    aa08:	2000      	movs	r0, #0
    aa0a:	6008      	str	r0, [r1, #0]
	if (set) {
    aa0c:	b972      	cbnz	r2, aa2c <gpio_nrfx_manage_callback+0x40>
	return 0;
    aa0e:	2000      	movs	r0, #0
}
    aa10:	bd30      	pop	{r4, r5, pc}
    aa12:	4628      	mov	r0, r5
    aa14:	e7ef      	b.n	a9f6 <gpio_nrfx_manage_callback+0xa>
    aa16:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    aa18:	6898      	ldr	r0, [r3, #8]
    aa1a:	4281      	cmp	r1, r0
	list->tail = node;
    aa1c:	bf08      	it	eq
    aa1e:	609c      	streq	r4, [r3, #8]
}
    aa20:	e7f2      	b.n	aa08 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    aa22:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    aa24:	4604      	mov	r4, r0
    aa26:	2d00      	cmp	r5, #0
    aa28:	d1f3      	bne.n	aa12 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    aa2a:	b13a      	cbz	r2, aa3c <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    aa2c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    aa2e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    aa30:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    aa32:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    aa34:	2800      	cmp	r0, #0
    aa36:	d1ea      	bne.n	aa0e <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    aa38:	6099      	str	r1, [r3, #8]
}
    aa3a:	e7e9      	b.n	aa10 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    aa3c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    aa40:	e7e6      	b.n	aa10 <gpio_nrfx_manage_callback+0x24>

0000aa42 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    aa42:	2301      	movs	r3, #1
    aa44:	fa03 f101 	lsl.w	r1, r3, r1
    aa48:	6903      	ldr	r3, [r0, #16]
    aa4a:	681b      	ldr	r3, [r3, #0]
    aa4c:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    aa4e:	bf1c      	itt	ne
    aa50:	fab2 f282 	clzne	r2, r2
    aa54:	0952      	lsrne	r2, r2, #5
	if (value != 0)	{
    aa56:	b112      	cbz	r2, aa5e <gpio_pin_set+0x1c>
	return api->port_set_bits_raw(port, pins);
    aa58:	6883      	ldr	r3, [r0, #8]
    aa5a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    aa5c:	4718      	bx	r3
    aa5e:	6883      	ldr	r3, [r0, #8]
    aa60:	691b      	ldr	r3, [r3, #16]
    aa62:	e7fb      	b.n	aa5c <gpio_pin_set+0x1a>

0000aa64 <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
    aa64:	07ca      	lsls	r2, r1, #31
	nrfx_twim_t const *inst = &(get_dev_config(dev)->twim);
    aa66:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
    aa68:	d405      	bmi.n	aa76 <i2c_nrfx_twim_configure+0x12>
	switch (I2C_SPEED_GET(dev_config)) {
    aa6a:	f3c1 0242 	ubfx	r2, r1, #1, #3
    aa6e:	2a01      	cmp	r2, #1
    aa70:	d004      	beq.n	aa7c <i2c_nrfx_twim_configure+0x18>
    aa72:	2a02      	cmp	r2, #2
    aa74:	d00b      	beq.n	aa8e <i2c_nrfx_twim_configure+0x2a>
		return -EINVAL;
    aa76:	f06f 0015 	mvn.w	r0, #21
}
    aa7a:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
    aa7c:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    aa7e:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    aa82:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
    aa86:	6903      	ldr	r3, [r0, #16]
	return 0;
    aa88:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
    aa8a:	6359      	str	r1, [r3, #52]	; 0x34
	return 0;
    aa8c:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
    aa8e:	681b      	ldr	r3, [r3, #0]
    aa90:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
    aa94:	e7f5      	b.n	aa82 <i2c_nrfx_twim_configure+0x1e>

0000aa96 <bme280_reg_read.isra.0>:
static inline int bme280_reg_read(const struct device *dev,
    aa96:	b410      	push	{r4}
	return cfg->bus_io->read(&cfg->bus, start, buf, size);
    aa98:	6884      	ldr	r4, [r0, #8]
    aa9a:	6864      	ldr	r4, [r4, #4]
    aa9c:	46a4      	mov	ip, r4
}
    aa9e:	bc10      	pop	{r4}
	return cfg->bus_io->read(&cfg->bus, start, buf, size);
    aaa0:	4760      	bx	ip

0000aaa2 <bme280_reg_write.isra.0>:
	return cfg->bus_io->write(&cfg->bus, reg, val);
    aaa2:	6883      	ldr	r3, [r0, #8]
    aaa4:	689b      	ldr	r3, [r3, #8]
    aaa6:	4718      	bx	r3

0000aaa8 <bme280_wait_until_ready>:
{
    aaa8:	b513      	push	{r0, r1, r4, lr}
	uint8_t status = 0;
    aaaa:	2300      	movs	r3, #0
{
    aaac:	4604      	mov	r4, r0
	uint8_t status = 0;
    aaae:	f88d 3007 	strb.w	r3, [sp, #7]
	return z_impl_k_sleep(timeout);
    aab2:	2100      	movs	r1, #0
    aab4:	2063      	movs	r0, #99	; 0x63
    aab6:	f7fd fac5 	bl	8044 <z_impl_k_sleep>
		ret = bme280_reg_read(dev, BME280_REG_STATUS, &status, 1);
    aaba:	6860      	ldr	r0, [r4, #4]
    aabc:	2301      	movs	r3, #1
    aabe:	f10d 0207 	add.w	r2, sp, #7
    aac2:	21f3      	movs	r1, #243	; 0xf3
    aac4:	f7ff ffe7 	bl	aa96 <bme280_reg_read.isra.0>
		if (ret < 0) {
    aac8:	2800      	cmp	r0, #0
    aaca:	db04      	blt.n	aad6 <bme280_wait_until_ready+0x2e>
	} while (status & (BME280_STATUS_MEASURING | BME280_STATUS_IM_UPDATE));
    aacc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aad0:	f013 0009 	ands.w	r0, r3, #9
    aad4:	d1ed      	bne.n	aab2 <bme280_wait_until_ready+0xa>
}
    aad6:	b002      	add	sp, #8
    aad8:	bd10      	pop	{r4, pc}

0000aada <bme280_sample_fetch>:
{
    aada:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aade:	b085      	sub	sp, #20
	struct bme280_data *data = to_data(dev);
    aae0:	6905      	ldr	r5, [r0, #16]
{
    aae2:	4604      	mov	r4, r0
	ret = bme280_wait_until_ready(dev);
    aae4:	f7ff ffe0 	bl	aaa8 <bme280_wait_until_ready>
	if (ret < 0) {
    aae8:	2800      	cmp	r0, #0
    aaea:	f2c0 8137 	blt.w	ad5c <bme280_sample_fetch+0x282>
	if (data->chip_id == BME280_CHIP_ID) {
    aaee:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
	ret = bme280_reg_read(dev, BME280_REG_PRESS_MSB, buf, size);
    aaf2:	6860      	ldr	r0, [r4, #4]
	if (data->chip_id == BME280_CHIP_ID) {
    aaf4:	2b60      	cmp	r3, #96	; 0x60
	ret = bme280_reg_read(dev, BME280_REG_PRESS_MSB, buf, size);
    aaf6:	bf14      	ite	ne
    aaf8:	2306      	movne	r3, #6
    aafa:	2308      	moveq	r3, #8
    aafc:	aa02      	add	r2, sp, #8
    aafe:	21f7      	movs	r1, #247	; 0xf7
    ab00:	f7ff ffc9 	bl	aa96 <bme280_reg_read.isra.0>
	if (ret < 0) {
    ab04:	2800      	cmp	r0, #0
    ab06:	f2c0 8129 	blt.w	ad5c <bme280_sample_fetch+0x282>
	adc_press = (buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4);
    ab0a:	f89d 3008 	ldrb.w	r3, [sp, #8]
	adc_temp = (buf[3] << 12) | (buf[4] << 4) | (buf[5] >> 4);
    ab0e:	f89d 200b 	ldrb.w	r2, [sp, #11]
	adc_press = (buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4);
    ab12:	f89d 9009 	ldrb.w	r9, [sp, #9]
    ab16:	f89d 800a 	ldrb.w	r8, [sp, #10]
    ab1a:	461e      	mov	r6, r3
	adc_temp = (buf[3] << 12) | (buf[4] << 4) | (buf[5] >> 4);
    ab1c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    ab20:	011b      	lsls	r3, r3, #4
    ab22:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
    ab26:	f89d 200d 	ldrb.w	r2, [sp, #13]
    ab2a:	ea43 1412 	orr.w	r4, r3, r2, lsr #4
	var1 = (((adc_temp >> 3) - ((int32_t)data->dig_t1 << 1)) *
    ab2e:	882a      	ldrh	r2, [r5, #0]
	var2 = (((((adc_temp >> 4) - ((int32_t)data->dig_t1)) *
    ab30:	ebc2 1313 	rsb	r3, r2, r3, lsr #4
	var1 = (((adc_temp >> 3) - ((int32_t)data->dig_t1 << 1)) *
    ab34:	0052      	lsls	r2, r2, #1
    ab36:	ebc2 02d4 	rsb	r2, r2, r4, lsr #3
		((int32_t)data->dig_t2)) >> 11;
    ab3a:	f9b5 4002 	ldrsh.w	r4, [r5, #2]
	var2 = (((((adc_temp >> 4) - ((int32_t)data->dig_t1)) *
    ab3e:	435b      	muls	r3, r3
	var1 = (((adc_temp >> 3) - ((int32_t)data->dig_t1 << 1)) *
    ab40:	4362      	muls	r2, r4
		((int32_t)data->dig_t3)) >> 14;
    ab42:	f9b5 4004 	ldrsh.w	r4, [r5, #4]
		  ((adc_temp >> 4) - ((int32_t)data->dig_t1))) >> 12) *
    ab46:	131b      	asrs	r3, r3, #12
    ab48:	435c      	muls	r4, r3
	var2 = (((((adc_temp >> 4) - ((int32_t)data->dig_t1)) *
    ab4a:	13a4      	asrs	r4, r4, #14
	data->t_fine = var1 + var2;
    ab4c:	eb04 24e2 	add.w	r4, r4, r2, asr #11
	data->comp_temp = (data->t_fine * 5 + 128) >> 8;
    ab50:	eb04 0384 	add.w	r3, r4, r4, lsl #2
	var1 = ((int64_t)data->t_fine) - 128000;
    ab54:	f5b4 3efa 	subs.w	lr, r4, #128000	; 0x1f400
	data->comp_temp = (data->t_fine * 5 + 128) >> 8;
    ab58:	f103 0380 	add.w	r3, r3, #128	; 0x80
	var2 = var1 * var1 * (int64_t)data->dig_p6;
    ab5c:	fbae 120e 	umull	r1, r2, lr, lr
	data->comp_temp = (data->t_fine * 5 + 128) >> 8;
    ab60:	ea4f 2323 	mov.w	r3, r3, asr #8
	var2 = var1 * var1 * (int64_t)data->dig_p6;
    ab64:	e9cd 1200 	strd	r1, r2, [sp]
	data->comp_temp = (data->t_fine * 5 + 128) >> 8;
    ab68:	626b      	str	r3, [r5, #36]	; 0x24
	var1 = ((int64_t)data->t_fine) - 128000;
    ab6a:	ea4f 73e4 	mov.w	r3, r4, asr #31
	var2 = var1 * var1 * (int64_t)data->dig_p6;
    ab6e:	9a01      	ldr	r2, [sp, #4]
	data->t_fine = var1 + var2;
    ab70:	632c      	str	r4, [r5, #48]	; 0x30
	var1 = ((int64_t)data->t_fine) - 128000;
    ab72:	f143 3cff 	adc.w	ip, r3, #4294967295
	var2 = var1 * var1 * (int64_t)data->dig_p6;
    ab76:	fb0e f30c 	mul.w	r3, lr, ip
    ab7a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
		((var1 * (int64_t)data->dig_p2) << 12);
    ab7e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
	var2 = var1 * var1 * (int64_t)data->dig_p6;
    ab82:	9301      	str	r3, [sp, #4]
		((var1 * (int64_t)data->dig_p2) << 12);
    ab84:	fb02 f10c 	mul.w	r1, r2, ip
    ab88:	17d3      	asrs	r3, r2, #31
    ab8a:	fb0e 1103 	mla	r1, lr, r3, r1
    ab8e:	fba2 230e 	umull	r2, r3, r2, lr
    ab92:	440b      	add	r3, r1
    ab94:	0319      	lsls	r1, r3, #12
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
    ab96:	9f01      	ldr	r7, [sp, #4]
		((var1 * (int64_t)data->dig_p2) << 12);
    ab98:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
    ab9c:	0310      	lsls	r0, r2, #12
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
    ab9e:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
    aba2:	fb02 fa07 	mul.w	sl, r2, r7
    aba6:	9f00      	ldr	r7, [sp, #0]
    aba8:	17d3      	asrs	r3, r2, #31
    abaa:	fb07 aa03 	mla	sl, r7, r3, sl
    abae:	fba2 2307 	umull	r2, r3, r2, r7
    abb2:	4453      	add	r3, sl
    abb4:	ea4f 2a12 	mov.w	sl, r2, lsr #8
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)data->dig_p1) >> 33;
    abb8:	3000      	adds	r0, #0
    abba:	88ea      	ldrh	r2, [r5, #6]
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
    abbc:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)data->dig_p1) >> 33;
    abc0:	f541 4100 	adc.w	r1, r1, #32768	; 0x8000
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
    abc4:	ea4f 2b23 	mov.w	fp, r3, asr #8
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)data->dig_p1) >> 33;
    abc8:	eb10 000a 	adds.w	r0, r0, sl
    abcc:	eb41 0b0b 	adc.w	fp, r1, fp
    abd0:	fba0 0102 	umull	r0, r1, r0, r2
    abd4:	fb02 110b 	mla	r1, r2, fp, r1
    abd8:	104a      	asrs	r2, r1, #1
    abda:	17cb      	asrs	r3, r1, #31
	if (var1 == 0) {
    abdc:	ea52 0103 	orrs.w	r1, r2, r3
    abe0:	f000 80bf 	beq.w	ad62 <bme280_sample_fetch+0x288>
	adc_press = (buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4);
    abe4:	ea4f 1818 	mov.w	r8, r8, lsr #4
    abe8:	ea48 1909 	orr.w	r9, r8, r9, lsl #4
    abec:	ea49 3906 	orr.w	r9, r9, r6, lsl #12
	p = 1048576 - adc_press;
    abf0:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
    abf4:	4648      	mov	r0, r9
    abf6:	17c1      	asrs	r1, r0, #31
	p = (((p << 31) - var2) * 3125) / var1;
    abf8:	ea4f 78c1 	mov.w	r8, r1, lsl #31
	var2 = var2 + (((int64_t)data->dig_p4) << 35);
    abfc:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
	p = (((p << 31) - var2) * 3125) / var1;
    ac00:	ea4f 7ac9 	mov.w	sl, r9, lsl #31
    ac04:	ea48 0859 	orr.w	r8, r8, r9, lsr #1
	var2 = var2 + (((int64_t)data->dig_p4) << 35);
    ac08:	f04f 0900 	mov.w	r9, #0
	p = (((p << 31) - var2) * 3125) / var1;
    ac0c:	ebba 0909 	subs.w	r9, sl, r9
	var2 = var2 + (((int64_t)data->dig_p4) << 35);
    ac10:	ea4f 01c0 	mov.w	r1, r0, lsl #3
	var2 = var1 * var1 * (int64_t)data->dig_p6;
    ac14:	f9b5 a010 	ldrsh.w	sl, [r5, #16]
    ac18:	9800      	ldr	r0, [sp, #0]
	p = (((p << 31) - var2) * 3125) / var1;
    ac1a:	eb68 0801 	sbc.w	r8, r8, r1
	var2 = var1 * var1 * (int64_t)data->dig_p6;
    ac1e:	9901      	ldr	r1, [sp, #4]
    ac20:	fb0a f701 	mul.w	r7, sl, r1
    ac24:	9900      	ldr	r1, [sp, #0]
    ac26:	ea4f 7bea 	mov.w	fp, sl, asr #31
    ac2a:	fb01 710b 	mla	r1, r1, fp, r7
    ac2e:	fbaa 6700 	umull	r6, r7, sl, r0
	p = (((p << 31) - var2) * 3125) / var1;
    ac32:	ebb9 0006 	subs.w	r0, r9, r6
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
    ac36:	f9b5 600e 	ldrsh.w	r6, [r5, #14]
	var2 = var1 * var1 * (int64_t)data->dig_p6;
    ac3a:	440f      	add	r7, r1
	p = (((p << 31) - var2) * 3125) / var1;
    ac3c:	eb68 0107 	sbc.w	r1, r8, r7
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
    ac40:	fb06 fc0c 	mul.w	ip, r6, ip
    ac44:	17f7      	asrs	r7, r6, #31
    ac46:	fb0e cc07 	mla	ip, lr, r7, ip
    ac4a:	fba6 670e 	umull	r6, r7, r6, lr
    ac4e:	4467      	add	r7, ip
    ac50:	ea4f 4e46 	mov.w	lr, r6, lsl #17
    ac54:	ea4f 4c47 	mov.w	ip, r7, lsl #17
	p = (((p << 31) - var2) * 3125) / var1;
    ac58:	ebb0 000e 	subs.w	r0, r0, lr
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
    ac5c:	ea4c 3cd6 	orr.w	ip, ip, r6, lsr #15
	p = (((p << 31) - var2) * 3125) / var1;
    ac60:	f640 4635 	movw	r6, #3125	; 0xc35
    ac64:	eb61 0c0c 	sbc.w	ip, r1, ip
    ac68:	fba0 0106 	umull	r0, r1, r0, r6
    ac6c:	fb06 110c 	mla	r1, r6, ip, r1
    ac70:	f7f5 fe14 	bl	89c <__aeabi_ldivmod>
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
    ac74:	0b42      	lsrs	r2, r0, #13
    ac76:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
    ac7a:	ea4f 3c61 	mov.w	ip, r1, asr #13
    ac7e:	f9b5 a016 	ldrsh.w	sl, [r5, #22]
	var2 = (((int64_t)data->dig_p8) * p) >> 19;
    ac82:	f9b5 6014 	ldrsh.w	r6, [r5, #20]
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
    ac86:	fb02 fc0c 	mul.w	ip, r2, ip
    ac8a:	fba2 8902 	umull	r8, r9, r2, r2
    ac8e:	eb09 094c 	add.w	r9, r9, ip, lsl #1
    ac92:	fb0a f309 	mul.w	r3, sl, r9
    ac96:	ea4f 7bea 	mov.w	fp, sl, asr #31
    ac9a:	fb08 370b 	mla	r7, r8, fp, r3
    ac9e:	fbaa 2308 	umull	r2, r3, sl, r8
    aca2:	443b      	add	r3, r7
    aca4:	ea4f 6e52 	mov.w	lr, r2, lsr #25
    aca8:	ea4e 1ec3 	orr.w	lr, lr, r3, lsl #7
    acac:	ea4f 6c63 	mov.w	ip, r3, asr #25
	var2 = (((int64_t)data->dig_p8) * p) >> 19;
    acb0:	17f7      	asrs	r7, r6, #31
    acb2:	fb06 f301 	mul.w	r3, r6, r1
    acb6:	fb00 3307 	mla	r3, r0, r7, r3
    acba:	fba6 6700 	umull	r6, r7, r6, r0
    acbe:	441f      	add	r7, r3
    acc0:	0cf3      	lsrs	r3, r6, #19
    acc2:	ea43 3347 	orr.w	r3, r3, r7, lsl #13
	p = ((p + var1 + var2) >> 8) + (((int64_t)data->dig_p7) << 4);
    acc6:	181b      	adds	r3, r3, r0
	var2 = (((int64_t)data->dig_p8) * p) >> 19;
    acc8:	ea4f 42e7 	mov.w	r2, r7, asr #19
	p = ((p + var1 + var2) >> 8) + (((int64_t)data->dig_p7) << 4);
    accc:	eb42 0101 	adc.w	r1, r2, r1
    acd0:	f9b5 0012 	ldrsh.w	r0, [r5, #18]
    acd4:	eb1e 0303 	adds.w	r3, lr, r3
    acd8:	ea4f 2213 	mov.w	r2, r3, lsr #8
    acdc:	eb4c 0c01 	adc.w	ip, ip, r1
    ace0:	ea42 620c 	orr.w	r2, r2, ip, lsl #24
    ace4:	0103      	lsls	r3, r0, #4
	data->comp_press = (uint32_t)p;
    ace6:	4413      	add	r3, r2
    ace8:	62ab      	str	r3, [r5, #40]	; 0x28
	if (data->chip_id == BME280_CHIP_ID) {
    acea:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    acee:	2b60      	cmp	r3, #96	; 0x60
    acf0:	d133      	bne.n	ad5a <bme280_sample_fetch+0x280>
	h = ((((adc_humidity << 14) - (((int32_t)data->dig_h4) << 20) -
    acf2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    acf6:	f9b5 201e 	ldrsh.w	r2, [r5, #30]
		(((int32_t)data->dig_h5) * h)) + ((int32_t)16384)) >> 15) *
    acfa:	f9b5 1020 	ldrsh.w	r1, [r5, #32]
	h = ((((adc_humidity << 14) - (((int32_t)data->dig_h4) << 20) -
    acfe:	ba5b      	rev16	r3, r3
    ad00:	b29b      	uxth	r3, r3
    ad02:	039b      	lsls	r3, r3, #14
		(((int32_t)data->dig_h5) * h)) + ((int32_t)16384)) >> 15) *
    ad04:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
	h = (data->t_fine - ((int32_t)76800));
    ad08:	f5a4 3496 	sub.w	r4, r4, #76800	; 0x12c00
		(((int32_t)data->dig_h5) * h)) + ((int32_t)16384)) >> 15) *
    ad0c:	eba3 5302 	sub.w	r3, r3, r2, lsl #20
    ad10:	fb04 3311 	mls	r3, r4, r1, r3
    ad14:	13d9      	asrs	r1, r3, #15
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
    ad16:	7f2b      	ldrb	r3, [r5, #28]
		(((((((h * ((int32_t)data->dig_h6)) >> 10) * (((h *
    ad18:	4363      	muls	r3, r4
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
    ad1a:	12db      	asrs	r3, r3, #11
    ad1c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
		(((((((h * ((int32_t)data->dig_h6)) >> 10) * (((h *
    ad20:	f995 3022 	ldrsb.w	r3, [r5, #34]	; 0x22
    ad24:	435c      	muls	r4, r3
    ad26:	12a3      	asrs	r3, r4, #10
    ad28:	4353      	muls	r3, r2
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
    ad2a:	129b      	asrs	r3, r3, #10
    ad2c:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
		((int32_t)2097152)) * ((int32_t)data->dig_h2) + 8192) >> 14);
    ad30:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
    ad34:	4353      	muls	r3, r2
    ad36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    ad3a:	139b      	asrs	r3, r3, #14
	h = ((((adc_humidity << 14) - (((int32_t)data->dig_h4) << 20) -
    ad3c:	434b      	muls	r3, r1
	h = (h - (((((h >> 15) * (h >> 15)) >> 7) *
    ad3e:	13da      	asrs	r2, r3, #15
		((int32_t)data->dig_h1)) >> 4));
    ad40:	7e29      	ldrb	r1, [r5, #24]
	h = (h - (((((h >> 15) * (h >> 15)) >> 7) *
    ad42:	4352      	muls	r2, r2
    ad44:	11d2      	asrs	r2, r2, #7
    ad46:	434a      	muls	r2, r1
    ad48:	eba3 1322 	sub.w	r3, r3, r2, asr #4
	h = (h > 419430400 ? 419430400 : h);
    ad4c:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
    ad50:	bfa8      	it	ge
    ad52:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
	data->comp_humidity = (uint32_t)(h >> 12);
    ad56:	131b      	asrs	r3, r3, #12
    ad58:	62eb      	str	r3, [r5, #44]	; 0x2c
	return 0;
    ad5a:	2000      	movs	r0, #0
}
    ad5c:	b005      	add	sp, #20
    ad5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		data->comp_press = 0U;
    ad62:	2300      	movs	r3, #0
    ad64:	e7c0      	b.n	ace8 <bme280_sample_fetch+0x20e>

0000ad66 <bme280_chip_init>:

	return 0;
}

static int bme280_chip_init(const struct device *dev)
{
    ad66:	b570      	push	{r4, r5, r6, lr}
	struct bme280_data *data = to_data(dev);
    ad68:	6905      	ldr	r5, [r0, #16]
{
    ad6a:	4604      	mov	r4, r0
	int err;

	err = bme280_bus_check(dev);
    ad6c:	6840      	ldr	r0, [r0, #4]
	return cfg->bus_io->check(&cfg->bus);
    ad6e:	6883      	ldr	r3, [r0, #8]
{
    ad70:	b088      	sub	sp, #32
	return cfg->bus_io->check(&cfg->bus);
    ad72:	681b      	ldr	r3, [r3, #0]
    ad74:	4798      	blx	r3
	if (err < 0) {
    ad76:	2800      	cmp	r0, #0
    ad78:	f2c0 808c 	blt.w	ae94 <bme280_chip_init+0x12e>
		LOG_DBG("bus check failed: %d", err);
		return err;
	}

	err = bme280_reg_read(dev, BME280_REG_ID, &data->chip_id, 1);
    ad7c:	6860      	ldr	r0, [r4, #4]
    ad7e:	2301      	movs	r3, #1
    ad80:	f105 0234 	add.w	r2, r5, #52	; 0x34
    ad84:	21d0      	movs	r1, #208	; 0xd0
    ad86:	f7ff fe86 	bl	aa96 <bme280_reg_read.isra.0>
	if (err < 0) {
    ad8a:	2800      	cmp	r0, #0
    ad8c:	f2c0 8082 	blt.w	ae94 <bme280_chip_init+0x12e>
		return err;
	}

	if (data->chip_id == BME280_CHIP_ID) {
		LOG_DBG("ID OK");
	} else if (data->chip_id == BMP280_CHIP_ID_MP ||
    ad90:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    ad94:	3b56      	subs	r3, #86	; 0x56
    ad96:	b2db      	uxtb	r3, r3
    ad98:	2b0a      	cmp	r3, #10
    ad9a:	f200 8092 	bhi.w	aec2 <bme280_chip_init+0x15c>
    ad9e:	f240 4205 	movw	r2, #1029	; 0x405
    ada2:	fa22 f303 	lsr.w	r3, r2, r3
    ada6:	07db      	lsls	r3, r3, #31
    ada8:	f140 808b 	bpl.w	aec2 <bme280_chip_init+0x15c>
	} else {
		LOG_DBG("bad chip id 0x%x", data->chip_id);
		return -ENOTSUP;
	}

	err = bme280_reg_write(dev, BME280_REG_RESET, BME280_CMD_SOFT_RESET);
    adac:	22b6      	movs	r2, #182	; 0xb6
    adae:	21e0      	movs	r1, #224	; 0xe0
    adb0:	6860      	ldr	r0, [r4, #4]
    adb2:	f7ff fe76 	bl	aaa2 <bme280_reg_write.isra.0>
	if (err < 0) {
		LOG_DBG("Soft-reset failed: %d", err);
	}

	err = bme280_wait_until_ready(dev);
    adb6:	4620      	mov	r0, r4
    adb8:	f7ff fe76 	bl	aaa8 <bme280_wait_until_ready>
	if (err < 0) {
    adbc:	2800      	cmp	r0, #0
    adbe:	db69      	blt.n	ae94 <bme280_chip_init+0x12e>
	err = bme280_reg_read(dev, BME280_REG_COMP_START,
    adc0:	6860      	ldr	r0, [r4, #4]
	struct bme280_data *data = to_data(dev);
    adc2:	6926      	ldr	r6, [r4, #16]
	err = bme280_reg_read(dev, BME280_REG_COMP_START,
    adc4:	2318      	movs	r3, #24
    adc6:	aa02      	add	r2, sp, #8
    adc8:	2188      	movs	r1, #136	; 0x88
    adca:	f7ff fe64 	bl	aa96 <bme280_reg_read.isra.0>
	if (err < 0) {
    adce:	2800      	cmp	r0, #0
    add0:	db60      	blt.n	ae94 <bme280_chip_init+0x12e>
	data->dig_t1 = sys_le16_to_cpu(buf[0]);
    add2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    add6:	8033      	strh	r3, [r6, #0]
	data->dig_t2 = sys_le16_to_cpu(buf[1]);
    add8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    addc:	8073      	strh	r3, [r6, #2]
	data->dig_t3 = sys_le16_to_cpu(buf[2]);
    adde:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    ade2:	80b3      	strh	r3, [r6, #4]
	data->dig_p1 = sys_le16_to_cpu(buf[3]);
    ade4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ade8:	80f3      	strh	r3, [r6, #6]
	data->dig_p2 = sys_le16_to_cpu(buf[4]);
    adea:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    adee:	8133      	strh	r3, [r6, #8]
	data->dig_p3 = sys_le16_to_cpu(buf[5]);
    adf0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    adf4:	8173      	strh	r3, [r6, #10]
	data->dig_p4 = sys_le16_to_cpu(buf[6]);
    adf6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    adfa:	81b3      	strh	r3, [r6, #12]
	data->dig_p5 = sys_le16_to_cpu(buf[7]);
    adfc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    ae00:	81f3      	strh	r3, [r6, #14]
	data->dig_p6 = sys_le16_to_cpu(buf[8]);
    ae02:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    ae06:	8233      	strh	r3, [r6, #16]
	data->dig_p7 = sys_le16_to_cpu(buf[9]);
    ae08:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    ae0c:	8273      	strh	r3, [r6, #18]
	data->dig_p8 = sys_le16_to_cpu(buf[10]);
    ae0e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    ae12:	82b3      	strh	r3, [r6, #20]
	data->dig_p9 = sys_le16_to_cpu(buf[11]);
    ae14:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    ae18:	82f3      	strh	r3, [r6, #22]
	if (data->chip_id == BME280_CHIP_ID) {
    ae1a:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
    ae1e:	2b60      	cmp	r3, #96	; 0x60
    ae20:	d12d      	bne.n	ae7e <bme280_chip_init+0x118>
		err = bme280_reg_read(dev, BME280_REG_HUM_COMP_PART1,
    ae22:	6860      	ldr	r0, [r4, #4]
    ae24:	2301      	movs	r3, #1
    ae26:	f106 0218 	add.w	r2, r6, #24
    ae2a:	21a1      	movs	r1, #161	; 0xa1
    ae2c:	f7ff fe33 	bl	aa96 <bme280_reg_read.isra.0>
		if (err < 0) {
    ae30:	2800      	cmp	r0, #0
    ae32:	db2f      	blt.n	ae94 <bme280_chip_init+0x12e>
		err = bme280_reg_read(dev, BME280_REG_HUM_COMP_PART2, hbuf, 7);
    ae34:	6860      	ldr	r0, [r4, #4]
    ae36:	2307      	movs	r3, #7
    ae38:	466a      	mov	r2, sp
    ae3a:	21e1      	movs	r1, #225	; 0xe1
    ae3c:	f7ff fe2b 	bl	aa96 <bme280_reg_read.isra.0>
		if (err < 0) {
    ae40:	2800      	cmp	r0, #0
    ae42:	db27      	blt.n	ae94 <bme280_chip_init+0x12e>
		data->dig_h2 = (hbuf[1] << 8) | hbuf[0];
    ae44:	f89d 2001 	ldrb.w	r2, [sp, #1]
    ae48:	f89d 3000 	ldrb.w	r3, [sp]
		data->dig_h4 = (hbuf[3] << 4) | (hbuf[4] & 0x0F);
    ae4c:	f89d 1003 	ldrb.w	r1, [sp, #3]
		data->dig_h2 = (hbuf[1] << 8) | hbuf[0];
    ae50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ae54:	8373      	strh	r3, [r6, #26]
		data->dig_h3 = hbuf[2];
    ae56:	f89d 3002 	ldrb.w	r3, [sp, #2]
    ae5a:	7733      	strb	r3, [r6, #28]
		data->dig_h4 = (hbuf[3] << 4) | (hbuf[4] & 0x0F);
    ae5c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ae60:	f003 020f 	and.w	r2, r3, #15
    ae64:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
    ae68:	83f2      	strh	r2, [r6, #30]
		data->dig_h5 = ((hbuf[4] >> 4) & 0x0F) | (hbuf[5] << 4);
    ae6a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    ae6e:	091b      	lsrs	r3, r3, #4
    ae70:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    ae74:	8433      	strh	r3, [r6, #32]
		data->dig_h6 = hbuf[6];
    ae76:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ae7a:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
	err = bme280_read_compensation(dev);
	if (err < 0) {
		return err;
	}

	if (data->chip_id == BME280_CHIP_ID) {
    ae7e:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    ae82:	2b60      	cmp	r3, #96	; 0x60
    ae84:	d008      	beq.n	ae98 <bme280_chip_init+0x132>
			LOG_DBG("CTRL_HUM write failed: %d", err);
			return err;
		}
	}

	err = bme280_reg_write(dev, BME280_REG_CTRL_MEAS,
    ae86:	6860      	ldr	r0, [r4, #4]
    ae88:	2257      	movs	r2, #87	; 0x57
    ae8a:	21f4      	movs	r1, #244	; 0xf4
    ae8c:	f7ff fe09 	bl	aaa2 <bme280_reg_write.isra.0>
			       BME280_CTRL_MEAS_VAL);
	if (err < 0) {
    ae90:	2800      	cmp	r0, #0
    ae92:	da09      	bge.n	aea8 <bme280_chip_init+0x142>
	/* Wait for the sensor to be ready */
	k_sleep(K_MSEC(1));

	LOG_DBG("\"%s\" OK", dev->name);
	return 0;
}
    ae94:	b008      	add	sp, #32
    ae96:	bd70      	pop	{r4, r5, r6, pc}
		err = bme280_reg_write(dev, BME280_REG_CTRL_HUM,
    ae98:	6860      	ldr	r0, [r4, #4]
    ae9a:	2205      	movs	r2, #5
    ae9c:	21f2      	movs	r1, #242	; 0xf2
    ae9e:	f7ff fe00 	bl	aaa2 <bme280_reg_write.isra.0>
		if (err < 0) {
    aea2:	2800      	cmp	r0, #0
    aea4:	daef      	bge.n	ae86 <bme280_chip_init+0x120>
    aea6:	e7f5      	b.n	ae94 <bme280_chip_init+0x12e>
	err = bme280_reg_write(dev, BME280_REG_CONFIG,
    aea8:	6860      	ldr	r0, [r4, #4]
    aeaa:	22a8      	movs	r2, #168	; 0xa8
    aeac:	21f5      	movs	r1, #245	; 0xf5
    aeae:	f7ff fdf8 	bl	aaa2 <bme280_reg_write.isra.0>
	if (err < 0) {
    aeb2:	2800      	cmp	r0, #0
    aeb4:	dbee      	blt.n	ae94 <bme280_chip_init+0x12e>
    aeb6:	2021      	movs	r0, #33	; 0x21
    aeb8:	2100      	movs	r1, #0
    aeba:	f7fd f8c3 	bl	8044 <z_impl_k_sleep>
	return 0;
    aebe:	2000      	movs	r0, #0
    aec0:	e7e8      	b.n	ae94 <bme280_chip_init+0x12e>
		return -ENOTSUP;
    aec2:	f06f 0085 	mvn.w	r0, #133	; 0x85
    aec6:	e7e5      	b.n	ae94 <bme280_chip_init+0x12e>

0000aec8 <bme280_bus_check_i2c>:

#include "bme280.h"

#if BME280_BUS_I2C
static int bme280_bus_check_i2c(const union bme280_bus *bus)
{
    aec8:	b508      	push	{r3, lr}
	return device_is_ready(bus->i2c.bus) ? 0 : -ENODEV;
    aeca:	6800      	ldr	r0, [r0, #0]
    aecc:	f000 fa88 	bl	b3e0 <z_device_ready>
    aed0:	2800      	cmp	r0, #0
}
    aed2:	bf0c      	ite	eq
    aed4:	f06f 0012 	mvneq.w	r0, #18
    aed8:	2000      	movne	r0, #0
    aeda:	bd08      	pop	{r3, pc}

0000aedc <bme280_reg_read_i2c>:

static int bme280_reg_read_i2c(const union bme280_bus *bus,
			       uint8_t start, uint8_t *buf, int size)
{
    aedc:	b530      	push	{r4, r5, lr}
    aede:	b089      	sub	sp, #36	; 0x24
    aee0:	4604      	mov	r4, r0
    aee2:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
    aee6:	f10d 0107 	add.w	r1, sp, #7
    aeea:	461d      	mov	r5, r3
    aeec:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
    aeee:	2101      	movs	r1, #1
	msg[1].len = num_read;
    aef0:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].len = num_write;
    aef4:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    aef6:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
    aef8:	2100      	movs	r1, #0
	return i2c_burst_read(spec->bus, spec->addr,
    aefa:	6800      	ldr	r0, [r0, #0]
    aefc:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
    aefe:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    af02:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    af06:	6882      	ldr	r2, [r0, #8]
    af08:	a902      	add	r1, sp, #8
    af0a:	6894      	ldr	r4, [r2, #8]
    af0c:	2202      	movs	r2, #2
    af0e:	47a0      	blx	r4
	return i2c_burst_read_dt(&bus->i2c, start, buf, size);
}
    af10:	b009      	add	sp, #36	; 0x24
    af12:	bd30      	pop	{r4, r5, pc}

0000af14 <bme280_reg_write_i2c>:

static int bme280_reg_write_i2c(const union bme280_bus *bus,
				uint8_t reg, uint8_t val)
{
    af14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    af16:	4603      	mov	r3, r0
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
    af18:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.len = num_bytes;
    af1c:	2202      	movs	r2, #2
 * @return a value from i2c_reg_write_byte()
 */
static inline int i2c_reg_write_byte_dt(const struct i2c_dt_spec *spec,
					uint8_t reg_addr, uint8_t value)
{
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
    af1e:	6800      	ldr	r0, [r0, #0]
    af20:	889b      	ldrh	r3, [r3, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
    af22:	f88d 1000 	strb.w	r1, [sp]
	msg.buf = (uint8_t *)buf;
    af26:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
    af2a:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    af2c:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    af30:	6882      	ldr	r2, [r0, #8]
    af32:	a901      	add	r1, sp, #4
    af34:	6894      	ldr	r4, [r2, #8]
    af36:	2201      	movs	r2, #1
    af38:	47a0      	blx	r4
	return i2c_reg_write_byte_dt(&bus->i2c, reg, val);
}
    af3a:	b004      	add	sp, #16
    af3c:	bd10      	pop	{r4, pc}

0000af3e <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    af3e:	6843      	ldr	r3, [r0, #4]
    af40:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    af42:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    af46:	05d1      	lsls	r1, r2, #23
{
    af48:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    af4a:	d518      	bpl.n	af7e <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    af4c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    af50:	b1aa      	cbz	r2, af7e <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    af52:	f04f 0120 	mov.w	r1, #32
    af56:	f3ef 8211 	mrs	r2, BASEPRI
    af5a:	f381 8812 	msr	BASEPRI_MAX, r1
    af5e:	f3bf 8f6f 	isb	sy
    af62:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    af66:	b131      	cbz	r1, af76 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    af68:	2100      	movs	r1, #0
    af6a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    af6e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    af72:	2101      	movs	r1, #1
    af74:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    af76:	f382 8811 	msr	BASEPRI, r2
    af7a:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    af7e:	6842      	ldr	r2, [r0, #4]
    af80:	6852      	ldr	r2, [r2, #4]
    af82:	06d2      	lsls	r2, r2, #27
    af84:	d51a      	bpl.n	afbc <uarte_nrfx_isr_int+0x7e>
	__asm__ volatile(
    af86:	f04f 0220 	mov.w	r2, #32
    af8a:	f3ef 8111 	mrs	r1, BASEPRI
    af8e:	f382 8812 	msr	BASEPRI_MAX, r2
    af92:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    af96:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    af9a:	b112      	cbz	r2, afa2 <uarte_nrfx_isr_int+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    af9c:	2200      	movs	r2, #0
    af9e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    afa2:	6902      	ldr	r2, [r0, #16]
    afa4:	68d2      	ldr	r2, [r2, #12]
    afa6:	b10a      	cbz	r2, afac <uarte_nrfx_isr_int+0x6e>
    afa8:	6912      	ldr	r2, [r2, #16]
    afaa:	b91a      	cbnz	r2, afb4 <uarte_nrfx_isr_int+0x76>
    p_reg->INTENCLR = mask;
    afac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    afb0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    afb4:	f381 8811 	msr	BASEPRI, r1
    afb8:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
    afbc:	6902      	ldr	r2, [r0, #16]
    afbe:	68d2      	ldr	r2, [r2, #12]
    afc0:	b15a      	cbz	r2, afda <uarte_nrfx_isr_int+0x9c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    afc2:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    afc6:	b151      	cbz	r1, afde <uarte_nrfx_isr_int+0xa0>
		if (data->int_driven->disable_tx_irq) {
    afc8:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
    afca:	2100      	movs	r1, #0
    afcc:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    afce:	b134      	cbz	r4, afde <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
    afd0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    afd4:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    afd8:	7391      	strb	r1, [r2, #14]
}
    afda:	bc10      	pop	{r4}
    afdc:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    afde:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    afe2:	b121      	cbz	r1, afee <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    afe4:	2100      	movs	r1, #0
    afe6:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    afea:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    afee:	6813      	ldr	r3, [r2, #0]
    aff0:	2b00      	cmp	r3, #0
    aff2:	d0f2      	beq.n	afda <uarte_nrfx_isr_int+0x9c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    aff4:	6851      	ldr	r1, [r2, #4]
}
    aff6:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
    aff8:	4718      	bx	r3

0000affa <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    affa:	6902      	ldr	r2, [r0, #16]
{
    affc:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    affe:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    b002:	e883 0003 	stmia.w	r3, {r0, r1}
}
    b006:	2000      	movs	r0, #0
    b008:	4770      	bx	lr

0000b00a <uarte_nrfx_err_check>:
	return config->uarte_regs;
    b00a:	6843      	ldr	r3, [r0, #4]
    b00c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    b00e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    b012:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    b016:	4770      	bx	lr

0000b018 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    b018:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    b01a:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b01c:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    b020:	b940      	cbnz	r0, b034 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    b022:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    b024:	0792      	lsls	r2, r2, #30
    b026:	d406      	bmi.n	b036 <is_tx_ready+0x1e>
    b028:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    b02c:	3800      	subs	r0, #0
    b02e:	bf18      	it	ne
    b030:	2001      	movne	r0, #1
    b032:	4770      	bx	lr
    b034:	2001      	movs	r0, #1
}
    b036:	4770      	bx	lr

0000b038 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    b038:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    b03a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    b03c:	681b      	ldr	r3, [r3, #0]
    b03e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    b042:	b148      	cbz	r0, b058 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    b044:	7d52      	ldrb	r2, [r2, #21]
    b046:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b048:	2000      	movs	r0, #0
    b04a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    b04e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b052:	2201      	movs	r2, #1
    b054:	601a      	str	r2, [r3, #0]
	return 0;
    b056:	4770      	bx	lr
		return -1;
    b058:	f04f 30ff 	mov.w	r0, #4294967295
}
    b05c:	4770      	bx	lr

0000b05e <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    b05e:	2a00      	cmp	r2, #0
{
    b060:	b510      	push	{r4, lr}
    b062:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    b064:	dd0f      	ble.n	b086 <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
    b066:	6843      	ldr	r3, [r0, #4]
    b068:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b06a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    b06e:	b148      	cbz	r0, b084 <uarte_nrfx_fifo_read+0x26>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    b070:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b072:	2000      	movs	r0, #0
    b074:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    b078:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    b07c:	7d52      	ldrb	r2, [r2, #21]
    b07e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b080:	2001      	movs	r0, #1
    b082:	6018      	str	r0, [r3, #0]
}
    b084:	bd10      	pop	{r4, pc}
	int num_rx = 0;
    b086:	2000      	movs	r0, #0
    b088:	e7fc      	b.n	b084 <uarte_nrfx_fifo_read+0x26>

0000b08a <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    b08a:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    b08c:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    b08e:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    b090:	f04f 0020 	mov.w	r0, #32
    b094:	f3ef 8311 	mrs	r3, BASEPRI
    b098:	f380 8812 	msr	BASEPRI_MAX, r0
    b09c:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    b0a0:	68c9      	ldr	r1, [r1, #12]
    b0a2:	2000      	movs	r0, #0
    b0a4:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    b0a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    b0aa:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    b0ae:	f383 8811 	msr	BASEPRI, r3
    b0b2:	f3bf 8f6f 	isb	sy
}
    b0b6:	4770      	bx	lr

0000b0b8 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    b0b8:	6903      	ldr	r3, [r0, #16]
    b0ba:	68db      	ldr	r3, [r3, #12]
    b0bc:	2201      	movs	r2, #1
    b0be:	739a      	strb	r2, [r3, #14]
}
    b0c0:	4770      	bx	lr

0000b0c2 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    b0c2:	6903      	ldr	r3, [r0, #16]
    b0c4:	68db      	ldr	r3, [r3, #12]
    b0c6:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    b0c8:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    b0cc:	b962      	cbnz	r2, b0e8 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    b0ce:	6842      	ldr	r2, [r0, #4]
    b0d0:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b0d2:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    b0d6:	b140      	cbz	r0, b0ea <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    b0d8:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
    b0dc:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    b0e0:	d003      	beq.n	b0ea <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
    b0e2:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    b0e4:	2001      	movs	r0, #1
    b0e6:	4770      	bx	lr
    b0e8:	2000      	movs	r0, #0
}
    b0ea:	4770      	bx	lr

0000b0ec <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    b0ec:	6843      	ldr	r3, [r0, #4]
    b0ee:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b0f0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    b0f4:	3800      	subs	r0, #0
    b0f6:	bf18      	it	ne
    b0f8:	2001      	movne	r0, #1
    b0fa:	4770      	bx	lr

0000b0fc <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
    b0fc:	6843      	ldr	r3, [r0, #4]
    b0fe:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    b100:	2210      	movs	r2, #16
    b102:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    b106:	4770      	bx	lr

0000b108 <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
    b108:	6843      	ldr	r3, [r0, #4]
    b10a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    b10c:	2210      	movs	r2, #16
    b10e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    b112:	4770      	bx	lr

0000b114 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
    b114:	6843      	ldr	r3, [r0, #4]
    b116:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    b118:	f44f 7200 	mov.w	r2, #512	; 0x200
    b11c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    b120:	4770      	bx	lr

0000b122 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
    b122:	6843      	ldr	r3, [r0, #4]
    b124:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    b126:	f44f 7200 	mov.w	r2, #512	; 0x200
    b12a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    b12e:	4770      	bx	lr

0000b130 <uarte_nrfx_irq_update>:
}
    b130:	2001      	movs	r0, #1
    b132:	4770      	bx	lr

0000b134 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
    b134:	6903      	ldr	r3, [r0, #16]
    b136:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
    b138:	e9c3 1200 	strd	r1, r2, [r3]
}
    b13c:	4770      	bx	lr

0000b13e <tx_start>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    b13e:	6840      	ldr	r0, [r0, #4]
	return config->uarte_regs;
    b140:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    b142:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    b146:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b14a:	2200      	movs	r2, #0
    b14c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    b150:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    b154:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    b158:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b15c:	6842      	ldr	r2, [r0, #4]
    b15e:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    b160:	bf41      	itttt	mi
    b162:	2208      	movmi	r2, #8
    b164:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    b168:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    b16c:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b170:	2201      	movs	r2, #1
    b172:	609a      	str	r2, [r3, #8]
}
    b174:	4770      	bx	lr

0000b176 <uarte_nrfx_fifo_fill>:
{
    b176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    b178:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    b17a:	68f3      	ldr	r3, [r6, #12]
    b17c:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    b17e:	f3bf 8f5b 	dmb	ish
    b182:	4294      	cmp	r4, r2
    b184:	bfa8      	it	ge
    b186:	4614      	movge	r4, r2
{
    b188:	4605      	mov	r5, r0
    b18a:	3310      	adds	r3, #16
    b18c:	2201      	movs	r2, #1
    b18e:	e853 0f00 	ldrex	r0, [r3]
    b192:	2800      	cmp	r0, #0
    b194:	d103      	bne.n	b19e <uarte_nrfx_fifo_fill+0x28>
    b196:	e843 2700 	strex	r7, r2, [r3]
    b19a:	2f00      	cmp	r7, #0
    b19c:	d1f7      	bne.n	b18e <uarte_nrfx_fifo_fill+0x18>
    b19e:	f3bf 8f5b 	dmb	ish
    b1a2:	bf0c      	ite	eq
    b1a4:	4613      	moveq	r3, r2
    b1a6:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    b1a8:	d01d      	beq.n	b1e6 <uarte_nrfx_fifo_fill+0x70>
		return 0;
    b1aa:	461c      	mov	r4, r3
}
    b1ac:	4620      	mov	r0, r4
    b1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
    b1b0:	68f2      	ldr	r2, [r6, #12]
    b1b2:	5cc8      	ldrb	r0, [r1, r3]
    b1b4:	6892      	ldr	r2, [r2, #8]
    b1b6:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
    b1b8:	3301      	adds	r3, #1
    b1ba:	42a3      	cmp	r3, r4
    b1bc:	dbf8      	blt.n	b1b0 <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
    b1be:	f04f 0320 	mov.w	r3, #32
    b1c2:	f3ef 8711 	mrs	r7, BASEPRI
    b1c6:	f383 8812 	msr	BASEPRI_MAX, r3
    b1ca:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    b1ce:	4628      	mov	r0, r5
    b1d0:	f7ff ff22 	bl	b018 <is_tx_ready>
    b1d4:	68f3      	ldr	r3, [r6, #12]
    b1d6:	b940      	cbnz	r0, b1ea <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
    b1d8:	6118      	str	r0, [r3, #16]
		len = 0;
    b1da:	4604      	mov	r4, r0
	__asm__ volatile(
    b1dc:	f387 8811 	msr	BASEPRI, r7
    b1e0:	f3bf 8f6f 	isb	sy
	return len;
    b1e4:	e7e2      	b.n	b1ac <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
    b1e6:	2300      	movs	r3, #0
    b1e8:	e7e7      	b.n	b1ba <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
    b1ea:	6899      	ldr	r1, [r3, #8]
    b1ec:	4622      	mov	r2, r4
    b1ee:	4628      	mov	r0, r5
    b1f0:	f7ff ffa5 	bl	b13e <tx_start>
    b1f4:	e7f2      	b.n	b1dc <uarte_nrfx_fifo_fill+0x66>

0000b1f6 <uarte_nrfx_irq_is_pending>:
{
    b1f6:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    b1f8:	6843      	ldr	r3, [r0, #4]
    b1fa:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    b1fc:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    b200:	025b      	lsls	r3, r3, #9
{
    b202:	4604      	mov	r4, r0
		||
    b204:	d405      	bmi.n	b212 <uarte_nrfx_irq_is_pending+0x1c>
    b206:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b20a:	f010 0010 	ands.w	r0, r0, #16
    b20e:	d106      	bne.n	b21e <uarte_nrfx_irq_is_pending+0x28>
}
    b210:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    b212:	f7ff ff56 	bl	b0c2 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    b216:	2800      	cmp	r0, #0
    b218:	d0f5      	beq.n	b206 <uarte_nrfx_irq_is_pending+0x10>
		||
    b21a:	2001      	movs	r0, #1
    b21c:	e7f8      	b.n	b210 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    b21e:	4620      	mov	r0, r4
    b220:	f7ff ff64 	bl	b0ec <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    b224:	3800      	subs	r0, #0
    b226:	bf18      	it	ne
    b228:	2001      	movne	r0, #1
    b22a:	e7f1      	b.n	b210 <uarte_nrfx_irq_is_pending+0x1a>

0000b22c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    b22c:	b510      	push	{r4, lr}
    b22e:	2200      	movs	r2, #0
    b230:	4604      	mov	r4, r0
    b232:	2101      	movs	r1, #1
    b234:	2002      	movs	r0, #2
    b236:	f7f8 ffed 	bl	4214 <z_arm_irq_priority_set>
    b23a:	2002      	movs	r0, #2
    b23c:	f7f8 ffcc 	bl	41d8 <arch_irq_enable>
    b240:	4620      	mov	r0, r4
    b242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b246:	f7fa bd49 	b.w	5cdc <uarte_instance_init.isra.0>

0000b24a <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    b24a:	b510      	push	{r4, lr}
    b24c:	2200      	movs	r2, #0
    b24e:	4604      	mov	r4, r0
    b250:	2101      	movs	r1, #1
    b252:	2028      	movs	r0, #40	; 0x28
    b254:	f7f8 ffde 	bl	4214 <z_arm_irq_priority_set>
    b258:	2028      	movs	r0, #40	; 0x28
    b25a:	f7f8 ffbd 	bl	41d8 <arch_irq_enable>
    b25e:	4620      	mov	r0, r4
    b260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b264:	f7fa bd3a 	b.w	5cdc <uarte_instance_init.isra.0>

0000b268 <sys_clock_cycle_get_32>:
{
    b268:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    b26a:	f7fa fe61 	bl	5f30 <z_nrf_rtc_timer_read>
}
    b26e:	bd08      	pop	{r3, pc}

0000b270 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    b270:	4770      	bx	lr

0000b272 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    b272:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    b274:	2000      	movs	r0, #0
    b276:	f7f9 fb15 	bl	48a4 <sys_arch_reboot>

0000b27a <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    b27a:	f7fd bc07 	b.w	8a8c <nrf_cc3xx_platform_init_no_rng>

0000b27e <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    b27e:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    b280:	f7f7 f870 	bl	2364 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    b284:	f7f7 f922 	bl	24cc <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    b288:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    b28c:	f7fd bbfe 	b.w	8a8c <nrf_cc3xx_platform_init_no_rng>

0000b290 <nrfx_clock_enable>:
{
    b290:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    b292:	2000      	movs	r0, #0
    b294:	f7f8 ffb0 	bl	41f8 <arch_irq_is_enabled>
    b298:	b918      	cbnz	r0, b2a2 <nrfx_clock_enable+0x12>
}
    b29a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    b29e:	f7f8 bf9b 	b.w	41d8 <arch_irq_enable>
    b2a2:	bd08      	pop	{r3, pc}

0000b2a4 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    b2a4:	4700      	bx	r0

0000b2a6 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    b2a6:	f000 bbcc 	b.w	ba42 <z_impl_k_busy_wait>

0000b2aa <nrf_gpio_reconfigure>:
{
    b2aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b2ac:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b2ae:	a801      	add	r0, sp, #4
{
    b2b0:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    b2b4:	4617      	mov	r7, r2
    b2b6:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b2b8:	f7fb f8fc 	bl	64b4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b2bc:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    b2be:	2f00      	cmp	r7, #0
    b2c0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    b2c4:	bf14      	ite	ne
    b2c6:	2302      	movne	r3, #2
    b2c8:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    b2ca:	2900      	cmp	r1, #0
    b2cc:	bf18      	it	ne
    b2ce:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    b2d2:	2d00      	cmp	r5, #0
    b2d4:	bf14      	ite	ne
    b2d6:	f04f 0c0c 	movne.w	ip, #12
    b2da:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    b2de:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    b2e0:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    b2e4:	bf14      	ite	ne
    b2e6:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    b2ea:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    b2ee:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    b2f0:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b2f4:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    b2f8:	bf14      	ite	ne
    b2fa:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    b2fe:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    b302:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    b306:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    b30a:	b101      	cbz	r1, b30e <nrf_gpio_reconfigure+0x64>
    b30c:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    b30e:	b10f      	cbz	r7, b314 <nrf_gpio_reconfigure+0x6a>
    b310:	783f      	ldrb	r7, [r7, #0]
    b312:	007f      	lsls	r7, r7, #1
    b314:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    b316:	b10d      	cbz	r5, b31c <nrf_gpio_reconfigure+0x72>
    b318:	782d      	ldrb	r5, [r5, #0]
    b31a:	00ad      	lsls	r5, r5, #2
    b31c:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    b31e:	b10c      	cbz	r4, b324 <nrf_gpio_reconfigure+0x7a>
    b320:	7822      	ldrb	r2, [r4, #0]
    b322:	0214      	lsls	r4, r2, #8
    b324:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    b326:	b10e      	cbz	r6, b32c <nrf_gpio_reconfigure+0x82>
    b328:	7836      	ldrb	r6, [r6, #0]
    b32a:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    b32c:	432c      	orrs	r4, r5
    b32e:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    b330:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    b334:	b003      	add	sp, #12
    b336:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b338 <nrf_gpio_cfg_sense_set>:
{
    b338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    b33a:	f10d 030f 	add.w	r3, sp, #15
    b33e:	9301      	str	r3, [sp, #4]
    b340:	2300      	movs	r3, #0
{
    b342:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    b346:	9300      	str	r3, [sp, #0]
    b348:	461a      	mov	r2, r3
    b34a:	4619      	mov	r1, r3
    b34c:	f7ff ffad 	bl	b2aa <nrf_gpio_reconfigure>
}
    b350:	b005      	add	sp, #20
    b352:	f85d fb04 	ldr.w	pc, [sp], #4

0000b356 <nrf_gpio_pin_set>:
{
    b356:	b507      	push	{r0, r1, r2, lr}
    b358:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b35a:	a801      	add	r0, sp, #4
    b35c:	f7fb fbf4 	bl	6b48 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    b360:	9a01      	ldr	r2, [sp, #4]
    b362:	2301      	movs	r3, #1
    b364:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    b366:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    b36a:	b003      	add	sp, #12
    b36c:	f85d fb04 	ldr.w	pc, [sp], #4

0000b370 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
    b370:	7b0a      	ldrb	r2, [r1, #12]
{
    b372:	4603      	mov	r3, r0
    b374:	2a03      	cmp	r2, #3
    b376:	d829      	bhi.n	b3cc <xfer_completeness_check+0x5c>
    b378:	e8df f002 	tbb	[pc, r2]
    b37c:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    b380:	688a      	ldr	r2, [r1, #8]
    b382:	0350      	lsls	r0, r2, #13
    b384:	d504      	bpl.n	b390 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
    b386:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
    b38a:	6908      	ldr	r0, [r1, #16]
    b38c:	4290      	cmp	r0, r2
    b38e:	d107      	bne.n	b3a0 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    b390:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    b392:	0352      	lsls	r2, r2, #13
    b394:	d41a      	bmi.n	b3cc <xfer_completeness_check+0x5c>
    b396:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    b39a:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    b39c:	4291      	cmp	r1, r2
    b39e:	d015      	beq.n	b3cc <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    b3a0:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    b3a2:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    b3a4:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    b3a8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    b3ac:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
    b3ae:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    b3b2:	6908      	ldr	r0, [r1, #16]
    b3b4:	4290      	cmp	r0, r2
    b3b6:	d1f3      	bne.n	b3a0 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
    b3b8:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    b3bc:	e7ed      	b.n	b39a <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
    b3be:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    b3c2:	6909      	ldr	r1, [r1, #16]
    b3c4:	e7ea      	b.n	b39c <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
    b3c6:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    b3ca:	e7fa      	b.n	b3c2 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
    b3cc:	2001      	movs	r0, #1
}
    b3ce:	4770      	bx	lr

0000b3d0 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    b3d0:	f7fc b80a 	b.w	73e8 <_DoInit>

0000b3d4 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    b3d4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    b3d6:	f7ff fffb 	bl	b3d0 <SEGGER_RTT_Init>

	return 0;
}
    b3da:	2000      	movs	r0, #0
    b3dc:	bd08      	pop	{r3, pc}

0000b3de <z_device_state_init>:
}
    b3de:	4770      	bx	lr

0000b3e0 <z_device_ready>:
	if (dev == NULL) {
    b3e0:	b138      	cbz	r0, b3f2 <z_device_ready+0x12>
	return dev->state->initialized && (dev->state->init_res == 0U);
    b3e2:	68c3      	ldr	r3, [r0, #12]
    b3e4:	8818      	ldrh	r0, [r3, #0]
    b3e6:	f3c0 0008 	ubfx	r0, r0, #0, #9
    b3ea:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    b3ee:	4258      	negs	r0, r3
    b3f0:	4158      	adcs	r0, r3
}
    b3f2:	4770      	bx	lr

0000b3f4 <device_required_foreach>:
int device_required_foreach(const struct device *dev,
			    device_visitor_callback_t visitor_cb,
			    void *context)
{
	size_t handle_count = 0;
	const device_handle_t *handles = device_required_handles_get(dev, &handle_count);
    b3f4:	6940      	ldr	r0, [r0, #20]
{
    b3f6:	b470      	push	{r4, r5, r6}
    b3f8:	4613      	mov	r3, r2
    b3fa:	460d      	mov	r5, r1
	if (rv != NULL) {
    b3fc:	b960      	cbnz	r0, b418 <device_required_foreach+0x24>
	size_t handle_count = 0;
    b3fe:	4601      	mov	r1, r0

	return device_visitor(handles, handle_count, visitor_cb, context);
    b400:	462a      	mov	r2, r5
}
    b402:	bc70      	pop	{r4, r5, r6}
	return device_visitor(handles, handle_count, visitor_cb, context);
    b404:	f7fc b826 	b.w	7454 <device_visitor>
			++i;
    b408:	3101      	adds	r1, #1
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
    b40a:	f830 4011 	ldrh.w	r4, [r0, r1, lsl #1]
    b40e:	4434      	add	r4, r6
		while ((rv[i] != DEVICE_HANDLE_ENDS)
    b410:	b2a4      	uxth	r4, r4
    b412:	4294      	cmp	r4, r2
    b414:	d9f8      	bls.n	b408 <device_required_foreach+0x14>
    b416:	e7f3      	b.n	b400 <device_required_foreach+0xc>
		size_t i = 0;
    b418:	2100      	movs	r1, #0
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
    b41a:	f647 76ff 	movw	r6, #32767	; 0x7fff
		while ((rv[i] != DEVICE_HANDLE_ENDS)
    b41e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
    b422:	e7f2      	b.n	b40a <device_required_foreach+0x16>

0000b424 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    b424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b426:	4605      	mov	r5, r0
    b428:	460e      	mov	r6, r1
	__asm__ volatile(
    b42a:	f04f 0320 	mov.w	r3, #32
    b42e:	f3ef 8711 	mrs	r7, BASEPRI
    b432:	f383 8812 	msr	BASEPRI_MAX, r3
    b436:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    b43a:	f7fc fe1d 	bl	8078 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    b43e:	4631      	mov	r1, r6
    b440:	4604      	mov	r4, r0
    b442:	4628      	mov	r0, r5
    b444:	f7ff ff15 	bl	b272 <k_sys_fatal_error_handler>
	__asm__ volatile(
    b448:	f387 8811 	msr	BASEPRI, r7
    b44c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    b450:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    b452:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b456:	f7f9 b905 	b.w	4664 <z_impl_k_thread_abort>

0000b45a <z_pm_save_idle_exit>:
{
    b45a:	b508      	push	{r3, lr}
	pm_system_resume();
    b45c:	f7f7 f980 	bl	2760 <pm_system_resume>
}
    b460:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    b464:	f7ff bf04 	b.w	b270 <sys_clock_idle_exit>

0000b468 <k_mem_slab_init>:
{
    b468:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    b46a:	2400      	movs	r4, #0
    b46c:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    b46e:	ea41 0402 	orr.w	r4, r1, r2
    b472:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    b476:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    b47a:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    b47c:	d10c      	bne.n	b498 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    b47e:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    b480:	42a3      	cmp	r3, r4
    b482:	d103      	bne.n	b48c <k_mem_slab_init+0x24>
    b484:	e9c0 0000 	strd	r0, r0, [r0]
}
    b488:	2000      	movs	r0, #0
}
    b48a:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    b48c:	6945      	ldr	r5, [r0, #20]
    b48e:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    b490:	3401      	adds	r4, #1
		slab->free_list = p;
    b492:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    b494:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    b496:	e7f3      	b.n	b480 <k_mem_slab_init+0x18>
		return -EINVAL;
    b498:	f06f 0015 	mvn.w	r0, #21
	return rc;
    b49c:	e7f5      	b.n	b48a <k_mem_slab_init+0x22>

0000b49e <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    b49e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b4a0:	4604      	mov	r4, r0
    b4a2:	460d      	mov	r5, r1
	__asm__ volatile(
    b4a4:	f04f 0320 	mov.w	r3, #32
    b4a8:	f3ef 8611 	mrs	r6, BASEPRI
    b4ac:	f383 8812 	msr	BASEPRI_MAX, r3
    b4b0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    b4b4:	6947      	ldr	r7, [r0, #20]
    b4b6:	b97f      	cbnz	r7, b4d8 <k_mem_slab_free+0x3a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    b4b8:	f000 fa2f 	bl	b91a <z_unpend_first_thread>

		if (pending_thread != NULL) {
    b4bc:	b160      	cbz	r0, b4d8 <k_mem_slab_free+0x3a>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    b4be:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    b4c0:	6142      	str	r2, [r0, #20]
    b4c2:	f8c0 70b0 	str.w	r7, [r0, #176]	; 0xb0
			z_ready_thread(pending_thread);
    b4c6:	f000 f9c9 	bl	b85c <z_ready_thread>
			z_reschedule(&slab->lock, key);
    b4ca:	4631      	mov	r1, r6
    b4cc:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    b4d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    b4d4:	f7fc bb14 	b.w	7b00 <z_reschedule>
	**(char ***) mem = slab->free_list;
    b4d8:	682b      	ldr	r3, [r5, #0]
    b4da:	6962      	ldr	r2, [r4, #20]
    b4dc:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    b4de:	682b      	ldr	r3, [r5, #0]
    b4e0:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    b4e2:	69a3      	ldr	r3, [r4, #24]
    b4e4:	3b01      	subs	r3, #1
    b4e6:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    b4e8:	f386 8811 	msr	BASEPRI, r6
    b4ec:	f3bf 8f6f 	isb	sy
}
    b4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b4f2 <z_impl_k_mutex_init>:
{
    b4f2:	4603      	mov	r3, r0
	mutex->owner = NULL;
    b4f4:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    b4f6:	e9c3 0002 	strd	r0, r0, [r3, #8]
    b4fa:	e9c3 3300 	strd	r3, r3, [r3]
}
    b4fe:	4770      	bx	lr

0000b500 <clear_event_registrations>:
	while (num_events--) {
    b500:	2314      	movs	r3, #20
{
    b502:	b570      	push	{r4, r5, r6, lr}
    b504:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
    b508:	2400      	movs	r4, #0
    b50a:	2601      	movs	r6, #1
	while (num_events--) {
    b50c:	4281      	cmp	r1, r0
    b50e:	d100      	bne.n	b512 <clear_event_registrations+0x12>
}
    b510:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
    b512:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
    b516:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
    b51a:	f003 031f 	and.w	r3, r3, #31
    b51e:	2b08      	cmp	r3, #8
    b520:	d80d      	bhi.n	b53e <clear_event_registrations+0x3e>
    b522:	fa06 f303 	lsl.w	r3, r6, r3
    b526:	f413 7f8b 	tst.w	r3, #278	; 0x116
    b52a:	d008      	beq.n	b53e <clear_event_registrations+0x3e>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
    b52c:	f851 3c14 	ldr.w	r3, [r1, #-20]
    b530:	b12b      	cbz	r3, b53e <clear_event_registrations+0x3e>
	sys_dnode_t *const prev = node->prev;
    b532:	f851 5c10 	ldr.w	r5, [r1, #-16]
	prev->next = next;
    b536:	602b      	str	r3, [r5, #0]
	next->prev = prev;
    b538:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
    b53a:	e941 4405 	strd	r4, r4, [r1, #-20]
    b53e:	f382 8811 	msr	BASEPRI, r2
    b542:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    b546:	f04f 0320 	mov.w	r3, #32
    b54a:	f3ef 8211 	mrs	r2, BASEPRI
    b54e:	f383 8812 	msr	BASEPRI_MAX, r3
    b552:	f3bf 8f6f 	isb	sy
    b556:	3914      	subs	r1, #20
    b558:	e7d8      	b.n	b50c <clear_event_registrations+0xc>

0000b55a <add_event>:
{
    b55a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b55c:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    b55e:	e9d0 2300 	ldrd	r2, r3, [r0]
    b562:	4290      	cmp	r0, r2
    b564:	4604      	mov	r4, r0
    b566:	460d      	mov	r5, r1
    b568:	d105      	bne.n	b576 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
    b56a:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
    b56c:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
    b570:	601d      	str	r5, [r3, #0]
	list->tail = node;
    b572:	6065      	str	r5, [r4, #4]
}
    b574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
    b576:	2b00      	cmp	r3, #0
    b578:	d0f7      	beq.n	b56a <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
    b57a:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    b57c:	b100      	cbz	r0, b580 <add_event+0x26>
    b57e:	3860      	subs	r0, #96	; 0x60
    b580:	b107      	cbz	r7, b584 <add_event+0x2a>
    b582:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
    b584:	4639      	mov	r1, r7
    b586:	f000 f92c 	bl	b7e2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
    b58a:	2800      	cmp	r0, #0
    b58c:	dced      	bgt.n	b56a <add_event+0x10>
	return list->head == list;
    b58e:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b590:	42b4      	cmp	r4, r6
    b592:	d0ea      	beq.n	b56a <add_event+0x10>
    b594:	2e00      	cmp	r6, #0
    b596:	bf38      	it	cc
    b598:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    b59a:	2e00      	cmp	r6, #0
    b59c:	d0e5      	beq.n	b56a <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
    b59e:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    b5a0:	b101      	cbz	r1, b5a4 <add_event+0x4a>
    b5a2:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
    b5a4:	4638      	mov	r0, r7
    b5a6:	f000 f91c 	bl	b7e2 <z_sched_prio_cmp>
    b5aa:	2800      	cmp	r0, #0
    b5ac:	dd05      	ble.n	b5ba <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
    b5ae:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
    b5b0:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
    b5b4:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    b5b6:	6075      	str	r5, [r6, #4]
			return;
    b5b8:	e7dc      	b.n	b574 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
    b5ba:	6863      	ldr	r3, [r4, #4]
    b5bc:	42b3      	cmp	r3, r6
    b5be:	d0d4      	beq.n	b56a <add_event+0x10>
    b5c0:	6836      	ldr	r6, [r6, #0]
    b5c2:	e7ea      	b.n	b59a <add_event+0x40>

0000b5c4 <register_events>:
{
    b5c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
    b5c8:	2500      	movs	r5, #0
{
    b5ca:	468b      	mov	fp, r1
    b5cc:	4614      	mov	r4, r2
    b5ce:	461f      	mov	r7, r3
    b5d0:	4682      	mov	sl, r0
	int events_registered = 0;
    b5d2:	462e      	mov	r6, r5
	event->poller = NULL;
    b5d4:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
    b5d6:	455d      	cmp	r5, fp
    b5d8:	db02      	blt.n	b5e0 <register_events+0x1c>
}
    b5da:	4630      	mov	r0, r6
    b5dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b5e0:	f04f 0320 	mov.w	r3, #32
    b5e4:	f3ef 8911 	mrs	r9, BASEPRI
    b5e8:	f383 8812 	msr	BASEPRI_MAX, r3
    b5ec:	f3bf 8f6f 	isb	sy
	switch (event->type) {
    b5f0:	f89a 300d 	ldrb.w	r3, [sl, #13]
    b5f4:	f003 031f 	and.w	r3, r3, #31
    b5f8:	3b01      	subs	r3, #1
    b5fa:	2b07      	cmp	r3, #7
    b5fc:	d80f      	bhi.n	b61e <register_events+0x5a>
    b5fe:	e8df f003 	tbb	[pc, r3]
    b602:	041e      	.short	0x041e
    b604:	0e0e0a0e 	.word	0x0e0e0a0e
    b608:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
    b60a:	f8da 3010 	ldr.w	r3, [sl, #16]
    b60e:	689b      	ldr	r3, [r3, #8]
    b610:	b12b      	cbz	r3, b61e <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
    b612:	2302      	movs	r3, #2
    b614:	e020      	b.n	b658 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
    b616:	f8da 3010 	ldr.w	r3, [sl, #16]
    b61a:	681b      	ldr	r3, [r3, #0]
    b61c:	bb8b      	cbnz	r3, b682 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
    b61e:	bb47      	cbnz	r7, b672 <register_events+0xae>
    b620:	7823      	ldrb	r3, [r4, #0]
    b622:	b333      	cbz	r3, b672 <register_events+0xae>
	switch (event->type) {
    b624:	f89a 300d 	ldrb.w	r3, [sl, #13]
    b628:	f003 031f 	and.w	r3, r3, #31
    b62c:	3b01      	subs	r3, #1
    b62e:	2b07      	cmp	r3, #7
    b630:	d830      	bhi.n	b694 <register_events+0xd0>
    b632:	e8df f003 	tbb	[pc, r3]
    b636:	2833      	.short	0x2833
    b638:	2f2f282f 	.word	0x2f2f282f
    b63c:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
    b63e:	f8da 3010 	ldr.w	r3, [sl, #16]
    b642:	689b      	ldr	r3, [r3, #8]
    b644:	2b00      	cmp	r3, #0
    b646:	d0ea      	beq.n	b61e <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
    b648:	2301      	movs	r3, #1
    b64a:	e005      	b.n	b658 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
    b64c:	f8da 3010 	ldr.w	r3, [sl, #16]
    b650:	6a1b      	ldr	r3, [r3, #32]
    b652:	2b00      	cmp	r3, #0
    b654:	d0e3      	beq.n	b61e <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
    b656:	2310      	movs	r3, #16
	event->state |= state;
    b658:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
    b65c:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
    b660:	f3c2 3145 	ubfx	r1, r2, #13, #6
    b664:	430b      	orrs	r3, r1
    b666:	f363 3252 	bfi	r2, r3, #13, #6
    b66a:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
    b66e:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
    b672:	f389 8811 	msr	BASEPRI, r9
    b676:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
    b67a:	3501      	adds	r5, #1
    b67c:	f10a 0a14 	add.w	sl, sl, #20
    b680:	e7a9      	b.n	b5d6 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
    b682:	2304      	movs	r3, #4
    b684:	e7e8      	b.n	b658 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
    b686:	f8da 0010 	ldr.w	r0, [sl, #16]
    b68a:	4622      	mov	r2, r4
    b68c:	4651      	mov	r1, sl
    b68e:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
    b690:	f7ff ff63 	bl	b55a <add_event>
	event->poller = poller;
    b694:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
    b698:	3601      	adds	r6, #1
    b69a:	e7ea      	b.n	b672 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
    b69c:	f8da 0010 	ldr.w	r0, [sl, #16]
    b6a0:	4622      	mov	r2, r4
    b6a2:	4651      	mov	r1, sl
    b6a4:	e7f4      	b.n	b690 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
    b6a6:	f8da 0010 	ldr.w	r0, [sl, #16]
    b6aa:	4622      	mov	r2, r4
    b6ac:	4651      	mov	r1, sl
    b6ae:	3024      	adds	r0, #36	; 0x24
    b6b0:	e7ee      	b.n	b690 <register_events+0xcc>

0000b6b2 <signal_poll_event>:
{
    b6b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
    b6b6:	6884      	ldr	r4, [r0, #8]
{
    b6b8:	4605      	mov	r5, r0
    b6ba:	460e      	mov	r6, r1
	if (poller != NULL) {
    b6bc:	b144      	cbz	r4, b6d0 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
    b6be:	7863      	ldrb	r3, [r4, #1]
    b6c0:	2b01      	cmp	r3, #1
    b6c2:	d138      	bne.n	b736 <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
    b6c4:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    b6c8:	f013 0302 	ands.w	r3, r3, #2
    b6cc:	d10a      	bne.n	b6e4 <signal_poll_event+0x32>
		poller->is_polling = false;
    b6ce:	7023      	strb	r3, [r4, #0]
	event->state |= state;
    b6d0:	68eb      	ldr	r3, [r5, #12]
    b6d2:	f3c3 3145 	ubfx	r1, r3, #13, #6
    b6d6:	430e      	orrs	r6, r1
	event->poller = NULL;
    b6d8:	2000      	movs	r0, #0
	event->state |= state;
    b6da:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
    b6de:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    b6e0:	60eb      	str	r3, [r5, #12]
	return retcode;
    b6e2:	e00d      	b.n	b700 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
    b6e4:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
    b6e8:	f04f 31ff 	mov.w	r1, #4294967295
    b6ec:	f06f 0001 	mvn.w	r0, #1
    b6f0:	428b      	cmp	r3, r1
    b6f2:	bf08      	it	eq
    b6f4:	4282      	cmpeq	r2, r0
    b6f6:	d105      	bne.n	b704 <signal_poll_event+0x52>
		poller->is_polling = false;
    b6f8:	2300      	movs	r3, #0
    b6fa:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
    b6fc:	f06f 000a 	mvn.w	r0, #10
}
    b700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    b704:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
    b708:	4640      	mov	r0, r8
    b70a:	f000 f873 	bl	b7f4 <z_unpend_thread>
	arch_thread_return_value_set(thread,
    b70e:	2e08      	cmp	r6, #8
    b710:	bf0c      	ite	eq
    b712:	f06f 0303 	mvneq.w	r3, #3
    b716:	2300      	movne	r3, #0
    b718:	6523      	str	r3, [r4, #80]	; 0x50
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    b71a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    b71e:	06db      	lsls	r3, r3, #27
    b720:	d102      	bne.n	b728 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
    b722:	f854 7c48 	ldr.w	r7, [r4, #-72]
    b726:	b10f      	cbz	r7, b72c <signal_poll_event+0x7a>
		poller->is_polling = false;
    b728:	2300      	movs	r3, #0
    b72a:	e7d0      	b.n	b6ce <signal_poll_event+0x1c>
	z_ready_thread(thread);
    b72c:	4640      	mov	r0, r8
    b72e:	f000 f895 	bl	b85c <z_ready_thread>
		poller->is_polling = false;
    b732:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    b734:	e7cc      	b.n	b6d0 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
    b736:	2b02      	cmp	r3, #2
    b738:	d1f6      	bne.n	b728 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    b73a:	7823      	ldrb	r3, [r4, #0]
    b73c:	2b00      	cmp	r3, #0
    b73e:	d0c7      	beq.n	b6d0 <signal_poll_event+0x1e>
    b740:	f854 7c04 	ldr.w	r7, [r4, #-4]
    b744:	2f00      	cmp	r7, #0
    b746:	d0f4      	beq.n	b732 <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
    b748:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    b74c:	f1a4 0914 	sub.w	r9, r4, #20
    b750:	f104 0014 	add.w	r0, r4, #20
    b754:	f000 f92f 	bl	b9b6 <z_abort_timeout>
		twork->poll_result = 0;
    b758:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
    b75c:	4649      	mov	r1, r9
    b75e:	4638      	mov	r0, r7
    b760:	f000 f97a 	bl	ba58 <k_work_submit_to_queue>
		poller->is_polling = false;
    b764:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    b768:	e7b2      	b.n	b6d0 <signal_poll_event+0x1e>

0000b76a <k_poll_event_init>:
{
    b76a:	b510      	push	{r4, lr}
	event->type = type;
    b76c:	04d2      	lsls	r2, r2, #19
    b76e:	0209      	lsls	r1, r1, #8
    b770:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
    b774:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
    b778:	430a      	orrs	r2, r1
    b77a:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
    b77c:	2400      	movs	r4, #0
	event->type = type;
    b77e:	430a      	orrs	r2, r1
	event->obj = obj;
    b780:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
    b784:	6084      	str	r4, [r0, #8]
}
    b786:	bd10      	pop	{r4, pc}

0000b788 <z_handle_obj_poll_events>:
{
    b788:	4603      	mov	r3, r0
	return list->head == list;
    b78a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    b78c:	4283      	cmp	r3, r0
    b78e:	d008      	beq.n	b7a2 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
    b790:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    b794:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    b796:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    b798:	2300      	movs	r3, #0
	node->prev = NULL;
    b79a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    b79e:	f7ff bf88 	b.w	b6b2 <signal_poll_event>
}
    b7a2:	4770      	bx	lr

0000b7a4 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
    b7a4:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
    b7a6:	e9c0 0000 	strd	r0, r0, [r0]
    b7aa:	6083      	str	r3, [r0, #8]
}
    b7ac:	4770      	bx	lr

0000b7ae <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
    b7ae:	2300      	movs	r3, #0
    b7b0:	6083      	str	r3, [r0, #8]
}
    b7b2:	4770      	bx	lr

0000b7b4 <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
    b7b4:	6883      	ldr	r3, [r0, #8]
    b7b6:	600b      	str	r3, [r1, #0]
	*result = sig->result;
    b7b8:	68c3      	ldr	r3, [r0, #12]
    b7ba:	6013      	str	r3, [r2, #0]
}
    b7bc:	4770      	bx	lr

0000b7be <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    b7be:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    b7c2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    b7c4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    b7c6:	2300      	movs	r3, #0
	node->prev = NULL;
    b7c8:	e9c0 3300 	strd	r3, r3, [r0]
}
    b7cc:	4770      	bx	lr

0000b7ce <unpend_thread_no_timeout>:
{
    b7ce:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    b7d0:	f7ff fff5 	bl	b7be <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    b7d4:	7b43      	ldrb	r3, [r0, #13]
    b7d6:	f023 0302 	bic.w	r3, r3, #2
    b7da:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    b7dc:	2300      	movs	r3, #0
    b7de:	6083      	str	r3, [r0, #8]
}
    b7e0:	bd08      	pop	{r3, pc}

0000b7e2 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    b7e2:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    b7e6:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    b7ea:	4283      	cmp	r3, r0
		return b2 - b1;
    b7ec:	bf14      	ite	ne
    b7ee:	1ac0      	subne	r0, r0, r3
	return 0;
    b7f0:	2000      	moveq	r0, #0
}
    b7f2:	4770      	bx	lr

0000b7f4 <z_unpend_thread>:
{
    b7f4:	b510      	push	{r4, lr}
	__asm__ volatile(
    b7f6:	f04f 0320 	mov.w	r3, #32
    b7fa:	f3ef 8411 	mrs	r4, BASEPRI
    b7fe:	f383 8812 	msr	BASEPRI_MAX, r3
    b802:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    b806:	f7ff ffe2 	bl	b7ce <unpend_thread_no_timeout>
	__asm__ volatile(
    b80a:	f384 8811 	msr	BASEPRI, r4
    b80e:	f3bf 8f6f 	isb	sy
}
    b812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_abort_timeout(&thread->base.timeout);
    b816:	3018      	adds	r0, #24
    b818:	f000 b8cd 	b.w	b9b6 <z_abort_timeout>

0000b81c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    b81c:	4603      	mov	r3, r0
    b81e:	b920      	cbnz	r0, b82a <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b820:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    b824:	b90a      	cbnz	r2, b82a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    b826:	f7f8 bd29 	b.w	427c <arch_swap>
    b82a:	f383 8811 	msr	BASEPRI, r3
    b82e:	f3bf 8f6f 	isb	sy
}
    b832:	4770      	bx	lr

0000b834 <z_reschedule_unlocked>:
	__asm__ volatile(
    b834:	f04f 0320 	mov.w	r3, #32
    b838:	f3ef 8011 	mrs	r0, BASEPRI
    b83c:	f383 8812 	msr	BASEPRI_MAX, r3
    b840:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    b844:	f7ff bfea 	b.w	b81c <z_reschedule_irqlock>

0000b848 <z_priq_dumb_best>:
{
    b848:	4603      	mov	r3, r0
	return list->head == list;
    b84a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b84c:	4283      	cmp	r3, r0
    b84e:	d003      	beq.n	b858 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    b850:	2800      	cmp	r0, #0
    b852:	bf38      	it	cc
    b854:	2000      	movcc	r0, #0
    b856:	4770      	bx	lr
	struct k_thread *thread = NULL;
    b858:	2000      	movs	r0, #0
}
    b85a:	4770      	bx	lr

0000b85c <z_ready_thread>:
{
    b85c:	b510      	push	{r4, lr}
    b85e:	f04f 0320 	mov.w	r3, #32
    b862:	f3ef 8411 	mrs	r4, BASEPRI
    b866:	f383 8812 	msr	BASEPRI_MAX, r3
    b86a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    b86e:	f7fc fa0d 	bl	7c8c <ready_thread>
	__asm__ volatile(
    b872:	f384 8811 	msr	BASEPRI, r4
    b876:	f3bf 8f6f 	isb	sy
}
    b87a:	bd10      	pop	{r4, pc}

0000b87c <z_thread_timeout>:
{
    b87c:	b510      	push	{r4, lr}
    b87e:	4601      	mov	r1, r0
	__asm__ volatile(
    b880:	f04f 0320 	mov.w	r3, #32
    b884:	f3ef 8411 	mrs	r4, BASEPRI
    b888:	f383 8812 	msr	BASEPRI_MAX, r3
    b88c:	f3bf 8f6f 	isb	sy
		if (!killed) {
    b890:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    b894:	f013 0f28 	tst.w	r3, #40	; 0x28
    b898:	d10d      	bne.n	b8b6 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    b89a:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    b89e:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    b8a0:	b10b      	cbz	r3, b8a6 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    b8a2:	f7ff ff94 	bl	b7ce <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    b8a6:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    b8aa:	f023 0314 	bic.w	r3, r3, #20
    b8ae:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    b8b2:	f7fc f9eb 	bl	7c8c <ready_thread>
	__asm__ volatile(
    b8b6:	f384 8811 	msr	BASEPRI, r4
    b8ba:	f3bf 8f6f 	isb	sy
}
    b8be:	bd10      	pop	{r4, pc}

0000b8c0 <add_to_waitq_locked>:
{
    b8c0:	b538      	push	{r3, r4, r5, lr}
    b8c2:	4604      	mov	r4, r0
    b8c4:	460d      	mov	r5, r1
	unready_thread(thread);
    b8c6:	f7fc fa37 	bl	7d38 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    b8ca:	7b63      	ldrb	r3, [r4, #13]
    b8cc:	f043 0302 	orr.w	r3, r3, #2
    b8d0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    b8d2:	b1b5      	cbz	r5, b902 <add_to_waitq_locked+0x42>
	return list->head == list;
    b8d4:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    b8d6:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b8d8:	429d      	cmp	r5, r3
    b8da:	bf08      	it	eq
    b8dc:	2300      	moveq	r3, #0
    b8de:	2b00      	cmp	r3, #0
    b8e0:	bf38      	it	cc
    b8e2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b8e4:	b19b      	cbz	r3, b90e <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
    b8e6:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    b8ea:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    b8ee:	4291      	cmp	r1, r2
    b8f0:	d008      	beq.n	b904 <add_to_waitq_locked+0x44>
		return b2 - b1;
    b8f2:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    b8f4:	2a00      	cmp	r2, #0
    b8f6:	dd05      	ble.n	b904 <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
    b8f8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    b8fa:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    b8fe:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    b900:	605c      	str	r4, [r3, #4]
}
    b902:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    b904:	686a      	ldr	r2, [r5, #4]
    b906:	4293      	cmp	r3, r2
    b908:	d001      	beq.n	b90e <add_to_waitq_locked+0x4e>
    b90a:	681b      	ldr	r3, [r3, #0]
    b90c:	e7ea      	b.n	b8e4 <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
    b90e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    b910:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    b914:	601c      	str	r4, [r3, #0]
	list->tail = node;
    b916:	606c      	str	r4, [r5, #4]
    b918:	e7f3      	b.n	b902 <add_to_waitq_locked+0x42>

0000b91a <z_unpend_first_thread>:
{
    b91a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    b91c:	f04f 0320 	mov.w	r3, #32
    b920:	f3ef 8511 	mrs	r5, BASEPRI
    b924:	f383 8812 	msr	BASEPRI_MAX, r3
    b928:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    b92c:	f7ff ff8c 	bl	b848 <z_priq_dumb_best>
		if (thread != NULL) {
    b930:	4604      	mov	r4, r0
    b932:	b120      	cbz	r0, b93e <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    b934:	f7ff ff4b 	bl	b7ce <unpend_thread_no_timeout>
    b938:	3018      	adds	r0, #24
    b93a:	f000 f83c 	bl	b9b6 <z_abort_timeout>
	__asm__ volatile(
    b93e:	f385 8811 	msr	BASEPRI, r5
    b942:	f3bf 8f6f 	isb	sy
}
    b946:	4620      	mov	r0, r4
    b948:	bd38      	pop	{r3, r4, r5, pc}

0000b94a <z_sched_wake>:
{
    b94a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    b94c:	f04f 0320 	mov.w	r3, #32
    b950:	f3ef 8511 	mrs	r5, BASEPRI
    b954:	f383 8812 	msr	BASEPRI_MAX, r3
    b958:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    b95c:	f7ff ff74 	bl	b848 <z_priq_dumb_best>
		if (thread != NULL) {
    b960:	4604      	mov	r4, r0
    b962:	b158      	cbz	r0, b97c <z_sched_wake+0x32>
    b964:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
    b968:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
    b96a:	f7ff ff30 	bl	b7ce <unpend_thread_no_timeout>
    b96e:	3018      	adds	r0, #24
    b970:	f000 f821 	bl	b9b6 <z_abort_timeout>
			ready_thread(thread);
    b974:	4620      	mov	r0, r4
    b976:	f7fc f989 	bl	7c8c <ready_thread>
			ret = true;
    b97a:	2001      	movs	r0, #1
	__asm__ volatile(
    b97c:	f385 8811 	msr	BASEPRI, r5
    b980:	f3bf 8f6f 	isb	sy
}
    b984:	bd38      	pop	{r3, r4, r5, pc}

0000b986 <k_is_in_isr>:
    b986:	f3ef 8005 	mrs	r0, IPSR
}
    b98a:	3800      	subs	r0, #0
    b98c:	bf18      	it	ne
    b98e:	2001      	movne	r0, #1
    b990:	4770      	bx	lr

0000b992 <k_thread_name_get>:
}
    b992:	3078      	adds	r0, #120	; 0x78
    b994:	4770      	bx	lr

0000b996 <z_impl_k_thread_start>:
	z_sched_start(thread);
    b996:	f7fc b9b1 	b.w	7cfc <z_sched_start>

0000b99a <z_impl_k_thread_stack_space_get>:
#error "Unsupported configuration for stack analysis"
#endif

int z_impl_k_thread_stack_space_get(const struct k_thread *thread,
				    size_t *unused_ptr)
{
    b99a:	b510      	push	{r4, lr}
	const uint8_t *start = (uint8_t *)thread->stack_info.start;
	size_t size = thread->stack_info.size;
    b99c:	e9d0 4227 	ldrd	r4, r2, [r0, #156]	; 0x9c
	size_t unused = 0;
    b9a0:	2300      	movs	r3, #0
		 */
		checked_stack += 4;
		size -= 4;
	}

	for (size_t i = 0; i < size; i++) {
    b9a2:	4293      	cmp	r3, r2
    b9a4:	d102      	bne.n	b9ac <z_impl_k_thread_stack_space_get+0x12>
		} else {
			break;
		}
	}

	*unused_ptr = unused;
    b9a6:	600b      	str	r3, [r1, #0]

	return 0;
}
    b9a8:	2000      	movs	r0, #0
    b9aa:	bd10      	pop	{r4, pc}
		if ((checked_stack[i]) == 0xaaU) {
    b9ac:	5ce0      	ldrb	r0, [r4, r3]
    b9ae:	28aa      	cmp	r0, #170	; 0xaa
    b9b0:	d1f9      	bne.n	b9a6 <z_impl_k_thread_stack_space_get+0xc>
			unused++;
    b9b2:	3301      	adds	r3, #1
	for (size_t i = 0; i < size; i++) {
    b9b4:	e7f5      	b.n	b9a2 <z_impl_k_thread_stack_space_get+0x8>

0000b9b6 <z_abort_timeout>:
{
    b9b6:	b510      	push	{r4, lr}
	__asm__ volatile(
    b9b8:	f04f 0220 	mov.w	r2, #32
    b9bc:	f3ef 8411 	mrs	r4, BASEPRI
    b9c0:	f382 8812 	msr	BASEPRI_MAX, r2
    b9c4:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    b9c8:	6803      	ldr	r3, [r0, #0]
    b9ca:	b13b      	cbz	r3, b9dc <z_abort_timeout+0x26>
			remove_timeout(to);
    b9cc:	f7fc fdba 	bl	8544 <remove_timeout>
			ret = 0;
    b9d0:	2000      	movs	r0, #0
	__asm__ volatile(
    b9d2:	f384 8811 	msr	BASEPRI, r4
    b9d6:	f3bf 8f6f 	isb	sy
}
    b9da:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    b9dc:	f06f 0015 	mvn.w	r0, #21
    b9e0:	e7f7      	b.n	b9d2 <z_abort_timeout+0x1c>

0000b9e2 <z_get_next_timeout_expiry>:
{
    b9e2:	b510      	push	{r4, lr}
	__asm__ volatile(
    b9e4:	f04f 0320 	mov.w	r3, #32
    b9e8:	f3ef 8411 	mrs	r4, BASEPRI
    b9ec:	f383 8812 	msr	BASEPRI_MAX, r3
    b9f0:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    b9f4:	f7fc fdc0 	bl	8578 <next_timeout>
	__asm__ volatile(
    b9f8:	f384 8811 	msr	BASEPRI, r4
    b9fc:	f3bf 8f6f 	isb	sy
}
    ba00:	bd10      	pop	{r4, pc}

0000ba02 <z_set_timeout_expiry>:
{
    ba02:	b570      	push	{r4, r5, r6, lr}
    ba04:	4604      	mov	r4, r0
    ba06:	460d      	mov	r5, r1
	__asm__ volatile(
    ba08:	f04f 0320 	mov.w	r3, #32
    ba0c:	f3ef 8611 	mrs	r6, BASEPRI
    ba10:	f383 8812 	msr	BASEPRI_MAX, r3
    ba14:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    ba18:	f7fc fdae 	bl	8578 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    ba1c:	2801      	cmp	r0, #1
    ba1e:	dd05      	ble.n	ba2c <z_set_timeout_expiry+0x2a>
    ba20:	42a0      	cmp	r0, r4
    ba22:	db03      	blt.n	ba2c <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    ba24:	4629      	mov	r1, r5
    ba26:	4620      	mov	r0, r4
    ba28:	f7fa fc08 	bl	623c <sys_clock_set_timeout>
	__asm__ volatile(
    ba2c:	f386 8811 	msr	BASEPRI, r6
    ba30:	f3bf 8f6f 	isb	sy
}
    ba34:	bd70      	pop	{r4, r5, r6, pc}

0000ba36 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    ba36:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    ba38:	f7fc febe 	bl	87b8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    ba3c:	bd08      	pop	{r3, pc}

0000ba3e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    ba3e:	f7fc bebb 	b.w	87b8 <sys_clock_tick_get>

0000ba42 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    ba42:	b108      	cbz	r0, ba48 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    ba44:	f7f8 bf44 	b.w	48d0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    ba48:	4770      	bx	lr

0000ba4a <notify_queue_locked>:
	if (queue != NULL) {
    ba4a:	b120      	cbz	r0, ba56 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    ba4c:	2200      	movs	r2, #0
    ba4e:	4611      	mov	r1, r2
    ba50:	30c0      	adds	r0, #192	; 0xc0
    ba52:	f7ff bf7a 	b.w	b94a <z_sched_wake>
}
    ba56:	4770      	bx	lr

0000ba58 <k_work_submit_to_queue>:
{
    ba58:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ba5a:	9001      	str	r0, [sp, #4]
    ba5c:	4608      	mov	r0, r1
	__asm__ volatile(
    ba5e:	f04f 0320 	mov.w	r3, #32
    ba62:	f3ef 8511 	mrs	r5, BASEPRI
    ba66:	f383 8812 	msr	BASEPRI_MAX, r3
    ba6a:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    ba6e:	a901      	add	r1, sp, #4
    ba70:	f7fc ff5e 	bl	8930 <submit_to_queue_locked>
    ba74:	4604      	mov	r4, r0
	__asm__ volatile(
    ba76:	f385 8811 	msr	BASEPRI, r5
    ba7a:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    ba7e:	2800      	cmp	r0, #0
    ba80:	dd04      	ble.n	ba8c <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
    ba82:	f7fc faff 	bl	8084 <z_impl_k_is_preempt_thread>
    ba86:	b108      	cbz	r0, ba8c <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
    ba88:	f7fc fa4e 	bl	7f28 <z_impl_k_yield>
}
    ba8c:	4620      	mov	r0, r4
    ba8e:	b003      	add	sp, #12
    ba90:	bd30      	pop	{r4, r5, pc}

0000ba92 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    ba92:	4770      	bx	lr

0000ba94 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    ba94:	f7fb bbc0 	b.w	7218 <SystemInit>
